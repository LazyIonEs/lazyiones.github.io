<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Compose Desktop开发一款适用于安卓开发的桌面工具</title>
      <link href="/post/ecd805d2/"/>
      <url>/post/ecd805d2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于政策的改动，现在的App必须要经过备案才能上架应用商店，备案需要获取签名的<strong>md5</strong>和<strong>modules</strong>，刚开始都是在使用<a href="https://github.com/skylot/jadx">jadx</a>这款工具来获取，后来在使用中发现，他会先把apk解析出来，当我点击Apk signature时才开始签名的校验，步骤过于繁琐，并且解析apk还需要时间。后来就想着能不能自己做一款桌面端工具出来，将我想要的功能都集成进去呢。</p><p>说干就干，由于本人是Android开发，寻找解决方案时发现了<a href="https://github.com/JetBrains/compose-multiplatform">compose-multiplatform</a>，由于工作繁忙，没有学习过compose，但是对compose又非常感兴趣，就想着借着这次机会好好的学一学，于是，<a href="https://github.com/LazyIonEs/AndroidToolKit">AndroidToolKit</a>就诞生了。</p><h2 id="功能一览"><a href="#功能一览" class="headerlink" title="功能一览"></a>功能一览</h2><p><strong>AndroidToolKit</strong>是支持windows和mac的，并且支持深色和浅色模式，下面的截图都是在浅色模式下。</p><h3 id="签名信息"><a href="#签名信息" class="headerlink" title="签名信息"></a>签名信息</h3><p>该工具的主功能，也是本人最常用的功能之一。</p><p><img src="https://s2.loli.net/2024/03/11/UVRvgDCGxfkIQea.png" alt="screenshot_signature_information"></p><p>上传APK文件后使用<a href="https://blog.lazyiones.top/2024/02/14/ApkVerifier%E7%9A%84%E4%BD%BF%E7%94%A8/"><code>ApkVerifier</code></a>进行签名校验，并拿到<a href="https://developer.android.com/reference/java/security/cert/X509Certificate"><code>X509Certificate</code></a>，从中获取到<strong>modules、md5、sha-1、sha-256</strong>等信息。</p><p>当然，图中可以看到是支持上传签名文件的，使用<code>KeyStore</code>获取签名的证书，并将获取到的证书转成<code>X509Certificate</code>类型，后续的信息获取就与上面一致了（当上传签名文件时是需要输入签名密码的）。</p><p><img src="https://s2.loli.net/2024/03/11/JFi6k4dyqrEc5jn.png" alt="screenshot_signature_information_2"></p><h3 id="APK信息"><a href="#APK信息" class="headerlink" title="APK信息"></a>APK信息</h3><p>使用<code>aapt</code>工具解析apk的<code>AndroidManifest.xml</code>文件，提取部分信息，这个没什么好说的，网上一大堆教程。支持自定义<code>aapt</code>，内置的也有，可以直接用。命令如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aapt dump badging 文件路径</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/11/UW1Y57LlNEHIBx9.png" alt="screenshot_apk_information_1"></p><h3 id="APK签名"><a href="#APK签名" class="headerlink" title="APK签名"></a>APK签名</h3><p>顾名思义，对单个APK进行签名，使用的是<code>ApkSigner</code>，与<code>ApkVerifier</code>在同一个包中。大概用法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> signerBuild = ApkSigner.Builder()</span><br><span class="line"><span class="keyword">val</span> apkSigner = signerBuild</span><br><span class="line">...</span><br><span class="line">.build()</span><br><span class="line">apkSigner.sign() <span class="comment">// 开始签名</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/11/KWrM6F9BONPAgdV.png" alt="screenshot_apk_signature_1"></p><h3 id="签名生成"><a href="#签名生成" class="headerlink" title="签名生成"></a>签名生成</h3><p>目前的最后一个功能（后续还会继续更新，增加新功能）。使用<code>keytool</code>工具生成签名，用的也是命令的方式，支持自定义<code>keytool</code>，支持选择目标密钥类型。这个大家应该都很熟悉，具体命令如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -keyalg RSA</span><br><span class="line">-keystore 输出签名路径</span><br><span class="line">-storepass 密钥密码</span><br><span class="line">-alias 密钥别名</span><br><span class="line">-keypass 别名密码（当指定目标密钥类型为PKCS12时，-keypass的值会被忽略，别名密码将与-storepass保持一致）</span><br><span class="line">-validity 有效期，单位：天</span><br><span class="line">-dname CN=?,OU=?,O=?,L=?,S=?, C=? 依次对应作者名称、组织单位、组织、城市、省份、国家编码</span><br><span class="line">-deststoretype 目标密钥类型（JKS/PKCS12）</span><br><span class="line">-keysize 密钥大小（<span class="number">1024</span>/<span class="number">2048</span>）</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/03/11/kx34nZYolpNMXOA.png" alt="screenshot_signature_generation"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>下面说一说开发过程吧，因为边做边学的缘故，进度很慢，做了好几个月。参考的大部分文档是<a href="https://github.com/JetBrains/compose-multiplatform">compose-multiplatform</a>和<a href="https://developer.android.com/jetpack/compose/documentation?hl=zh-cn">compsoe</a>。</p><h3 id="文件拖拽"><a href="#文件拖拽" class="headerlink" title="文件拖拽"></a>文件拖拽</h3><p>本应用是支持文件拖拽的，就不演示，大家懂得都懂。使用的是官方的API，具体代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isDragging <span class="keyword">by</span> remember &#123; mutableStateOf(<span class="literal">false</span>) &#125;</span><br><span class="line">  Box(</span><br><span class="line">      modifier = modifier.padding(<span class="number">6.</span>dp).onExternalDrag(</span><br><span class="line">          onDragStart = &#123; isDragging = <span class="literal">true</span> &#125;,</span><br><span class="line">          onDragExit = &#123; isDragging = <span class="literal">false</span> &#125;,</span><br><span class="line">          onDrop = &#123; state -&gt;</span><br><span class="line">              <span class="keyword">val</span> dragData = state.dragData</span><br><span class="line">              <span class="keyword">if</span> (dragData <span class="keyword">is</span> DragData.FilesList) &#123;</span><br><span class="line">                  dragData.readFiles().first().let &#123;</span><br><span class="line">                      <span class="keyword">if</span> (it.endsWith(<span class="string">&quot;.apk&quot;</span>)) &#123;</span><br><span class="line">                          <span class="keyword">val</span> path = File(URI.create(it)).path</span><br><span class="line">                          <span class="comment">// 逻辑处理</span></span><br><span class="line">                      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (it.endsWith(<span class="string">&quot;.jks&quot;</span>) || it.endsWith(<span class="string">&quot;.keystore&quot;</span>)) &#123;</span><br><span class="line">                          <span class="keyword">val</span> path = File(URI.create(it)).path</span><br><span class="line">                          <span class="comment">// 逻辑处理</span></span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              isDragging = <span class="literal">false</span></span><br><span class="line">          &#125;),</span><br><span class="line">      contentAlignment = Alignment.TopCenter</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>可以用<code>isDragging</code>标识判断当前有没有选中文件拖拽到窗口的正上方，来做一些UI的调整。<code>onExternalDrag</code>目前是在实验期。</p><h3 id="文件选择"><a href="#文件选择" class="headerlink" title="文件选择"></a>文件选择</h3><ul><li>mac端使用的是<code>java.awt.FileDialog</code>；</li><li>windows端使用的是第三方开发的桌面选择器<a href="https://github.com/Wavesonics/compose-multiplatform-file-picker">compose-multiplatform-file-picker</a>；</li></ul><p>具体方法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示文件选择器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isApk 是APK还是签名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isAll 可选APK或签名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onFileSelected 选择回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showFileSelector</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    isApk: <span class="type">Boolean</span> = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    isAll: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    onFileSelected: (<span class="type">String</span>) -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> fileDialog = FileDialog(ComposeWindow())</span><br><span class="line">    fileDialog.isMultipleMode = <span class="literal">false</span></span><br><span class="line">    fileDialog.setFilenameFilter &#123; file, name -&gt;</span><br><span class="line">        <span class="keyword">val</span> sourceFile = File(file, name)</span><br><span class="line">        sourceFile.isFile &amp;&amp; <span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">            sourceFile.name.endsWith(<span class="string">&quot;.apk&quot;</span>) || sourceFile.name.endsWith(<span class="string">&quot;.keystore&quot;</span>) || sourceFile.name.endsWith(<span class="string">&quot;.jks&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isApk) sourceFile.name.endsWith(<span class="string">&quot;.apk&quot;</span>) <span class="keyword">else</span> (sourceFile.name.endsWith(<span class="string">&quot;.keystore&quot;</span>) || sourceFile.name.endsWith(<span class="string">&quot;.jks&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fileDialog.isVisible = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">val</span> directory = fileDialog.directory</span><br><span class="line">    <span class="keyword">val</span> file = fileDialog.file</span><br><span class="line">    <span class="keyword">if</span> (directory != <span class="literal">null</span> &amp;&amp; file != <span class="literal">null</span>) &#123;</span><br><span class="line">        onFileSelected(<span class="string">&quot;<span class="variable">$directory</span><span class="variable">$file</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于文件夹选择，<code>FileDialog</code>是不支持的，但是在mac端可以通过<code>apple.awt.fileDialogForDirectories</code>来使<code>FileDialog</code>选择文件夹。用法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示文件夹选择器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onFolderSelected 选择回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showFolderSelector</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    onFolderSelected: (<span class="type">String</span>) -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> &#123;</span><br><span class="line">    System.setProperty(<span class="string">&quot;apple.awt.fileDialogForDirectories&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> fileDialog = FileDialog(ComposeWindow())</span><br><span class="line">    fileDialog.isMultipleMode = <span class="literal">false</span></span><br><span class="line">    fileDialog.isVisible = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">val</span> directory = fileDialog.directory</span><br><span class="line">    <span class="keyword">val</span> file = fileDialog.file</span><br><span class="line">    <span class="keyword">if</span> (directory != <span class="literal">null</span> &amp;&amp; file != <span class="literal">null</span>) &#123;</span><br><span class="line">        onFolderSelected(<span class="string">&quot;<span class="variable">$directory</span><span class="variable">$file</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    System.setProperty(<span class="string">&quot;apple.awt.fileDialogForDirectories&quot;</span>, <span class="string">&quot;false&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Wavesonics/compose-multiplatform-file-picker">compose-multiplatform-file-picker</a>就不多说了，大家可以看他自己的文档，里面说的都很详细。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>使用<a href="https://github.com/cashapp/sqldelight">sqldelight</a>方案对数据进行保存，他是支持Android、Native、JVM、JS等客户端的，选择他的原因也是在官方示例demo内看到大部分项目都是用的此方案，具体使用下来还是很方便的。使用方法：</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id(<span class="string">&quot;app.cash.sqldelight&quot;</span>) version <span class="string">&quot;2.0.1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">  google()</span><br><span class="line">  mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqldelight &#123;</span><br><span class="line">    databases &#123;</span><br><span class="line">        create(<span class="string">&quot;ToolsKitDatabase&quot;</span>) &#123;</span><br><span class="line">            packageName.<span class="keyword">set</span>(<span class="string">&quot;kit&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kotlin &#123;</span><br><span class="line">    jvm(<span class="string">&quot;desktop&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        <span class="keyword">val</span> desktopMain <span class="keyword">by</span> getting</span><br><span class="line"></span><br><span class="line">        commonMain.dependencies &#123;</span><br><span class="line">            ...</span><br><span class="line">            implementation(libs.sqlDelight.coroutine)</span><br><span class="line">            implementation(libs.sqlDelight.runtime)</span><br><span class="line">            implementation(libs.slf4j.api)</span><br><span class="line">            implementation(libs.slf4j.simple)</span><br><span class="line">        &#125;</span><br><span class="line">        desktopMain.dependencies &#123;</span><br><span class="line">            ...</span><br><span class="line">            implementation(libs.sqlDelight.driver)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建sq文件"><a href="#创建sq文件" class="headerlink" title="创建sq文件"></a>创建sq文件</h4><p>目录：<strong>commonMain&#x2F;sqldelight&#x2F;kit&#x2F;Config.sq</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import kotlin.Boolean;</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS Config (</span><br><span class="line">   id INTEGER NOT NULL PRIMARY KEY,</span><br><span class="line">   dark_mode INTEGER NOT NULL,</span><br><span class="line">   aapt_path TEXT NOT NULL,</span><br><span class="line">   flag_delete INTEGER AS Boolean NOT NULL,</span><br><span class="line">   signer_suffix TEXT NOT NULL,</span><br><span class="line">   output_path TEXT NOT NULL,</span><br><span class="line">   is_align_file_size INTEGER AS Boolean NOT NULL,</span><br><span class="line">   keytool_path TEXT NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">   dest_store_type TEXT NOT NULL DEFAULT &#x27;JKS&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO Config(id, dark_mode, aapt_path, flag_delete, signer_suffix, output_path, is_align_file_size)</span><br><span class="line">SELECT 0, 0, &quot;&quot;, 1, &quot;_sign&quot;, &quot;&quot;, 1</span><br><span class="line">WHERE (SELECT COUNT(*) FROM Config WHERE id = 0) = 0;</span><br><span class="line"></span><br><span class="line">initInternal:</span><br><span class="line">UPDATE Config</span><br><span class="line">SET aapt_path = CASE WHEN aapt_path = &#x27;&#x27; THEN ? ELSE aapt_path END</span><br><span class="line">WHERE id = 0;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="实例化驱动程序"><a href="#实例化驱动程序" class="headerlink" title="实例化驱动程序"></a>实例化驱动程序</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="title">createDriver</span><span class="params">()</span></span>: SqlDriver &#123;</span><br><span class="line">    <span class="keyword">val</span> dbFile = getDatabaseFile()</span><br><span class="line">    <span class="keyword">return</span> JdbcSqliteDriver(</span><br><span class="line">        url = <span class="string">&quot;jdbc:sqlite:<span class="subst">$&#123;dbFile.absolutePath&#125;</span>&quot;</span>,</span><br><span class="line">        properties = Properties(),</span><br><span class="line">        schema = ToolsKitDatabase.Schema,</span><br><span class="line">        migrateEmptySchema = dbFile.exists(),</span><br><span class="line">    ).also &#123;</span><br><span class="line">        ToolsKitDatabase.Schema.create(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> database = createDatabase(createDriver())</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> dbQuery = database.configQueries</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">initInternal</span><span class="params">(aapt: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    dbQuery.initInternal(aapt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><p>上面的sq文件，Config表中有两个字段<code>keytool_path</code>和<code>dest_store_type</code>为后续升级数据后添加的。具体升级方法官方文档中说明的也很详细。</p><p>创建<strong>commonMain&#x2F;sqldelight&#x2F;migrations&#x2F;1.sqm</strong>文件，在<strong>1.sqm</strong>中增加迁移语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Config ADD COLUMN keytool_path TEXT NOT NULL DEFAULT &#x27;&#x27;;</span><br><span class="line">ALTER TABLE Config ADD COLUMN dest_store_type TEXT NOT NULL DEFAULT &#x27;JKS&#x27;;</span><br></pre></td></tr></table></figure><h3 id="lottie动画"><a href="#lottie动画" class="headerlink" title="lottie动画"></a>lottie动画</h3><p>本来打算使用lottie来实现的，后来发现并不支持多端，后来在官方的Issues中发现可以使用skiko来加载动画。具体用法如下</p><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> osName: String = System.getProperty(<span class="string">&quot;os.name&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> targetOs = <span class="keyword">when</span> &#123;</span><br><span class="line">    osName == <span class="string">&quot;Mac OS X&quot;</span> -&gt; <span class="string">&quot;macos&quot;</span></span><br><span class="line">    osName.startsWith(<span class="string">&quot;Win&quot;</span>) -&gt; <span class="string">&quot;windows&quot;</span></span><br><span class="line">    osName.startsWith(<span class="string">&quot;Linux&quot;</span>) -&gt; <span class="string">&quot;linux&quot;</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; error(<span class="string">&quot;Unsupported OS: <span class="variable">$osName</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> targetArch = <span class="keyword">when</span> (<span class="keyword">val</span> osArch = System.getProperty(<span class="string">&quot;os.arch&quot;</span>)) &#123;</span><br><span class="line">    <span class="string">&quot;x86_64&quot;</span>, <span class="string">&quot;amd64&quot;</span> -&gt; <span class="string">&quot;x64&quot;</span></span><br><span class="line">    <span class="string">&quot;aarch64&quot;</span> -&gt; <span class="string">&quot;arm64&quot;</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; error(<span class="string">&quot;Unsupported arch: <span class="variable">$osArch</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> target = <span class="string">&quot;<span class="subst">$&#123;targetOs&#125;</span>-<span class="subst">$&#123;targetArch&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kotlin &#123;</span><br><span class="line">    sourceSets &#123;</span><br><span class="line">      ...</span><br><span class="line">        desktopMain.dependencies &#123;</span><br><span class="line">          ...</span><br><span class="line">            implementation(<span class="string">&quot;org.jetbrains.skiko:skiko-awt-runtime-<span class="variable">$target</span>:0.7.9&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalResourceApi::class)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LottieAnimation</span><span class="params">(scope: <span class="type">CoroutineScope</span>, path: <span class="type">String</span>, modifier: <span class="type">Modifier</span> = Modifier)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> animation <span class="keyword">by</span> remember &#123; mutableStateOf&lt;Animation?&gt;(<span class="literal">null</span>) &#125;</span><br><span class="line">    scope.launch &#123;</span><br><span class="line">        <span class="keyword">val</span> json = Res.readBytes(path).decodeToString()</span><br><span class="line">        animation = Animation.makeFromString(json)</span><br><span class="line">    &#125;</span><br><span class="line">    animation?.let &#123; InfiniteAnimation(it, modifier.fillMaxSize()) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">InfiniteAnimation</span><span class="params">(animation: <span class="type">Animation</span>, modifier: <span class="type">Modifier</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> infiniteTransition = rememberInfiniteTransition()</span><br><span class="line">    <span class="keyword">val</span> time <span class="keyword">by</span> infiniteTransition.animateFloat(</span><br><span class="line">        initialValue = <span class="number">0f</span>,</span><br><span class="line">        targetValue = animation.duration,</span><br><span class="line">        animationSpec = infiniteRepeatable(</span><br><span class="line">            animation = tween((animation.duration * <span class="number">1000</span>).roundToInt(), easing = LinearEasing),</span><br><span class="line">            repeatMode = RepeatMode.Restart</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> invalidationController = remember &#123; InvalidationController() &#125;</span><br><span class="line">    animation.seekFrameTime(time, invalidationController)</span><br><span class="line">    Canvas(modifier) &#123;</span><br><span class="line">        drawIntoCanvas &#123;</span><br><span class="line">            animation.render(</span><br><span class="line">                canvas = it.nativeCanvas,</span><br><span class="line">                dst = Rect.makeWH(size.width, size.height)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LottieAnimation(scope, <span class="string">&quot;files/lottie_main_1.json&quot;</span>, modifier)</span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>最后说一下打包吧，用的是github的action实现的，通过<code>./gradlew packageReleaseDistributionForCurrentOS</code>命令就可以将当前环境的release包打出来。部分配置如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> kitVersion <span class="keyword">by</span> extra(<span class="string">&quot;1.3.0&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> kitPackageName = <span class="string">&quot;AndroidToolKit&quot;</span></span><br><span class="line"><span class="keyword">val</span> kitDescription = <span class="string">&quot;Desktop tools for Android development, supports Windows and Mac&quot;</span></span><br><span class="line"><span class="keyword">val</span> kitCopyright = <span class="string">&quot;Copyright (c) 2024 LazyIonEs&quot;</span></span><br><span class="line"><span class="keyword">val</span> kitVendor = <span class="string">&quot;LazyIonEs&quot;</span></span><br><span class="line"><span class="keyword">val</span> kitLicenseFile = project.rootProject.file(<span class="string">&quot;LICENSE&quot;</span>)</span><br><span class="line"></span><br><span class="line">compose.desktop &#123;</span><br><span class="line">    application &#123;</span><br><span class="line">        mainClass = <span class="string">&quot;MainKt&quot;</span></span><br><span class="line">        nativeDistributions &#123;</span><br><span class="line">            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)</span><br><span class="line">            packageName = kitPackageName</span><br><span class="line">            packageVersion = kitVersion</span><br><span class="line">            description = kitDescription</span><br><span class="line">            copyright = kitCopyright</span><br><span class="line">            vendor = kitVendor</span><br><span class="line">            licenseFile.<span class="keyword">set</span>(kitLicenseFile)</span><br><span class="line"></span><br><span class="line">            modules(<span class="string">&quot;jdk.unsupported&quot;</span>, <span class="string">&quot;java.sql&quot;</span>)</span><br><span class="line"></span><br><span class="line">            outputBaseDir.<span class="keyword">set</span>(project.layout.projectDirectory.dir(<span class="string">&quot;output&quot;</span>))</span><br><span class="line">            appResourcesRootDir.<span class="keyword">set</span>(project.layout.projectDirectory.dir(<span class="string">&quot;resources&quot;</span>))</span><br><span class="line"></span><br><span class="line">            linux &#123;</span><br><span class="line">                debPackageVersion = packageVersion</span><br><span class="line">                rpmPackageVersion = packageVersion</span><br><span class="line">                iconFile.<span class="keyword">set</span>(project.file(<span class="string">&quot;launcher/icon.png&quot;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            macOS &#123;</span><br><span class="line">                dmgPackageVersion = packageVersion</span><br><span class="line">                pkgPackageVersion = packageVersion</span><br><span class="line"></span><br><span class="line">                packageBuildVersion = packageVersion</span><br><span class="line">                dmgPackageBuildVersion = packageVersion</span><br><span class="line">                pkgPackageBuildVersion = packageVersion</span><br><span class="line">                bundleID = <span class="string">&quot;org.apk.tools&quot;</span></span><br><span class="line"></span><br><span class="line">                dockName = kitPackageName</span><br><span class="line">                iconFile.<span class="keyword">set</span>(project.file(<span class="string">&quot;launcher/icon.icns&quot;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            windows &#123;</span><br><span class="line">                msiPackageVersion = packageVersion</span><br><span class="line">                exePackageVersion = packageVersion</span><br><span class="line">                menuGroup = packageName</span><br><span class="line">                perUserInstall = <span class="literal">true</span></span><br><span class="line">                shortcut = <span class="literal">true</span></span><br><span class="line">                upgradeUuid = <span class="string">&quot;2B0C6D0B-BEB7-4E64-807E-BEE0F91C7B04&quot;</span></span><br><span class="line">                iconFile.<span class="keyword">set</span>(project.file(<span class="string">&quot;launcher/icon.ico&quot;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buildTypes.release.proguard &#123;</span><br><span class="line">            obfuscate.<span class="keyword">set</span>(<span class="literal">true</span>)</span><br><span class="line">            configurationFiles.from(project.file(<span class="string">&quot;compose-desktop.pro&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置什么的，参考了<a href="https://juejin.cn/post/7176875120839884860">从 0 到 1 搞一个 Compose Desktop 版本的天气应用（附源码）</a>，感兴趣的可以去看一下。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说实话，第一次使用compose，给了我很多惊喜，当然，对于multiplatform来说，compose-multiplatform现在还并不算完善，但是官方解决问题的速度很快，并且会给到解决方案等，希望compose-multiplatform越来越好。</p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/LazyIonEs/AndroidToolKit">AndroidToolKit</a></p><p><a href="https://github.com/LazyIonEs/AndroidToolKit/releases">releases</a>中提供了安装文件，欢迎体验支持</p><p>参考：</p><p><a href="https://github.com/JetBrains/compose-multiplatform">compose-multiplatform</a></p><p><a href="https://juejin.cn/post/7176875120839884860">从 0 到 1 搞一个 Compose Desktop 版本的天气应用（附源码）</a></p><p><a href="https://juejin.cn/post/7233951543115776055">使用ComposeDesktop开发一款桌面端多功能APK工具</a></p><p><a href="https://juejin.cn/post/7122645579439538183">Compose for Desktop桌面端简单的APK工具</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Compose </category>
          
          <category> Compose </category>
          
          <category> Compose Desktop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Desktop </tag>
            
            <tag> Compose </tag>
            
            <tag> Compose Desktop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ApkVerifier的使用</title>
      <link href="/post/a70c5b2/"/>
      <url>/post/a70c5b2/</url>
      
        <content type="html"><![CDATA[<h2 id="本文介绍如何使用ApkVerifier获取APK的签名信息。"><a href="#本文介绍如何使用ApkVerifier获取APK的签名信息。" class="headerlink" title="本文介绍如何使用ApkVerifier获取APK的签名信息。"></a>本文介绍如何使用ApkVerifier获取APK的签名信息。</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;com.android.tools.build:apksig:8.2.2&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> verifier: ApkVerifier = ApkVerifier.Builder(inputFile).build()</span><br><span class="line"><span class="keyword">val</span> result = verifier.verify()</span><br><span class="line"><span class="keyword">val</span> isSuccess = result.isVerified</span><br></pre></td></tr></table></figure><p><code>inputFile</code>为输入Apk的文件路径，构造一个新的Builder来验证提供的 APK 文件，该验证器旨在密切模仿 Android 平台的行为。这是为了使验证器能够用于检查 APK 的签名是否需要在 Android 上进行验证。</p><p>使用<code>verifier.verify()</code>获取结果。如果结果的<code>ApkVerifier.Result.isVerified()</code>返回true ，则可以认为 APK 已验证。验证结果还包括错误、警告以及有关签名者的信息（例如签名证书）</p><p>通过<code>ApkVerifier.Result.errors</code>获取错误信息。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> error = <span class="string">&quot;&quot;</span></span><br><span class="line">result.errors.filter &#123; it.issue == ApkVerifier.Issue.JAR_SIG_UNPROTECTED_ZIP_ENTRY &#125;</span><br><span class="line">                    .forEach &#123;</span><br><span class="line">                        error += it.toString() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>后续使用<code>ApkVerifier.Result.v(1/2/3)SchemeSigners</code>获取签名方案，并获取信息</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (result.v1SchemeSigners.isNotEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (signer <span class="keyword">in</span> result.v1SchemeSigners) &#123;</span><br><span class="line">                        <span class="keyword">val</span> cert = signer.certificate ?: <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">if</span> (signer.certificate.type == <span class="string">&quot;X.509&quot;</span>) &#123;</span><br><span class="line">                            <span class="keyword">val</span> subject = cert.subjectX500Principal.name</span><br><span class="line">                            <span class="keyword">val</span> validFrom = cert.notBefore.toString()</span><br><span class="line">                            <span class="keyword">val</span> validUntil = cert.notAfter.toString()</span><br><span class="line">                            <span class="keyword">val</span> publicKeyType = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.algorithm ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                            <span class="keyword">val</span> modulus = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.modulus?.toString(<span class="number">10</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                            <span class="keyword">val</span> signatureType = cert.sigAlgName</span><br><span class="line">                            <span class="keyword">val</span> md5 = getThumbPrint(cert, <span class="string">&quot;MD5&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                            <span class="keyword">val</span> sha1 = getThumbPrint(cert, <span class="string">&quot;SHA-1&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                            <span class="keyword">val</span> sha256 = getThumbPrint(cert, <span class="string">&quot;SHA-256&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                            <span class="keyword">val</span> apkVerifier = model.ApkVerifier(<span class="number">1</span>, subject, validFrom, validUntil, publicKeyType, modulus, signatureType, md5, sha1, sha256)</span><br><span class="line">                            list.add(apkVerifier)</span><br><span class="line">                        &#125;</span><br><span class="line">                        signer.errors.filter &#123; it.issue == ApkVerifier.Issue.JAR_SIG_UNPROTECTED_ZIP_ENTRY &#125;</span><br><span class="line">                            .forEach &#123;</span><br><span class="line">                                error += it.toString() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>V2和V3同理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (result.v2SchemeSigners.isNotEmpty()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (signer <span class="keyword">in</span> result.v2SchemeSigners) &#123;</span><br><span class="line">        <span class="keyword">val</span> cert = signer.certificate ?: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (signer.certificate.type == <span class="string">&quot;X.509&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> subject = cert.subjectX500Principal.name</span><br><span class="line">            <span class="keyword">val</span> validFrom = cert.notBefore.toString()</span><br><span class="line">            <span class="keyword">val</span> validUntil = cert.notAfter.toString()</span><br><span class="line">            <span class="keyword">val</span> publicKeyType = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.algorithm ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">val</span> modulus = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.modulus?.toString(<span class="number">10</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">val</span> signatureType = cert.sigAlgName</span><br><span class="line">            <span class="keyword">val</span> md5 = getThumbPrint(cert, <span class="string">&quot;MD5&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">val</span> sha1 = getThumbPrint(cert, <span class="string">&quot;SHA-1&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">val</span> sha256 = getThumbPrint(cert, <span class="string">&quot;SHA-256&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">val</span> apkVerifier = model.ApkVerifier(<span class="number">2</span>, subject, validFrom, validUntil, publicKeyType, modulus, signatureType, md5, sha1, sha256)</span><br><span class="line">            list.add(apkVerifier)</span><br><span class="line">        &#125;</span><br><span class="line">        signer.errors.filter &#123; it.issue == ApkVerifier.Issue.JAR_SIG_UNPROTECTED_ZIP_ENTRY &#125;</span><br><span class="line">            .forEach &#123;</span><br><span class="line">                error += it.toString() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result.v3SchemeSigners.isNotEmpty()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (signer <span class="keyword">in</span> result.v3SchemeSigners) &#123;</span><br><span class="line">        <span class="keyword">val</span> cert = signer.certificate ?: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (signer.certificate.type == <span class="string">&quot;X.509&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> subject = cert.subjectX500Principal.name</span><br><span class="line">            <span class="keyword">val</span> validFrom = cert.notBefore.toString()</span><br><span class="line">            <span class="keyword">val</span> validUntil = cert.notAfter.toString()</span><br><span class="line">            <span class="keyword">val</span> publicKeyType = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.algorithm ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">val</span> modulus = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.modulus?.toString(<span class="number">10</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">val</span> signatureType = cert.sigAlgName</span><br><span class="line">            <span class="keyword">val</span> md5 = getThumbPrint(cert, <span class="string">&quot;MD5&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">val</span> sha1 = getThumbPrint(cert, <span class="string">&quot;SHA-1&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">val</span> sha256 = getThumbPrint(cert, <span class="string">&quot;SHA-256&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">val</span> apkVerifier = model.ApkVerifier(<span class="number">3</span>, subject, validFrom, validUntil, publicKeyType, modulus, signatureType, md5, sha1, sha256)</span><br><span class="line">            list.add(apkVerifier)</span><br><span class="line">        &#125;</span><br><span class="line">        signer.errors.filter &#123; it.issue == ApkVerifier.Issue.JAR_SIG_UNPROTECTED_ZIP_ENTRY &#125;</span><br><span class="line">            .forEach &#123;</span><br><span class="line">                error += it.toString() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以获取到Apk的签名信息，界面如图</p><p><img src="https://s2.loli.net/2024/02/14/AvY6DoN1PKzHys2.png"></p><h3 id="完整代码如下"><a href="#完整代码如下" class="headerlink" title="完整代码如下"></a>完整代码如下</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 签名验证</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">apkVerifier</span><span class="params">(input: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">      launch(Dispatchers.IO) &#123;</span><br><span class="line">          updateApkVerifierState(UIState.Loading)</span><br><span class="line">          <span class="keyword">val</span> list = ArrayList&lt;model.ApkVerifier&gt;()</span><br><span class="line">          <span class="keyword">val</span> inputFile = File(input)</span><br><span class="line">          <span class="keyword">val</span> path = inputFile.path</span><br><span class="line">          <span class="keyword">val</span> name = inputFile.name</span><br><span class="line">          <span class="keyword">val</span> verifier: ApkVerifier = ApkVerifier.Builder(inputFile).build()</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">val</span> result = verifier.verify()</span><br><span class="line">              <span class="keyword">var</span> error = <span class="string">&quot;&quot;</span></span><br><span class="line">              <span class="keyword">val</span> isSuccess = result.isVerified</span><br><span class="line"></span><br><span class="line">              result.errors.filter &#123; it.issue == ApkVerifier.Issue.JAR_SIG_UNPROTECTED_ZIP_ENTRY &#125;</span><br><span class="line">                  .forEach &#123;</span><br><span class="line">                      error += it.toString() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (result.v1SchemeSigners.isNotEmpty()) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (signer <span class="keyword">in</span> result.v1SchemeSigners) &#123;</span><br><span class="line">                      <span class="keyword">val</span> cert = signer.certificate ?: <span class="keyword">continue</span></span><br><span class="line">                      <span class="keyword">if</span> (signer.certificate.type == <span class="string">&quot;X.509&quot;</span>) &#123;</span><br><span class="line">                          <span class="keyword">val</span> subject = cert.subjectX500Principal.name</span><br><span class="line">                          <span class="keyword">val</span> validFrom = cert.notBefore.toString()</span><br><span class="line">                          <span class="keyword">val</span> validUntil = cert.notAfter.toString()</span><br><span class="line">                          <span class="keyword">val</span> publicKeyType = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.algorithm ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> modulus = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.modulus?.toString(<span class="number">10</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> signatureType = cert.sigAlgName</span><br><span class="line">                          <span class="keyword">val</span> md5 = getThumbPrint(cert, <span class="string">&quot;MD5&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> sha1 = getThumbPrint(cert, <span class="string">&quot;SHA-1&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> sha256 = getThumbPrint(cert, <span class="string">&quot;SHA-256&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> apkVerifier = model.ApkVerifier(<span class="number">1</span>, subject, validFrom, validUntil, publicKeyType, modulus, signatureType, md5, sha1, sha256)</span><br><span class="line">                          list.add(apkVerifier)</span><br><span class="line">                      &#125;</span><br><span class="line">                      signer.errors.filter &#123; it.issue == ApkVerifier.Issue.JAR_SIG_UNPROTECTED_ZIP_ENTRY &#125;</span><br><span class="line">                          .forEach &#123;</span><br><span class="line">                              error += it.toString() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                          &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (result.v2SchemeSigners.isNotEmpty()) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (signer <span class="keyword">in</span> result.v2SchemeSigners) &#123;</span><br><span class="line">                      <span class="keyword">val</span> cert = signer.certificate ?: <span class="keyword">continue</span></span><br><span class="line">                      <span class="keyword">if</span> (signer.certificate.type == <span class="string">&quot;X.509&quot;</span>) &#123;</span><br><span class="line">                          <span class="keyword">val</span> subject = cert.subjectX500Principal.name</span><br><span class="line">                          <span class="keyword">val</span> validFrom = cert.notBefore.toString()</span><br><span class="line">                          <span class="keyword">val</span> validUntil = cert.notAfter.toString()</span><br><span class="line">                          <span class="keyword">val</span> publicKeyType = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.algorithm ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> modulus = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.modulus?.toString(<span class="number">10</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> signatureType = cert.sigAlgName</span><br><span class="line">                          <span class="keyword">val</span> md5 = getThumbPrint(cert, <span class="string">&quot;MD5&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> sha1 = getThumbPrint(cert, <span class="string">&quot;SHA-1&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> sha256 = getThumbPrint(cert, <span class="string">&quot;SHA-256&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> apkVerifier = model.ApkVerifier(<span class="number">2</span>, subject, validFrom, validUntil, publicKeyType, modulus, signatureType, md5, sha1, sha256)</span><br><span class="line">                          list.add(apkVerifier)</span><br><span class="line">                      &#125;</span><br><span class="line">                      signer.errors.filter &#123; it.issue == ApkVerifier.Issue.JAR_SIG_UNPROTECTED_ZIP_ENTRY &#125;</span><br><span class="line">                          .forEach &#123;</span><br><span class="line">                              error += it.toString() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                          &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (result.v3SchemeSigners.isNotEmpty()) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (signer <span class="keyword">in</span> result.v3SchemeSigners) &#123;</span><br><span class="line">                      <span class="keyword">val</span> cert = signer.certificate ?: <span class="keyword">continue</span></span><br><span class="line">                      <span class="keyword">if</span> (signer.certificate.type == <span class="string">&quot;X.509&quot;</span>) &#123;</span><br><span class="line">                          <span class="keyword">val</span> subject = cert.subjectX500Principal.name</span><br><span class="line">                          <span class="keyword">val</span> validFrom = cert.notBefore.toString()</span><br><span class="line">                          <span class="keyword">val</span> validUntil = cert.notAfter.toString()</span><br><span class="line">                          <span class="keyword">val</span> publicKeyType = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.algorithm ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> modulus = (cert.publicKey <span class="keyword">as</span>? RSAPublicKey)?.modulus?.toString(<span class="number">10</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> signatureType = cert.sigAlgName</span><br><span class="line">                          <span class="keyword">val</span> md5 = getThumbPrint(cert, <span class="string">&quot;MD5&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> sha1 = getThumbPrint(cert, <span class="string">&quot;SHA-1&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> sha256 = getThumbPrint(cert, <span class="string">&quot;SHA-256&quot;</span>) ?: <span class="string">&quot;&quot;</span></span><br><span class="line">                          <span class="keyword">val</span> apkVerifier = model.ApkVerifier(<span class="number">3</span>, subject, validFrom, validUntil, publicKeyType, modulus, signatureType, md5, sha1, sha256)</span><br><span class="line">                          list.add(apkVerifier)</span><br><span class="line">                      &#125;</span><br><span class="line">                      signer.errors.filter &#123; it.issue == ApkVerifier.Issue.JAR_SIG_UNPROTECTED_ZIP_ENTRY &#125;</span><br><span class="line">                          .forEach &#123;</span><br><span class="line">                              error += it.toString() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                          &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (isSuccess || list.isNotEmpty()) &#123;</span><br><span class="line">                  <span class="keyword">val</span> apkVerifierResult = ApkVerifierResult(isSuccess, path, name, list)</span><br><span class="line">                  updateApkVerifierState(UIState.Success(apkVerifierResult))</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (error.isBlank()) &#123;</span><br><span class="line">                      error = <span class="string">&quot;APK签名验证失败&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                  updateApkVerifierState(UIState.Error(error))</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">              updateApkVerifierState(UIState.Error(e.message ?: <span class="string">&quot;APK签名验证失败&quot;</span>))</span><br><span class="line">              e.printStackTrace()</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (apkVerifierState <span class="keyword">is</span> UIState.Error) &#123;</span><br><span class="line">              delay(<span class="number">1000</span>)</span><br><span class="line">              updateApkVerifierState(UIState.WAIT)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getThumbPrint</span><span class="params">(cert: <span class="type">X509Certificate</span>?, type: <span class="type">String</span>?)</span></span>: String? &#123;</span><br><span class="line">      <span class="keyword">val</span> md = MessageDigest.getInstance(type) <span class="comment">// lgtm [java/weak-cryptographic-algorithm]</span></span><br><span class="line">      <span class="keyword">val</span> der: ByteArray = cert?.encoded ?: <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      md.update(der)</span><br><span class="line">      <span class="keyword">val</span> digest = md.digest()</span><br><span class="line">      <span class="keyword">return</span> hexify(digest)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">hexify</span><span class="params">(bytes: <span class="type">ByteArray</span>)</span></span>: String &#123;</span><br><span class="line">      <span class="keyword">val</span> hexDigits = charArrayOf(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">      <span class="keyword">val</span> buf = StringBuilder(bytes.size * <span class="number">3</span>)</span><br><span class="line">      <span class="keyword">for</span> (aByte <span class="keyword">in</span> bytes) &#123;</span><br><span class="line">          buf.append(hexDigits[aByte.toInt() and <span class="number">0xf0</span> shr <span class="number">4</span>])</span><br><span class="line">          buf.append(hexDigits[aByte.toInt() and <span class="number">0x0f</span>])</span><br><span class="line">          <span class="keyword">if</span> (bytes.indexOf(aByte) != bytes.size - <span class="number">1</span>) &#123;</span><br><span class="line">              buf.append(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> buf.toString()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://github.com/skylot/jadx">Jadx</a></p>]]></content>
      
      
      <categories>
          
          <category> Compose </category>
          
          <category> Compose Multiplatform </category>
          
          <category> Kotlin </category>
          
          <category> Compose </category>
          
          <category> Desktop </category>
          
          <category> Apk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Apk </tag>
            
            <tag> Desktop </tag>
            
            <tag> Compose </tag>
            
            <tag> Kotlin </tag>
            
            <tag> Compose Multiplatform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Android中的自定义属性</title>
      <link href="/post/2897c959/"/>
      <url>/post/2897c959/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文出处：<br><a href="http://blog.csdn.net/lmj623565791/article/details/45022631">http://blog.csdn.net/lmj623565791/article/details/45022631</a><br>本文出自:<a href="http://blog.csdn.net/lmj623565791/">【张鸿洋的博客】</a></p></blockquote><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>对于自定义属性，大家肯定都不陌生，遵循以下几步，就可以实现：</p><ol><li>自定义一个<code>CustomView(extends View)</code>类</li><li>编写<code>values/attrs.xml</code>，在其中编写<code>styleable</code>和<code>item</code>等标签元素</li><li>在布局文件中<code>CustomView</code>使用自定义的属性（注意<code>namespace</code>）</li><li>在<code>CustomView</code>的构造方法中通过<code>TypedArray</code>获取</li></ol><blockquote><p>ps:如果你对上述几个步骤不熟悉，建议先熟悉下，再继续~</p></blockquote><p>那么，我有几个问题：</p><ul><li>以上步骤是如何奏效的？</li><li><code>styleable</code> 的含义是什么？可以不写嘛？我自定义属性，我声明属性就好了，为什么一定要写个<code>styleable</code>呢？</li><li>如果系统中已经有了语义比较明确的属性，我可以直接使用嘛？</li><li>构造方法中的有个参数叫做<code>AttributeSet</code><br>（eg: MyTextView(Context context, AttributeSet attrs) ）这个参数看名字就知道包含的是参数的数组，那么我能不能通过它去获取我的自定义属性呢？</li><li><code>TypedArray</code>是什么鬼？从哪冒出来的，就要我去使用？</li></ul><p>恩，针对这几个问题，大家可以考虑下，如何回答呢？还是说：老子会背上述4个步骤就够了~~</p><h4 id="常见的例子"><a href="#常见的例子" class="headerlink" title="常见的例子"></a>常见的例子</h4><p>接下来通过例子来回答上述问题，问题的回答顺序不定~~大家先看一个常见的例子，即上述几个步骤的代码化。</p><ul><li>自定义属性的声明文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span> <span class="attr">format</span>=<span class="string">&quot;string&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;testAttr&quot;</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自定义View类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTextView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> MyTextView.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyTextView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">        <span class="type">TypedArray</span> <span class="variable">ta</span> <span class="operator">=</span> context.obtainStyledAttributes(attrs, R.styleable.test);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> ta.getString(R.styleable.test_testAttr);</span><br><span class="line">        <span class="type">int</span> <span class="variable">textAttr</span> <span class="operator">=</span> ta.getInteger(R.styleable.test_text, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Log.e(TAG, <span class="string">&quot;text = &quot;</span> + text + <span class="string">&quot; , textAttr = &quot;</span> + textAttr);</span><br><span class="line"></span><br><span class="line">        ta.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>布局文件中使用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:zhy</span>=<span class="string">&quot;http://schemas.android.com/apk/res/com.example.test&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.test.MyTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">zhy:testAttr</span>=<span class="string">&quot;520&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">zhy:text</span>=<span class="string">&quot;helloworld&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ok，大家花3s扫一下，运行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyTextView: text = helloworld , textAttr = <span class="number">5201</span></span><br></pre></td></tr></table></figure><p>应该都不意外吧，注意下，我的<code>styleable</code>的<code>name</code>写的是<code>test</code>，所以说这里并不要求一定是自定义<code>View</code>的名字。</p><h4 id="AttributeSet与TypedArray"><a href="#AttributeSet与TypedArray" class="headerlink" title="AttributeSet与TypedArray"></a><code>AttributeSet</code>与<code>TypedArray</code></h4><p>下面考虑：</p><blockquote><p>构造方法中的有个参数叫做<code>AttributeSet</code>（eg: MyTextView(Context context, AttributeSet attrs) ）这个参数看名字就知道包含的是参数的集合，那么我能不能通过它去获取我的自定义属性呢？</p></blockquote><p>首先<code>AttributeSet</code>中的确保存的是该View声明的所有的属性，并且外面的确可以通过它去获取（自定义的）属性，怎么做呢？<br>其实看下<code>AttributeSet</code>的方法就明白了，下面看代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">MyTextView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> attrs.getAttributeCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> attrs.getAttributeName(i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrVal</span> <span class="operator">=</span> attrs.getAttributeValue(i);</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;attrName = &quot;</span> + attrName + <span class="string">&quot; , attrVal = &quot;</span> + attrVal);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ==&gt;use typedarray ...</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyTextView(<span class="number">4136</span>): attrName = layout_width , attrVal = <span class="number">100.</span>0dip</span><br><span class="line"><span class="title function_">MyTextView</span><span class="params">(<span class="number">4136</span>)</span>: attrName = layout_height , attrVal = <span class="number">200.</span>0dip</span><br><span class="line"><span class="title function_">MyTextView</span><span class="params">(<span class="number">4136</span>)</span>: attrName = text , attrVal = helloworld</span><br><span class="line"><span class="title function_">MyTextView</span><span class="params">(<span class="number">4136</span>)</span>: attrName = testAttr , attrVal = <span class="number">520</span></span><br></pre></td></tr></table></figure><p>结合上面的布局文件，你发现了什么？<br>我擦，果然很神奇，真的获得所有的属性，恩，没错，通过<code>AttributeSet</code>可以获得布局文件中定义的所有属性的key和value（还有一些方法，自己去尝试），那么是不是说<code>TypedArray</code>这个鬼可以抛弃了呢？答案是：<code>NO!</code>。</p><p>现在关注下一个问题：</p><blockquote><p><code>TypedArray</code>是什么鬼？从哪冒出来的，就要我去使用？</p></blockquote><p>我们简单修改下，布局文件中的<code>MyTextView</code>的属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.test.MyTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;@dimen/dp100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/dp200&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">zhy:testAttr</span>=<span class="string">&quot;520&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">zhy:text</span>=<span class="string">&quot;@string/hello_world&quot;</span> /&gt;</span>12345</span><br></pre></td></tr></table></figure><p>现在再次运行的结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MyTextView(<span class="number">4692</span>): attrName = layout_width , attrVal = @<span class="number">2131165234</span></span><br><span class="line">MyTextView(<span class="number">4692</span>): attrName = layout_height , attrVal = @<span class="number">2131165235</span></span><br><span class="line">MyTextView(<span class="number">4692</span>): attrName = text , attrVal = @<span class="number">2131361809</span></span><br><span class="line">MyTextView(<span class="number">4692</span>): attrName = testAttr , attrVal = <span class="number">520</span></span><br><span class="line">&gt;&gt;use typedarray</span><br><span class="line"><span class="title function_">MyTextView</span><span class="params">(<span class="number">4692</span>)</span>: text = Hello world! , textAttr = <span class="number">520123456</span></span><br></pre></td></tr></table></figure><p>发现了什么？通过<code>AttributeSet</code>获取的值，如果是引用都变成了@+数字的字符串。你说，这玩意你能看懂么？那么你看看最后一行使用TypedArray获取的值，是不是瞬间明白了什么。</p><p><code>TypedArray</code>其实是用来简化我们的工作的，比如上例，如果布局中的属性的值是引用类型（比如：<code>@dimen/dp100</code>），如果使用<code>AttributeSet</code>去获得最终的像素值，那么需要第一步拿到id，第二步再去解析id。而<code>TypedArray</code>正是帮我们简化了这个过程。</p><p>贴一下：如果通过<code>AttributeSet</code>获取最终的像素值的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">widthDimensionId</span> <span class="operator">=</span>  attrs.getAttributeResourceValue(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">Log.e(TAG, <span class="string">&quot;layout_width= &quot;</span>+getResources().getDimension(widthDimensionId));</span><br></pre></td></tr></table></figure><p>ok，现在别人问你<code>TypedArray</code>存在的意义，你就可以告诉他了。</p><h4 id="declare-styleable"><a href="#declare-styleable" class="headerlink" title="declare-styleable"></a><code>declare-styleable</code></h4><p>我们已经解决了两个问题，接下来，我们看看布局文件，我们有一个属性叫做：<code>zhy:text</code>。<br>总所周知，系统提供了一个属性叫做：<code>android:text</code>，那么我觉得直接使用<code>android:text</code>更nice，这样的话，考虑问题：</p><blockquote><p>如果系统中已经有了语义比较明确的属性，我可以直接使用嘛？</p></blockquote><p>答案是可以的，怎么做呢？<br>直接在attrs.xml中使用<code>android:text</code>属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;android:text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;testAttr&quot;</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span>1234</span><br></pre></td></tr></table></figure><p>注意，这里我们是使用已经定义好的属性，不需要去添加<code>format</code>属性（注意声明和使用的区别，差别就是有没有format）。<br>然后在类中这么获取：<code>ta.getString(R.styleable.test_android_text)</code>;布局文件中直接<code>android:text=&quot;@string/hello_world&quot;</code>即可。</p><p>这里提一下，系统中定义的属性，其实和我们自定义属性的方式类似，你可以在<code>sdk/platforms/android-xx/data/res/values</code>该目录下看到系统中定义的属性。然后你可以在系统提供的<code>View</code>（eg:<code>TextView</code>）的构造方法中发现<code>TypedArray</code>获取属性的代码（自己去看一下）。</p><p>ok，接下来，我在想，既然<code>declare-styleable</code>这个标签的name都能随便写，这么随意的话，那么考虑问题：</p><blockquote><p>styleable 的含义是什么？可以不写嘛？我自定义属性，我声明属性就好了，为什么一定要写个styleable呢？</p></blockquote><p>其实的确是可以不写的，怎么做呢？</p><ul><li>首先删除<code>declare-styleable</code>的标签</li></ul><p>那么现在的attrs.xml为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;testAttr&quot;</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span>1234</span><br></pre></td></tr></table></figure><p>哟西，so清爽~</p><p>* MyTextView实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTextView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> MyTextView.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] mAttr = &#123; android.R.attr.text, R.attr.testAttr &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ATTR_ANDROID_TEXT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ATTR_TESTATTR</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyTextView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ==&gt;use typedarray</span></span><br><span class="line">        <span class="type">TypedArray</span> <span class="variable">ta</span> <span class="operator">=</span> context.obtainStyledAttributes(attrs, mAttr);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> ta.getString(ATTR_ANDROID_TEXT);</span><br><span class="line">        <span class="type">int</span> <span class="variable">textAttr</span> <span class="operator">=</span> ta.getInteger(ATTR_TESTATTR, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//输出 text = Hello world! , textAttr = 520</span></span><br><span class="line">        Log.e(TAG, <span class="string">&quot;text = &quot;</span> + text + <span class="string">&quot; , textAttr = &quot;</span> + textAttr);</span><br><span class="line"></span><br><span class="line">        ta.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>貌似多了些代码，可以看到我们声明了一个int数组，数组中的元素就是我们想要获取的attr的id。并且我们根据元素的在数组中的位置，定义了一些整形的常量代表其下标，然后通过<code>TypedArray</code>进行获取。<br>可以看到，我们原本的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R.styleable.test =&gt; mAttr</span><br><span class="line">R.styleable.test_text =&gt; ATTR_ANDROID_TEXT(0)</span><br><span class="line">R.styleable.test_testAttr =&gt; ATTR_TESTATTR(1)</span><br></pre></td></tr></table></figure><p>那么其实呢？android在其内部也会这么做，按照传统的写法，它会在R.java生成如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">attr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> testAttr=<span class="number">0x7f0100a9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">styleable</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">test_android_text</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">test_testAttr</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] test = &#123;</span><br><span class="line">            <span class="number">0x0101014f</span>, <span class="number">0x7f0100a9</span></span><br><span class="line">     &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok，根据上述你应该发现了什么。styleale的出现系统可以为我们完成很多常量（int[]数组，下标常量）等的编写，简化我们的开发工作（想想如果一堆属性，自己编写常量，你得写成什么样的代码）。那么大家肯定还知道<code>declare-styleable</code>的name属性，一般情况下写的都是我们自定义View的类名。主要为了直观的表达，该<code>declare-styleable</code>的属性，都是改View所用的。</p><p>其实了解该原理是有用的</p><p>ok，现在5个问题，回答了4个，第一个问题：</p><blockquote><p>自定义属性的几个步骤是如何奏效的？</p></blockquote><p>恩，上述以及基本涵盖了这个问题的答案，大家自己总结，所以：略。</p><p>总结下今天的博客。</p><ul><li><code>attrs.xml</code>里面的<code>declare-styleable</code>以及item，android会根据其在R.java中生成一些常量方便我们使用(aapt干的)，本质上，我们可以不声明<code>declare-styleable</code>仅仅声明所需的属性即可。</li><li>我们在View的构造方法中，可以通过<code>AttributeSet</code>去获得自定义属性的值，但是比较麻烦，而<code>TypedArray</code>可以很方便的便于我们去获取。</li><li>我们在自定义View的时候，可以使用系统已经定义的属性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 自定义View </category>
          
          <category> 自定义View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 自定义View </tag>
            
            <tag> 天气 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义View的流程</title>
      <link href="/post/fb0c2c25/"/>
      <url>/post/fb0c2c25/</url>
      
        <content type="html"><![CDATA[<p>自定义View是一个老生常谈的问题，对于一个Android开发者来说是必须掌握的知识点，也是Android开发进阶的必经之路。</p><p><strong>文章很长，主要从两方面说起：</strong></p><blockquote><p>1，安卓View的绘制流程（比较简单，想要深入的可以去看源码）</p><p>2，安卓自定义View的绘制步骤</p></blockquote><p>要想安卓理解自定义View的流程，首先我们要了解View的绘制流程。分析之前，我们先来看底下面这张图：</p><h2 id="View的绘制流程"><a href="#View的绘制流程" class="headerlink" title="View的绘制流程"></a>View的绘制流程</h2><p><img src="https://s2.loli.net/2023/12/23/NJgALn3e2IDs7p8.webp" alt="绘制流程图"></p><p><code>DecorView</code>是一个应用窗口的根容器，它本质上是一个<code>FrameLayout</code>。<code>DecorView</code>有唯一一个子View，它是一个垂直<code>LinearLayout</code>，包含两个子元素，一个是<code>TitleView</code>（<code>ActionBar</code>的容器），另一个是<code>ContentView</code>（窗口内容的容器）。关于<code>ContentView</code>，它是一个<code>FrameLayout（android.R.id.content)</code>，我们平常用的<code>setContentView</code>就是设置它的子View。上图还表达了每个Activity都与一个Window（具体来说是<code>PhoneWindow</code>）相关联，用户界面则由Window所承载。</p><h2 id="ViewRoot"><a href="#ViewRoot" class="headerlink" title="ViewRoot"></a>ViewRoot</h2><p>在介绍View的绘制前，首先我们需要知道是谁负责执行View绘制的整个流程。实际上，View的绘制是由<code>ViewRoot</code>来负责的。每个应用程序窗口的<code>decorView</code>都有一个与之关联的<code>ViewRoot</code>对象，这种关联关系是由<code>WindowManager</code>来维护的。</p><p>那么decorView与ViewRoot的关联关系是在什么时候建立的呢？答案是Activity启动时，<code>ActivityThread.handleResumeActivity()</code>方法中建立了它们两者的关联关系。这里我们不具体分析它们建立关联的时机与方式，感兴趣的同学可以参考相关源码。下面我们直入主题，分析一下ViewRoot是如何完成View的绘制的。</p><h2 id="View绘制的起点"><a href="#View绘制的起点" class="headerlink" title="View绘制的起点"></a>View绘制的起点</h2><p>当建立好了decorView与ViewRoot的关联后，ViewRoot类的<code>requestLayout()</code>方法会被调用，以完成应用程序用户界面的初次布局。实际被调用的是ViewRootImpl类的<code>requestLayout()</code>方法，这个方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestLayout</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!mHandlingLayoutInLayoutRequest) &#123;</span><br><span class="line">    <span class="comment">// 检查发起布局请求的线程是否为主线程 </span></span><br><span class="line">    checkThread();</span><br><span class="line">    mLayoutRequested = <span class="literal">true</span>;</span><br><span class="line">    scheduleTraversals();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方法中调用了<code>scheduleTraversals()</code>方法来调度一次完成的绘制流程，该方法会向主线程发送一个“遍历”消息，最终会导致ViewRootImpl的<code>performTraversals()</code>方法被调用。下面，我们以<code>performTraversals()</code>为起点，来分析View的整个绘制流程。</p><h2 id="三个阶段"><a href="#三个阶段" class="headerlink" title="三个阶段"></a>三个阶段</h2><p>View的整个绘制流程可以分为以下三个阶段：</p><ul><li><code>measure</code>: 判断是否需要重新计算View的大小，需要的话则计算；</li><li><code>layout</code>: 判断是否需要重新计算View的位置，需要的话则计算；</li><li><code>draw</code>: 判断是否需要重新绘制View，需要的话则重绘制。</li></ul><p>这三个子阶段可以用下图来描述：</p><p><img src="https://s2.loli.net/2023/12/23/LjeZRw3DlMuNETr.png" alt="img"></p><h3 id="measure阶段"><a href="#measure阶段" class="headerlink" title="measure阶段"></a>measure阶段</h3><p>此阶段的目的是计算出控件树中的各个控件要显示其内容的话，需要多大尺寸。起点是ViewRootImpl的<code>measureHierarchy()</code>方法，这个方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">measureHierarchy</span><span class="params">(<span class="keyword">final</span> View host, <span class="keyword">final</span> WindowManager.LayoutParams lp, <span class="keyword">final</span> Resources res,</span></span><br><span class="line"><span class="params">    <span class="keyword">final</span> <span class="type">int</span> desiredWindowWidth, <span class="keyword">final</span> <span class="type">int</span> desiredWindowHeight)</span> &#123;</span><br><span class="line">  <span class="comment">// 传入的desiredWindowXxx为窗口尺寸</span></span><br><span class="line">  <span class="type">int</span> childWidthMeasureSpec;</span><br><span class="line">  <span class="type">int</span> childHeightMeasureSpec;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">windowSizeMayChange</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  . . .</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">goodMeasure</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!goodMeasure) &#123;</span><br><span class="line">    childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth, lp.width);</span><br><span class="line">    childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height);</span><br><span class="line">    performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (mWidth != host.getMeasuredWidth() || mHeight != host.getMeasuredHeight()) &#123;</span><br><span class="line">      windowSizeMayChange = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> windowSizeMayChange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中调用<code>getRootMeasureSpec()</code>方法来获取根<code>MeasureSpec</code>，这个根<code>MeasureSpec</code>代表了对decorView的宽高的约束信息。具体的内部方法可以直接再AS进行查看，不再赘述。</p><h3 id="layout阶段"><a href="#layout阶段" class="headerlink" title="layout阶段"></a>layout阶段</h3><p><code>layout</code>阶段的基本思想也是由根View开始，递归地完成整个控件树的布局（<code>layout</code>）工作。</p><h4 id="View-layout"><a href="#View-layout" class="headerlink" title="View.layout()"></a>View.layout()</h4><p>我们把对decorView的<code>layout()</code>方法的调用作为布局整个控件树的起点，实际上调用的是View类的<code>layout()</code>方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">layout</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> t, <span class="type">int</span> r, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="comment">// l为本View左边缘与父View左边缘的距离</span></span><br><span class="line">    <span class="comment">// t为本View上边缘与父View上边缘的距离</span></span><br><span class="line">    <span class="comment">// r为本View右边缘与父View左边缘的距离</span></span><br><span class="line">    <span class="comment">// b为本View下边缘与父View上边缘的距离</span></span><br><span class="line">    . . .</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> isLayoutModeOptical(mParent) ?            setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class="line">        onLayout(changed, l, t, r, b);</span><br><span class="line">        . . .</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    . . .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法会调用<code>setFrame()</code>方法来设置View的<code>mLeft</code>、<code>mTop</code>、<code>mRight</code>和<code>mBottom</code>四个参数，这四个参数描述了View相对其父View的位置（分别赋值为l, t, r, b），在<code>setFrame()</code>方法中会判断View的位置是否发生了改变，若发生了改变，则需要对子View进行重新布局，对子View的局部是通过<code>onLayout()</code>方法实现了。由于普通View（ 非ViewGroup）不含子View，所以View类的<code>onLayout()</code>方法为空。可以通过源码查看ViewGroup类的onLayout()方法的实现，不再赘述。</p><h3 id="draw阶段"><a href="#draw阶段" class="headerlink" title="draw阶段"></a>draw阶段</h3><p>对于本阶段的分析，我们以<code>decorView.draw()</code>作为分析的起点，也就是<code>View.draw()</code>方法，它的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">  . . .</span><br><span class="line">  <span class="comment">// 绘制背景，只有dirtyOpaque为false时才进行绘制，下同</span></span><br><span class="line">  <span class="type">int</span> saveCount;</span><br><span class="line">  <span class="keyword">if</span> (!dirtyOpaque) &#123;</span><br><span class="line">    drawBackground(canvas);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  . . .</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 绘制自身内容</span></span><br><span class="line">  <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 绘制子View</span></span><br><span class="line">  dispatchDraw(canvas);</span><br><span class="line"> </span><br><span class="line">   . . .</span><br><span class="line">  <span class="comment">// 绘制滚动条等</span></span><br><span class="line">  onDrawForeground(canvas);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单起见，在上面的代码中我们省略了实现滑动时渐变边框效果相关的逻辑。实际上，View类的<code>onDraw()</code>方法为空，因为每个View绘制自身的方式都不尽相同，对于decorView来说，由于它是容器View，所以它本身并没有什么要绘制的。<code>dispatchDraw()</code>方法用于绘制子View，显然普通View（非ViewGroup）并不能包含子View，所以View类中这个方法的实现为空。</p><p>ViewGroup类的<code>dispatchDraw()</code>方法中会依次调用<code>drawChild()</code>方法来绘制子View，<code>drawChild()</code>方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">drawChild</span><span class="params">(Canvas canvas, View child, <span class="type">long</span> drawingTime)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> child.draw(canvas, <span class="built_in">this</span>, drawingTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法调用了<code>View.draw(Canvas, ViewGroup，long)</code>方法来对子View进行绘制。在<code>draw(Canvas, ViewGroup, long)</code>方法中，首先对canvas进行了一系列变换，以变换到将要被绘制的View的坐标系下。完成对canvas的变换后，便会调用<code>View.draw(Canvas)</code>方法进行实际的绘制工作，此时传入的canvas为经过变换的，在将被绘制View的坐标系下的canvas。</p><p>进入到<code>View.draw(Canvas)</code>方法后，会向之前介绍的一样，执行以下几步：</p><ul><li>绘制背景;</li><li>通过<code>onDraw()</code>绘制自身内容;</li><li>通过<code>dispatchDraw()</code>绘制子View;</li><li>绘制滚动条</li></ul><p>至此，整个View的绘制流程我们就分析完了。</p><p>现在在看下View的生命周期图，会很清晰明了，如下:</p><p><img src="https://s2.loli.net/2024/01/10/wucNKOvajAG63bl.png" alt="View的生命周期"></p><h2 id="Android自定义View-ViewGroup的步骤大致如下："><a href="#Android自定义View-ViewGroup的步骤大致如下：" class="headerlink" title="Android自定义View &#x2F; ViewGroup的步骤大致如下："></a>Android自定义View &#x2F; ViewGroup的步骤大致如下：</h2><blockquote><ol><li>自定义属性；</li><li>选择和设置构造方法；</li><li>重写<code>onMeasure()</code>方法；</li><li>重写<code>onDraw()</code>方法；</li><li>重写<code>onLayout()</code>方法；</li><li>重写其他事件的方法(滑动监听等)；</li></ol></blockquote><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>　　Android自定义属性主要有定义、使用和获取三个步骤。</p><h4 id="定义自定义属性"><a href="#定义自定义属性" class="headerlink" title="定义自定义属性"></a>定义自定义属性</h4><p>　　参考：<a href="/post/2897c959/">深入理解Android中的自定义属性</a></p><p>　　我们通常将自定义属性定义在<code>/values/attr.xml</code>文件中（<code>attr.xml</code>文件需要自己创建）</p><p>　　先来看一段示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;rightPadding&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;CustomView&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;rightPadding&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，我们先是定义了一个属性<code>rightPadding</code>，然后又在<code>CustomView</code>中引用了这个属性。下面说明一下：</p><ul><li>首先，我们可以在<code>declare-stylable</code>标签中直接定义属性而不需要引用外部定义好的属性，但是为了属性的重用，我们可以选择上面的这种方法：先定义，后引用；</li><li><code>declare-stylable</code>标签只是为了给自定义属性分类。一个项目中可能又多个自定义控件，但只能又一个attr.xml文件，因此我们需要对不同自定义控件中的自定义属性进行分类，这也是为什么<code>declare-stylable</code>标签中的name属性往往定义成自定义控件的名称；</li><li>所谓的在<code>declare-stylable</code>标签中的引用，就是去掉了外部定义的<code>format</code>属性，如果没有去掉<code>format</code>，则会报错；如果外部定义中没有<code>format</code>而在内部引用中又<code>format</code>，也一样会报错。</li></ul><p>　　<strong>常用的format类型：</strong></p><blockquote><ol><li><code>string</code>：字符串类型；</li><li><code>integer</code>：整数类型；</li><li><code>float</code>：浮点型；</li><li><code>dimension</code>：尺寸，后面必须跟dp、dip、px、sp等单位；</li><li><code>boolean</code>：布尔值；</li><li><code>referenc</code>：引用类型，传入的是某一资源的ID，必须以“@”符号开头；</li><li><code>color</code>：颜色，必须是“#”符号开头；</li><li><code>fraction</code>：百分比，必须是“%”符号结尾；</li><li><code>enum</code>：枚举类型</li></ol></blockquote><p>下面对<code>format</code>类型说明几点：</p><ul><li><p><code>format</code>中可以写多种类型，中间使用“|”符号分割开，表示这几种类型都可以传入这个属性；</p></li><li><p><code>enum</code>类型的定义示例如下代码所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;orientation&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">&quot;horizontal&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;CustomView&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;orientation&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　使用时通过<code>getInt()</code>方法获取到value并判断，根据不同value进行不同的操作即可。</p></li></ul><h3 id="使用自定义属性"><a href="#使用自定义属性" class="headerlink" title="使用自定义属性"></a>使用自定义属性</h3><p>　　在XML布局文件中使用自定义的属性时，我们需要先定义一个<code>namespace</code>。Android中默认的<code>namespace</code>是<code>android</code>，因此我们通常可以使用<code>&quot;android:xxx&quot;</code>的格式去设置一个控件的某个属性，<code>android</code>这个<code>namespace</code>的定义是在XML文件的头标签中定义的，通常是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br></pre></td></tr></table></figure><p>　　我们自定义的属性不在这个命名空间下，因此我们需要添加一个命名空间。</p><p>　　自定义属性的命名空间如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br></pre></td></tr></table></figure><p>　　可以看出来，除了将命名空间的名称从android改成app之外，就是将最后的<code>&quot;res/android&quot;</code>改成了<code>&quot;res-auto&quot;</code>。</p><p>　　<strong>注意：</strong>自定义<code>namespace</code>的名称可以自己定义，不一定非得是app。</p><h3 id="获取自定义属性"><a href="#获取自定义属性" class="headerlink" title="获取自定义属性"></a>获取自定义属性</h3><p>在自定义View &#x2F; ViewGroup中，我们可以通过<code>TypedArray</code>获取到自定义的属性。示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(context: Context, attrs: AttributeSet?, defStyleAttr: <span class="built_in">Int</span>) : <span class="keyword">super</span>(context, attrs, defStyleAttr) &#123;</span><br><span class="line">    <span class="keyword">val</span> typedArray = context.obtainStyledAttributes(attrs, R.styleable.CustomView)</span><br><span class="line">    mOrientation = typedArray.getInteger(R.styleable.CustomView_orientation, <span class="number">0</span>)</span><br><span class="line">    mRightPadding = typedArray.getDimension(R.styleable.CustomView_rightPadding, <span class="number">0f</span>)</span><br><span class="line">    <span class="comment">// 注意回收</span></span><br><span class="line">    typedArray.recycle()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取自定义属性的代码通常是在三个参数的构造方法中编写的（具体为什么是三个参数的构造方法，下面的章节中会有解释）；</li><li>在获取<code>TypedArray</code>对象时就为其绑定了该自定义View的自定义属性集（CustomView），通过<code>typedArray.get()</code>方法获取到自定义属性的值并进行相应的操作；</li><li>在TypedArray使用结束后，需要调用<code>recycle()</code>方法回收它。</li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>　　当我们定义一个新的类继承了View或ViewGroup时，系统都会提示我们重写它的构造方法。View &#x2F; ViewGroup中又四个构造方法可以重写，它们分别有一、二、三、四个参数。四个参数的构造方法我们通常用不到，因此这个章节中我们主要介绍一个参数、两个参数和三个参数的构造方法（这里以<code>CustomView</code>控件为例）。</p><h4 id="一个参数的构造方法"><a href="#一个参数的构造方法" class="headerlink" title="一个参数的构造方法"></a>一个参数的构造方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(context: Context) : <span class="keyword">super</span>(context)</span><br></pre></td></tr></table></figure><p>　　这个构造方法只有一个参数Context上下文。当我们在Java&#x2F;Kotlin代码中直接创建这个控件时，就会调用这个方法。</p><h4 id="两个参数的构造方法"><a href="#两个参数的构造方法" class="headerlink" title="两个参数的构造方法"></a>两个参数的构造方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(context: Context, attrs: AttributeSet?) : <span class="keyword">super</span>(context, attrs)</span><br></pre></td></tr></table></figure><p>　　这个构造方法有两个参数：<code>Context</code>上下文和<code>AttributeSet</code>属性集。当我们需要在自定义控件中获取属性时，就默认调用这个构造方法。<code>AttributeSet</code>对象就是这个控件中定义的所有属性。</p><p>　　我们可以通过<code>AttributeSet</code>对象的<code>getAttributeCount()</code>方法获取属性的个数，通过<code>getAttributeName()</code>方法获取到某条属性的名称，通过<code>getAttributeValue()</code>方法获取到某条属性的值。</p><p>　　<strong>注意：</strong>不管有没有使用自定义属性，都会默认调用这个构造方法，“使用了自定义属性就会默认调用三个参数的构造方法”的说法是错误的。</p><h4 id="三个参数的构造方法"><a href="#三个参数的构造方法" class="headerlink" title="三个参数的构造方法"></a>三个参数的构造方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(context: Context, attrs: AttributeSet?, defStyleAttr: <span class="built_in">Int</span>) : <span class="keyword">super</span>(context, attrs, defStyleAttr)</span><br></pre></td></tr></table></figure><p>　　这个构造方法中有三个参数：<code>Context</code>上下文、<code>AttributeSet</code>属性集和<code>defStyleAttr</code>自定义属性的引用。这个构造方法不会默认调用，必须要手动调用，这个构造方法和两个参数的构造方法的唯一区别就是这个构造方法给我们默认传入了一个默认属性集。</p><p>　　<code>defStyleAttr</code>指向的是自定义属性的标签中定义的自定义属性集，我们在创建<code>TypedArray</code>对象时需要用到<code>defStyleAttr</code>。</p><h4 id="三个构造方法的整合"><a href="#三个构造方法的整合" class="headerlink" title="三个构造方法的整合"></a>三个构造方法的整合</h4><p>　　一般情况下，我们会将这三个构造方法串联起来，即层层调用，让最终的业务处理都集中在三个参数的构造方法。我们让一参的构造方法引用两参的构造方法，两参的构造方法引用三参的构造方法。示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomView</span> : <span class="type">View</span> &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(context: Context) : <span class="keyword">this</span>(context, <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(context: Context, attrs: AttributeSet?) : <span class="keyword">this</span>(context, attrs, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(context: Context, attrs: AttributeSet?, defStyleAttr: <span class="built_in">Int</span>) : <span class="keyword">super</span>(context, attrs, defStyleAttr) &#123;</span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这样一来，就可以保证无论使用什么方式创建这个控件，最终都会到三个参数的构造方法中处理，减少了重复代码。</p><h3 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure()"></a>onMeasure()</h3><p>　　<code>onMeasure()</code>方法中主要负责测量，决定控件本身或其子控件所占的宽高。我们可以通过<code>onMeasure()</code>方法提供的参数<code>widthMeasureSpec</code>和<code>heightMeasureSpec</code>来分别获取控件宽度和高度的<strong>测量模式</strong>和<strong>测量值</strong>（测量 &#x3D; 测量模式 + 测量值）。</p><p>　　<code>widthMeasureSpec</code>和<code>heightMeasureSpec</code>虽然只是int类型的值，但它们是通过<code>MeasureSpec</code>类进行了编码处理的，其中封装了测量模式和测量值，因此我们可以分别通过<code>MeasureSpec.getMode(xMeasureSpec)</code>和<code>MeasureSpec. getSize(xMeasureSpec)</code>来获取到控件或其子View的测量模式和测量值。</p><p>　　<strong>测量模式分为以下三种情况：</strong></p><table><thead><tr><th align="center">测量模式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>EXACTLY</code></td><td align="center">当宽高值设置为具体值时使用，如100DIP、match_parent等，此时取出的size是精确的尺寸</td></tr><tr><td align="center"><code>AT_MOST</code></td><td align="center">当宽高值设置为wrap_content时使用，此时取出的size是控件最大可获得的空间</td></tr><tr><td align="center"><code>UNSPECIFIED</code></td><td align="center">当没有指定宽高值时使用（很少见）</td></tr></tbody></table><p>　　<strong>onMeasure()方法中常用的方法：</strong></p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>getChildCount()</code></td><td align="center">获取子View的数量</td></tr><tr><td align="center"><code>getChildAt(i)</code></td><td align="center">获取第i个子控件</td></tr><tr><td align="center"><code>subView.getLayoutParams().width/height</code></td><td align="center">设置或获取子控件的宽或高</td></tr><tr><td align="center"><code>measureChild(child, widthMeasureSpec, heightMeasureSpec)</code></td><td align="center">测量子View的宽高</td></tr><tr><td align="center"><code>child.getMeasuredHeight/width()</code></td><td align="center">执行完<code>measureChild()</code>方法后就可以通过这种方式获取子View的宽高值</td></tr><tr><td align="center"><code>getPaddingLeft/Right/Top/Bottom()</code></td><td align="center">获取控件的四周内边距</td></tr><tr><td align="center"><code>setMeasuredDimension(width, height)</code></td><td align="center">重新设置控件的宽高。如果写了这句代码，就需要删除<code>super.onMeasure(widthMeasureSpec, heightMeasureSpec)</code>这行代码</td></tr></tbody></table><p><strong>注意：</strong><code>onMeasure()</code>方法可能被调用多次，这是因为控件中的内容或子<code>View</code>可能对分配给自己的空间“不满意”，因此向父空间申请重新分配空间。</p><h3 id="onDraw"><a href="#onDraw" class="headerlink" title="onDraw()"></a>onDraw()</h3><p>　　<code>onDraw()</code>方法负责绘制，即如果我们希望得到的效果在Android原生控件中没有现成的支持，那么我们就需要自己绘制我们的自定义控件的显示效果。</p><p>　　要学习<code>onDraw()</code>方法，我们就需要学习在<code>onDraw()</code>方法中使用最多的两个类：<code>Paint</code>和<code>Canvas</code>。</p><p>　　<strong>注意：</strong>每次触摸了自定义View&#x2F;ViewGroup时都会触发<code>onDraw()</code>方法。</p><h3 id="Paint类"><a href="#Paint类" class="headerlink" title="Paint类"></a>Paint类</h3><p>　　<code>Paint</code>画笔对象，这个类中包含了如何绘制几何图形、文字和位图的样式和颜色信息，指定了如何绘制文本和图形。画笔对象右很多设置方法，大体上可以分为两类：一类与图形绘制有关，一类与文本绘制有关。</p><p>　　<strong>Paint类中有如下方法：</strong></p><p>　　1、图形绘制：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>setArgb(int a, int r, int g, int b)</code></td><td align="center">设置绘制的颜色，a表示透明度，r、g、b表示颜色值</td></tr><tr><td align="center"><code>setAlpha(int a)</code></td><td align="center">设置绘制的图形的透明度</td></tr><tr><td align="center"><code>setColor(int color)</code></td><td align="center">设置绘制的颜色</td></tr><tr><td align="center"><code>setAntiAlias(boolean a)</code></td><td align="center">设置是否使用抗锯齿功能，抗锯齿功能会消耗较大资源，绘制图形的速度会减慢</td></tr><tr><td align="center"><code>setDither(boolean b)</code></td><td align="center">设置是否使用图像抖动处理，会使图像颜色更加平滑饱满，更加清晰</td></tr><tr><td align="center"><code>setFileterBitmap(Boolean b)</code></td><td align="center">设置是否在动画中滤掉Bitmap的优化，可以加快显示速度</td></tr><tr><td align="center"><code>setMaskFilter(MaskFilter mf)</code></td><td align="center">设置MaskFilter来实现滤镜的效果</td></tr><tr><td align="center"><code>setColorFilter(ColorFilter cf)</code></td><td align="center">设置颜色过滤器，可以在绘制颜色时实现不同颜色的变换效果</td></tr><tr><td align="center"><code>setPathEffect(PathEffect pe)</code></td><td align="center">设置绘制的路径的效果</td></tr><tr><td align="center"><code>setShader(Shader s)</code></td><td align="center">设置Shader绘制各种渐变效果</td></tr><tr><td align="center"><code>setShadowLayer(float r, int x, int y, int c)</code></td><td align="center">在图形下面设置阴影层，r为阴影角度，x和y为阴影在x轴和y轴上的距离，c为阴影的颜色</td></tr><tr><td align="center"><code>setStyle(Paint.Style s)</code></td><td align="center">设置画笔的样式：<code>FILL</code>实心&#x2F;填充；<code>STROKE</code>空心&#x2F;描边；<code>FILL_OR_STROKE</code>同时填充与描边</td></tr><tr><td align="center">setStrokeCap(Paint.Cap c)</td><td align="center">当设置画笔<code>Style</code>为<code>STROKE</code>或<code>FILL_OR_STROKE</code>时，设置笔刷的图形样式：<code>ROUND</code> 圆头，<code>BUTT</code> 平头，<code>SQUARE</code> 方头</td></tr><tr><td align="center"><code>setStrokeJoin(Paint.Join j)</code></td><td align="center">设置绘制时各图形的结合方式:<code>MITER</code> 尖角、 <code>BEVEL</code> 平角和 <code>ROUND</code> 圆角</td></tr><tr><td align="center"><code>setStrokeWidth(float w)</code></td><td align="center">当画笔<code>Style</code>为<code>STROKE</code>或<code>FILL_OR_STROKE</code>时，设置笔刷的粗细度</td></tr><tr><td align="center"><code>setXfermode(Xfermode m)</code></td><td align="center">设置图形重叠时的处理方式</td></tr></tbody></table><p>　　2、文本绘制：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>setTextAlign(Path.Align a)</code></td><td align="center">设置绘制的文本的对齐方式：<code>LEFT</code> <code>CETNER</code> 和 <code>RIGHT</code></td></tr><tr><td align="center"><code>setTextScaleX(float s)</code></td><td align="center">设置文本在X轴的缩放比例，可以实现文字的拉伸效果</td></tr><tr><td align="center"><code>setTextSize(float s)</code></td><td align="center">设置字号</td></tr><tr><td align="center"><code>setTextSkewX(float s)</code></td><td align="center">设置斜体文字，s是文字倾斜度</td></tr><tr><td align="center"><code>setTypeFace(TypeFace tf)</code></td><td align="center">设置字体风格，包括粗体、斜体、自定义字体等</td></tr><tr><td align="center"><code>setUnderlineText(boolean b)</code></td><td align="center">设置绘制的文本是否带有下划线效果</td></tr><tr><td align="center"><code>setStrikeThruText(boolean b)</code></td><td align="center">设置绘制的文本是否带有删除线效果</td></tr><tr><td align="center"><code>setFakeBoldText(boolean b)</code></td><td align="center">模拟实现粗体文字，如果设置在小字体上效果会非常差</td></tr><tr><td align="center"><code>setSubpixelText(boolean b)</code></td><td align="center">如果设置为true则有助于文本在LCD屏幕上显示效果</td></tr></tbody></table><p>　　3、其他方法：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>getTextBounds(String t, int s, int e, Rect b)</code></td><td align="center">将页面中t文本从s下标开始到e下标结束的所有字符所占的区域宽高封装到b这个矩形中</td></tr><tr><td align="center"><code>clearShadowLayer()</code></td><td align="center">清除阴影层</td></tr><tr><td align="center"><code>measureText(String t, int s, int e)</code></td><td align="center">返回t文本中从s下标开始到e下标结束的所有字符所占的宽度</td></tr><tr><td align="center"><code>reset()</code></td><td align="center">重置画笔为默认值</td></tr></tbody></table><p>　　<strong>这里需要就几个方法解释一下：</strong></p><p>1、<code>setPathEffect(PathEffect pe)</code>：设置绘制的路径的效果：</p><p>　　常见的有以下几种可选方案：</p><table><thead><tr><th align="center">类</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>CornerPathEffect</code></td><td align="center">可以用圆角来代替尖锐的角</td></tr><tr><td align="center"><code>DathPathEffect</code></td><td align="center">虚线，由短线和点组成</td></tr><tr><td align="center"><code>DiscretePathEffect</code></td><td align="center">把线条进行随机的偏离，让轮廓变得乱七八糟</td></tr><tr><td align="center"><code>PathDashPathEffect</code></td><td align="center">定义一种新的形状并将其作为原始路径的轮廓标记</td></tr><tr><td align="center"><code>SumPathEffect</code></td><td align="center">在一条路径中顺序添加参数中的效果</td></tr><tr><td align="center"><code>ComposePathEffect</code></td><td align="center">将两种效果组合起来，先使用第一种效果，在此基础上应用第二种效果</td></tr></tbody></table><p>2、<code>setXfermode(Xfermode m)</code>：设置图形重叠时的处理方式：</p><p>关于<code>Xfermode</code>的多种效果，可以参考下面三张图：</p><p><img src="https://s2.loli.net/2023/12/23/OUMk69DnbFzxNdy.jpg"></p><p><img src="https://s2.loli.net/2023/12/23/JcnetBqVlU8PpiW.jpg"></p><p><img src="https://s2.loli.net/2023/12/23/3gQcleXTxWuatiq.jpg"></p><p>在使用的时候，我们需要通过<code>paint. setXfermode(new PorterDuffXfermode(PorterDuff.Mode.XXX))</code>来设置，XXX是上图中的某种模式对应的常量参数，如<code>DST_OUT</code>。</p><h4 id="Canvas类"><a href="#Canvas类" class="headerlink" title="Canvas类"></a>Canvas类</h4><p>　　<code>Canvas</code>即画布，其上可以使用Paint画笔对象绘制很多东西。</p><p>　　<strong>Canvas对象中可以绘制：</strong></p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>drawArc()</code></td><td align="center">绘制圆弧</td></tr><tr><td align="center"><code>drawBitmap()</code></td><td align="center">绘制Bitmap图像</td></tr><tr><td align="center"><code>drawCircle()</code></td><td align="center">绘制圆圈</td></tr><tr><td align="center"><code>drawLine()</code></td><td align="center">绘制线条</td></tr><tr><td align="center"><code>drawOval()</code></td><td align="center">绘制椭圆</td></tr><tr><td align="center"><code>drawPath()</code></td><td align="center">绘制Path路径</td></tr><tr><td align="center"><code>drawPicture()</code></td><td align="center">绘制Picture图片</td></tr><tr><td align="center"><code>drawRect()</code></td><td align="center">绘制矩形</td></tr><tr><td align="center"><code>drawRoundRect()</code></td><td align="center">绘制圆角矩形</td></tr><tr><td align="center"><code>drawText()</code></td><td align="center">绘制文本</td></tr><tr><td align="center"><code>drawVertices()</code></td><td align="center">绘制顶点</td></tr></tbody></table><p>　　<strong>Canvas对象的其他方法：</strong></p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>canvas.save()</code></td><td align="center">把当前绘制的图像保存起来，让后续的操作相当于是在一个新图层上绘制</td></tr><tr><td align="center"><code>canvas.restore()</code></td><td align="center">把当前画布调整到上一个save()之前的状态</td></tr><tr><td align="center"><code>canvas.translate(dx, dy)</code></td><td align="center">把当前画布的原点移到(dx, dy)点，后续操作都以(dx, dy)点作为参照</td></tr><tr><td align="center"><code>canvas.scale(x, y)</code></td><td align="center">将当前画布在水平方向上缩放x倍，竖直方向上缩放y倍</td></tr><tr><td align="center"><code>canvas.rotate(angle)</code></td><td align="center">将当前画布顺时针旋转angle度</td></tr></tbody></table><h3 id="onLayout"><a href="#onLayout" class="headerlink" title="onLayout()"></a>onLayout()</h3><p>　　<code>onLayout()</code>方法负责布局，大多数情况是在自定义<code>ViewGroup</code>中才会重写，主要用来确定子<code>View</code>在这个布局空间中的摆放位置。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLayout</span><span class="params">(changed: <span class="type">Boolean</span>, l: <span class="type">Int</span>, t: <span class="type">Int</span>, r: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onLayout(changed, l, t, r, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　该方法有5个参数，其中<code>changed</code>表示这个控件是否有了新的尺寸或位置；l、t、r、b分别表示这个<code>View</code>相对于父布局的左&#x2F;上&#x2F;右&#x2F;下方的位置。</p><p>　　<strong>以下是onLayout()方法中常用的方法：</strong></p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>getChildCount()</code></td><td align="center">获取子View的数量</td></tr><tr><td align="center"><code>getChildAt(i)</code></td><td align="center">获取第i个子View</td></tr><tr><td align="center"><code>getWidth/Height()</code></td><td align="center">获取<code>onMeasure()</code>中返回的宽度和高度的测量值</td></tr><tr><td align="center"><code>child.getLayoutParams()</code></td><td align="center">获取到子View的LayoutParams对象</td></tr><tr><td align="center"><code>child.getMeasuredWidth/Height()</code></td><td align="center">获取<code>onMeasure()</code>方法中测量的子View的宽度和高度值</td></tr><tr><td align="center"><code>getPaddingLeft/Right/Top/Bottom()</code></td><td align="center">获取控件的四周内边距</td></tr><tr><td align="center"><code>child.layout(l, t, r, b)</code></td><td align="center">设置子View布局的上下左右边的坐标</td></tr></tbody></table><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><h4 id="generateLayoutParams"><a href="#generateLayoutParams" class="headerlink" title="generateLayoutParams()"></a>generateLayoutParams()</h4><p>　　<code>generateLayoutParams()</code>方法用在自定义<code>ViewGroup</code>中，用来指明子控件之间的关系，即与当前的ViewGroup对应的LayoutParams。我们只需要在方法中返回一个我们想要使用的LayoutParams类型的对象即可。</p><p>　　在<code>generateLayoutParams()</code>方法中需要传入一个<code>AttributeSet</code>对象作为参数，这个对象是这个ViewGroup的属性集，系统根据这个ViewGroup的属性集来定义子View的布局规则，供子View使用。</p><p>　　例如，在自定义流式布局中，我们只需要关心子控件之间的间隔关系，因此我们需要在<code>generateLayoutParams()</code>方法中返回一个<code>new MarginLayoutParams()</code>即可。</p><h4 id="onTouchEvent"><a href="#onTouchEvent" class="headerlink" title="onTouchEvent()"></a>onTouchEvent()</h4><p>　　<code>onTouchEvent()</code>方法用来监测用户手指操作。我们通过方法中<code>MotionEvent</code>参数对象的<code>getAction()</code>方法来实时获取用户的手势，有<code>UP</code>、<code>DOWN</code>和<code>MOVE</code>三个枚举值，分别表示用于手指抬起、按下和滑动的动作。每当用户有操作时，就会回调<code>onTouchEvent()</code>方法。</p><h4 id="onScrollChanged"><a href="#onScrollChanged" class="headerlink" title="onScrollChanged()"></a>onScrollChanged()</h4><p>　　如果我们的自定义View &#x2F; ViewGroup是继承自<code>ScrollView/ HorizontalScrollView</code>等可以滚动的控件，就可以通过重写<code>onScrollChanged()</code>方法来监听控件的滚动事件。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScrollChanged</span><span class="params">(l: <span class="type">Int</span>, t: <span class="type">Int</span>, oldl: <span class="type">Int</span>, oldt: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onScrollChanged(l, t, oldl, oldt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这个方法中有四个参数：<code>l</code>和<code>t</code>分别表示当前滑动到的点在水平和竖直方向上的坐标；<code>oldl</code>和<code>oldt</code>分别表示上次滑动到的点在水平和竖直方向上的坐标。我们可以通过这四个值对滑动进行处理，如添加属性动画等。</p><h4 id="invalidate"><a href="#invalidate" class="headerlink" title="invalidate()"></a>invalidate()</h4><p>　　<code>invalidate()</code>方法的作用是请求View树进行重绘，即<code>draw()</code>方法，如果视图的大小发生了变化，还会调用<code>layout()</code>方法。</p><p>　　<strong>一般会引起invalidate()操作的函数如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">直接调用invalidate()方法，请求重新draw()，但只会绘制调用者本身；</span><br><span class="line">调用setSelection()方法，请求重新draw()，但只会绘制调用者本身；</span><br><span class="line">调用setVisibility()方法，会间接调用invalidate()方法，继而绘制该View；</span><br><span class="line">调用setEnabled()方法，请求重新draw()，但不会重新绘制任何视图，包括调用者本身。</span><br></pre></td></tr></table></figure><h4 id="postInvalidate"><a href="#postInvalidate" class="headerlink" title="postInvalidate()"></a>postInvalidate()</h4><p>　　功能与<code>invalidate()</code>方法相同，只是<code>postInvalidate()</code>方法是异步请求重绘视图。</p><h4 id="requestLayout"><a href="#requestLayout" class="headerlink" title="requestLayout()"></a>requestLayout()</h4><p>　　<code>requestLayout()</code>方法只是对View树进行重新布局layout过程（包括<code>measure()</code>过程和<code>layout()</code>过程），不会调用<code>draw()</code>过程，即不会重新绘制任何视图，包括该调用者本身。</p><h4 id="requestFocus"><a href="#requestFocus" class="headerlink" title="requestFocus()"></a>requestFocus()</h4><p>　　请求View树的<code>draw()</code>过程，但只会绘制需要重绘的视图，即哪个View或ViewGroup调用了这个方法，就重绘哪个视图。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　让我们来总览一下自定义View &#x2F; ViewGroup时调用的各种函数的顺序，如下图所示：</p><p><img src="https://s2.loli.net/2023/12/23/fyiQN1og7ZGrKT8.png" alt="img"></p><p>　<strong>在这些方法中：</strong></p><ul><li><code>onMeasure()</code>会在初始化之后调用一到多次来测量控件或其中的子控件的宽高；</li><li><code>onLayout()</code>会在<code>onMeasure()</code>方法之后被调用一次，将控件或其子控件进行布局；</li><li><code>onDraw()</code>会在<code>onLayout()</code>方法之后调用一次，也会在用户手指触摸屏幕时被调用多次，来绘制控件。</li></ul><h2 id="View的生命周期"><a href="#View的生命周期" class="headerlink" title="View的生命周期"></a>View的生命周期</h2><p>​流程图:</p><p><img src="https://s2.loli.net/2024/01/12/QY4CBawXMo96huS.png" alt="image.png"></p><p>​tips:</p><p>​<code>onCreate#setContentView() start</code> 与 <code>onCreate#setContentView() end </code>指的是这样</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    Log.e(TAG, <span class="string">&quot;activity onCreate start&quot;</span>)</span><br><span class="line">    setContentView(R.layout.activity_main)</span><br><span class="line">    Log.e(TAG, <span class="string">&quot;activity onCreate end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>谈谈，个人在实际项目的自定义View过程</p><ol><li>实际开发中自定义View按实现方式大概可以分为三种:  自绘、组合、继承<ol><li>自绘：大部分是继承View，利用<code>onDraw</code>完成绘制，如：圆形进度条，仪表盘</li><li>组合：继承ViewGroup，简单场景直接使用xml已有布局，复杂场景<code>onMeasure</code>&#x2F;<code>onLayout</code>&#x2F;<code>onDraw</code>都可能用到，如：日历控件，播放控件等</li><li>继承：继承特定View，使用父控件的特性，并进行一定的扩展，如：自定义TextView(跑马灯)</li></ol></li><li>拿到需求，判断是否能通过拆分为 简单的View 实现、是否能够隔离事件分发等难题</li><li>最终达到的效果：<ol><li>尽量不重写</li><li>单个View不涉及多的点击事件，不涉及复杂的绘制工作</li><li>通过步骤2，筛选到只需要绘制简单的View样式</li></ol></li><li>系统的View执行流程为：构造方法 -&gt; <code>onMeasure</code> -&gt; <code>onLayout</code> -&gt; <code>onDraw</code></li><li>由于我们最终要的是效果，因此直接在onDraw中绘制想要的效果，再依次去调整构造方法、<code>onMeasure</code>、<code>onLayout</code>的数据</li></ol><p>文章参考：</p><p><a href="https://github.com/Moosphan/Android-Daily-Interview/issues/41">谈谈自定义View的流程</a></p><p><a href="https://juejin.cn/post/7088666018286469134">android View生命周期</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 自定义View </category>
          
          <category> 自定义View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 自定义View </tag>
            
            <tag> 天气 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android CameraX CameraController</title>
      <link href="/post/d8629189/"/>
      <url>/post/d8629189/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.android.com/training/camerax">CameraX</a> currently provides <code>CameraView</code>, a <code>View</code> that displays a preview of the camera, while also providing methods to take pictures, control the camera, and query camera information. <code>CameraView</code> clearly takes on more responsibilities than a <code>View</code> should, as it participates in the <code>View</code> hierarchy and displays content, while also owning camera resources that exist outside the scope and lifecycle of the <code>View</code> hierarchy.</p><p><code>CameraView</code> violates the separation of concerns principle, making it harder to guarantee its robustness in all corner cases. As a result, it will be marked as deprecated and removed before CameraX’s view artifact reaches Beta. It has been split up into two parts that you should use instead: <code>PreviewView</code> which handles its view-related tasks, and <code>CameraController</code> which handles the camera operations.</p><p><code>PreviewView</code> has been available in CameraX’s view artifact for a while. <code>CameraController</code>, however, was introduced recently in version alpha19. It’s a high-level, all-in-one API that provides a way to easily access and manipulate core camera features, including displaying a camera preview, taking a picture, and analyzing camera frames. It does so while matching the output of its use cases to the viewfinder’s preview, thus providing a “What You See Is What You Get” (WYSIWYG) experience, a highly requested feature by developers that makes CameraX’s usage very intuitive. It also takes care of initializing the camera and adapting its output to device rotation.</p><p>To offload the burden of starting, stopping, and closing the camera, CameraX also introduced <code>LifecycleCameraController</code>, which offers all the convenience of <code>CameraController</code> with the added benefit of binding the camera’s lifecycle to that of a <code>LifecycleOwner</code>, typically the lifecycle of a <code>Fragment</code> or <code>Activity</code>. This allows the lifecycle’s state to control when the camera is opened, stopped, and closed.</p><p>Using <code>PreviewView</code> with <code>CameraController</code> is fairly simple, and can be done as follows:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set up the CameraController</span></span><br><span class="line"><span class="keyword">val</span> cameraController = LifecycleCameraController(context)</span><br><span class="line">cameraController.bindToLifecycle(lifecycleOwner)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attach the CameraController to PreviewView</span></span><br><span class="line"><span class="keyword">val</span> previewView = findViewById(R.id.preview_view)</span><br><span class="line">previewView.setController(cameraController)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the CameraController</span></span><br><span class="line">cameraController.takePicture(…)</span><br></pre></td></tr></table></figure><p>The following sections list the mappings from <code>CameraView</code> to <code>CameraController</code>. You can use them to migrate from <code>CameraView</code> to <code>PreviewView</code> and <code>CameraController</code>.</p><h1 id="Camera-Initialization"><a href="#Camera-Initialization" class="headerlink" title="Camera Initialization"></a>Camera Initialization</h1><table><thead><tr><th align="left">CameraView</th><th align="left">CameraController</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">getInitializationFuture()</td></tr></tbody></table><p>Unlike <code>CameraView</code>, <code>CameraController</code> provides a <code>ListenableFuture</code> to monitor its initialization. It’s an asynchronous operation during which <code>CameraController</code> initializes CameraX and binds its use cases. The benefit of using this <code>ListenableFuture</code> is twofold:</p><ul><li>Once it successfully completes, you can allow your users to start interacting with the camera, for example by taking pictures and zooming in and out of the viewfinder.</li><li>In case it fails, you can gracefully handle the error and communicate it to your users.</li></ul><p>In case you aren’t familiar with <code>ListenableFuture</code>: it wraps an asynchronous operation and allows you to attach a listener that’s invoked on its completion. In case the operation has already finished, the future returns immediately.</p><h1 id="Camera-Lifecycle"><a href="#Camera-Lifecycle" class="headerlink" title="Camera Lifecycle"></a>Camera Lifecycle</h1><table><thead><tr><th align="left">CameraView</th><th align="left">LifecycleCameraController</th></tr></thead><tbody><tr><td align="left">bindToLifecycle(LifecycleOwner)</td><td align="left">bindToLifecycle(LifecycleOwner)</td></tr></tbody></table><p>Similar to <code>CameraView</code>, <code>LifecycleCameraController</code> ties control of the camera to a lifecycle. You must bind a valid <code>LifecycleOwner</code> to the controller for it to be operational.</p><p><code>LifecycleCameraController</code> provides an additional <code>unbind()</code> method which allows you to prematurely close the camera before the lifecycle that it’s bound to comes to an end. This is useful in cases in which the camera isn’t integral to a screen and isn’t needed for its entire lifecycle. Alternatively, you can define your custom <code>LifecycleOwner</code> to control when to close the camera, but <code>unbind()</code> can be more convenient in some cases.</p><h1 id="Camera-Control"><a href="#Camera-Control" class="headerlink" title="Camera Control"></a>Camera Control</h1><h2 id="Zoom"><a href="#Zoom" class="headerlink" title="- Zoom"></a><strong>- Zoom</strong></h2><table><thead><tr><th align="left">CameraView</th><th align="left">CameraController</th></tr></thead><tbody><tr><td align="left">isZoomSupported()</td><td align="left">-</td></tr><tr><td align="left">isPinchToZoomEnabled()</td><td align="left">isPinchToZoomEnabled()</td></tr><tr><td align="left">setPinchToZoomEnabled(Boolean)</td><td align="left">setPinchToZoomEnabled(Boolean)</td></tr><tr><td align="left">getZoomRatio()</td><td align="left">getZoomState().getZoomRatio()</td></tr><tr><td align="left">getMinZoomRatio()</td><td align="left">getZoomState().getMinZoomRatio()</td></tr><tr><td align="left">getMaxZoomRatio()</td><td align="left">getZoomState().getMaxZoomRatio()</td></tr><tr><td align="left">-</td><td align="left">getZoomState().getLinearZoom()</td></tr><tr><td align="left">setZoomRatio(float)</td><td align="left">setZoomRatio(float)</td></tr><tr><td align="left">-</td><td align="left">setLinearZoom(float)</td></tr></tbody></table><p><code>CameraController</code> allows you to observe the camera’s zoom state via a <code>LiveData</code> instance. This state becomes available once the camera is open, and holds both static information, like the maximum and minimum zoom ratios, and dynamic information, like the current zoom ratio. You can verify whether zoom is supported using the maximum zoom ratio as follows:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> isZoomSupported = getZoomState().getValue().getMaxZoomRatio() != <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>CameraController</code> additionally provides methods to get and set linear zoom, which can vary between 0 (minimum zoom) and 1 (maximum zoom).</p><p>Finally, like <code>CameraView</code>, <code>CameraController</code> allows you to enable or disable pinch-to-zoom. When enabled, <code>CameraController</code> handles pinch gestures on its attached <code>PreviewView</code> to zoom the camera in and out.</p><table><thead><tr><th align="left">CameraView</th><th align="left">CameraController</th></tr></thead><tbody><tr><td align="left">enableTorch(boolean)</td><td align="left">enableTorch(boolean)</td></tr><tr><td align="left">isTorchOn()</td><td align="left">getTorchState()</td></tr><tr><td align="left">getFlash()</td><td align="left">getImageCaptureFlashMode()</td></tr><tr><td align="left">setFlash(int)</td><td align="left">setImageCaptureFlashMode(int)</td></tr></tbody></table><p><code>CameraController</code> provides similar methods as <code>CameraView</code> to set and query the image capture’s flash mode, but unlike <code>CameraView</code>, it allows observing changes in the camera’s torch state via a <code>LiveData</code> instance, which emits <code>TorchState.OFF</code> and <code>TorchState.ON</code>.</p><h2 id="Focus-Metering"><a href="#Focus-Metering" class="headerlink" title="- Focus&#x2F;Metering"></a>- Focus&#x2F;Metering</h2><table><thead><tr><th align="left">CameraView</th><th align="left">CameraController</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">isTapToFocusEnabled()</td></tr><tr><td align="left">-</td><td align="left">setTapToFocusEnabled(boolean)</td></tr></tbody></table><p>While <code>CameraView</code> automatically acquires focus on any region of the viewfinder that is tapped, <code>CameraController</code> provides more flexibility by allowing you to enable or disable tap-to-focus functionality. When enabled, <code>CameraController</code> handles touch events on its attached <code>PreviewView</code> by focusing the camera on tapped regions.</p><h1 id="Camera-Selection"><a href="#Camera-Selection" class="headerlink" title="Camera Selection"></a>Camera Selection</h1><table><thead><tr><th align="left">CameraView</th><th align="left">LifecycleCameraController</th></tr></thead><tbody><tr><td align="left">hasCameraWithLensFacing(int)</td><td align="left">hasCamera(CameraSelector)</td></tr><tr><td align="left">setCameraLensFacing(Integer)</td><td align="left">setCameraSelector(CameraSelector)</td></tr><tr><td align="left">getCameraLensFacing()</td><td align="left">getCameraSelector()</td></tr><tr><td align="left">toggleCamera()</td><td align="left">-</td></tr></tbody></table><p><code>CameraController</code> provides you with more control over which camera to use by allowing you to specify a <code>CameraSelector</code> to select the camera it uses. This allows you to rotate between various cameras when toggling cameras, instead of only the default front and back cameras, which was a limitation of <code>CameraView.toggleCamera()</code>. You can still implement this fairly easily, though, using <code>CameraController</code> as follows.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">toggleCamera</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cameraController.cameraSelector == CameraSelector.DEFAULT_BACK_CAMERA </span><br><span class="line">        &amp;&amp; cameraController.hasCamera(CameraSelector.DEFAULT_FRONT_CAMERA) &#123;</span><br><span class="line">        cameraController.cameraSelector = CameraSelector.DEFAULT_FRONT_CAMERA</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cameraController.cameraSelector == CameraSelector.DEFAULT_FRONT_CAMERA </span><br><span class="line">               &amp;&amp; cameraController.hasCamera(CameraSelector.DEFAULT_BACK_CAMERA) &#123;</span><br><span class="line">        cameraController.cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Camera-Use-Cases"><a href="#Camera-Use-Cases" class="headerlink" title="Camera Use Cases"></a>Camera Use Cases</h1><table><thead><tr><th align="left">CameraView</th><th align="left">CameraController</th></tr></thead><tbody><tr><td align="left">getCaptureMode()</td><td align="left">isImageCaptureEnabled()</td></tr><tr><td align="left">-</td><td align="left">isImageAnalysisEnabled()</td></tr><tr><td align="left">setCaptureMode(CaptureMode)</td><td align="left">setEnabledUseCases(int)</td></tr></tbody></table><p><code>CameraController</code> supports all of CameraX’s <a href="https://developer.android.com/training/camerax/architecture#structure">use cases</a>: <code>Preview</code>, <code>ImageAnalysis</code>, and <code>ImageCapture</code>, thus making it a more robust camera solution compared to <code>CameraView</code>. It also matches the output of <code>ImageAnalysis</code> and <code>ImageCapture</code> to the preview’s display, thereby providing a WYSIWYG experience.</p><p><code>CameraController</code>’s default state enables preview, image analysis, and image capture. The <code>Preview</code> use case is <strong>always</strong> enabled, so you can choose the remaining use cases to enable or disable depending on your camera usage needs.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Enable image capture, equivalent to cameraView.setCaptureMode(IMAGE)</span></span><br><span class="line"><span class="comment">// CameraController&#x27;s enabled use cases: Preview + ImageCapture</span></span><br><span class="line">cameraController.setEnabledUseCases(IMAGE_CAPTURE)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enable image capture and image analysis</span></span><br><span class="line"><span class="comment">// CameraController&#x27;s enabled use cases: Preview + ImageCapture + ImageAnalysis</span></span><br><span class="line">cameraController.setEnabledUseCases(IMAGE_CAPTURE|IMAGE_ANALYSIS)</span><br></pre></td></tr></table></figure><h2 id="Preview"><a href="#Preview" class="headerlink" title="- Preview"></a>- Preview</h2><table><thead><tr><th align="left">CameraView</th><th align="left">CameraController</th></tr></thead><tbody><tr><td align="left">getPreviewStreamState()</td><td align="left">Call directly on associated PreviewView</td></tr><tr><td align="left">getScaleType()</td><td align="left">Call directly on associated PreviewView</td></tr><tr><td align="left">setScaleType(ScaleType)</td><td align="left">Call directly on associated PreviewView</td></tr></tbody></table><p>Unlike <code>CameraView</code> which wraps (and thus hides) a <code>PreviewView</code> instance and forwards method calls to it, <code>CameraController</code> is decoupled from <code>PreviewView</code>. This means you have more control over the viewfinder, and can access and manipulate it directly.</p><h2 id="ImageAnalysis"><a href="#ImageAnalysis" class="headerlink" title="- ImageAnalysis"></a>- ImageAnalysis</h2><table><thead><tr><th align="left">CameraView</th><th align="left">CameraController</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">setImageAnalysisAnalyzer(Executor, Analyzer)</td></tr><tr><td align="left">-</td><td align="left">clearImageAnalysisAnalyzer()</td></tr><tr><td align="left">-</td><td align="left">getImageAnalysisBackpressureStrategy()</td></tr><tr><td align="left">-</td><td align="left">setImageAnalysisBackpressureStrategy(int)</td></tr><tr><td align="left">-</td><td align="left">getImageAnalysisImageQueueDepth()</td></tr><tr><td align="left">-</td><td align="left">setImageAnalysisImageQueueDepth(int)</td></tr></tbody></table><p>Unlike <code>CameraView</code>, <code>CameraController</code> supports the <code>ImageAnalysis</code> use case. You can set and clear its <code>Analyzer</code>, while also configuring its image-processing pipeline.</p><h2 id="ImageCapture"><a href="#ImageCapture" class="headerlink" title="- ImageCapture"></a>- ImageCapture</h2><table><thead><tr><th align="left">CameraView</th><th align="left">CameraController</th></tr></thead><tbody><tr><td align="left">takePicture(Executor, OnImageCapturedCallback)</td><td align="left">takePicture(Executor, OnImageCapturedCallback)</td></tr><tr><td align="left">takePicture(OutputFileOptions, Executor, OnImageSavedCallback)</td><td align="left">takePicture(OutputFileOptions, Executor, OnImageSavedCallback)</td></tr></tbody></table><p><code>CameraController</code> provides the same methods as <code>CameraView</code> to take a picture, specify the image save destination, and provide the image capture callbacks.</p><p><em>One thing to note is that</em> <code>*CameraController*</code> <em>mirrors an image captured with a front-facing camera, unless you disable this in the</em> <code>*OutputFileOptions*</code><em>’s metadata by calling</em> <code>*Metadata.setReversedHorizontal(false)*</code>.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In summary:</p><ul><li>Because <code>CameraView</code> is handling the responsibilities of both a view and a controller in the MVC sense, CameraX is deprecating it and splitting it into <code>PreviewView</code> and the newly introduced <code>CameraController</code>.</li><li><code>CameraController</code> handles camera initialization, as well as the creation and configuration of its use cases.</li><li><code>CameraController</code> provides a WYSIWYG experience by matching the output of its use cases to <code>PreviewView</code>’s display.</li><li><code>CameraController</code> listens to the device’s motion sensor to correctly rotate the output of its use cases.</li><li><code>CameraController</code> adds support for the <code>ImageAnalysis</code> use case, making it a more robust camera solution that provides easy access to all of CameraX’s use cases.</li><li><code>CameraController</code> supports all of <code>CameraView</code>’s features and more, such as enabling and disabling tap-to-focus, getting and setting linear zoom, and observing dynamic camera information like the zoom and torch states.</li><li><code>LifecycleCameraController</code> is a <code>CameraController</code> that binds the camera’s lifecycle to that of a <code>LifecycleOwner</code>, typically the lifecycle of the UI.</li></ul><p>Want more CameraX goodness? Check out:</p><ul><li><a href="https://developer.android.com/training/camerax">Official CameraX documentation</a></li><li><a href="https://codelabs.developers.google.com/codelabs/camerax-getting-started">Guided CameraX introduction codelab</a></li><li><a href="https://groups.google.com/a/android.com/g/camerax-developers">CameraX developer community</a></li><li><a href="https://github.com/android/camera-samples/tree/master/CameraXBasic">CameraX official sample app</a></li></ul><p>转载至<a href="https://medium.com/androiddevelopers/camerax-learn-how-to-use-cameracontroller-e3ed10fffecf">medium.com</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> CameraX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> CameraX </tag>
            
            <tag> Jetpack </tag>
            
            <tag> 相机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HomeBrew 常用指令</title>
      <link href="/post/c054934f/"/>
      <url>/post/c054934f/</url>
      
        <content type="html"><![CDATA[<h3 id="信息查询"><a href="#信息查询" class="headerlink" title="信息查询"></a>信息查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 Homebrew 版本</span></span><br><span class="line">brew -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安装的软件</span></span><br><span class="line">brew list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器打开 Homebrew 官网</span></span><br><span class="line">brew home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看包的详细信息</span></span><br><span class="line">brew info 包名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测系统中与Homebrew有关的潜在问题</span></span><br><span class="line">brew doctor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看包的所有版本</span></span><br><span class="line">brew list --versions | grep 包名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装软件版本号</span></span><br><span class="line">brew list --versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以树形展示所有已安装包的依赖</span></span><br><span class="line">brew deps --installed --tree</span><br></pre></td></tr></table></figure><h3 id="查找软件包"><a href="#查找软件包" class="headerlink" title="查找软件包"></a>查找软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew search git</span><br><span class="line">brew search /^git$/</span><br></pre></td></tr></table></figure><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认安装最新版</span></span><br><span class="line">brew install 包名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">brew install node@14.16.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换版本</span></span><br><span class="line">brew switch node 16.0.0</span><br></pre></td></tr></table></figure><h3 id="卸载软件包"><a href="#卸载软件包" class="headerlink" title="卸载软件包"></a>卸载软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall 包名</span><br></pre></td></tr></table></figure><h3 id="自身更新"><a href="#自身更新" class="headerlink" title="自身更新"></a>自身更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看哪些包有新版本可更新</span></span><br><span class="line">brew outdated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新所有包</span></span><br><span class="line">brew upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新指定包</span></span><br><span class="line">brew upgrade 包名</span><br></pre></td></tr></table></figure><h3 id="清理旧的升级包"><a href="#清理旧的升级包" class="headerlink" title="清理旧的升级包"></a>清理旧的升级包</h3><p>⚠️ 注意：如果一个包当前有可更新的版本没有更新，执行清理时候只会提示一个警告，而不会执行清理操作。需要先升级到最新版本，值执行清理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看哪些包可清理</span></span><br><span class="line">brew cleanup -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理所有</span></span><br><span class="line">brew cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理指定包</span></span><br><span class="line">brew cleanup 包名</span><br></pre></td></tr></table></figure><h3 id="锁定不想更新的包"><a href="#锁定不想更新的包" class="headerlink" title="锁定不想更新的包"></a>锁定不想更新的包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 锁定</span></span><br><span class="line">brew pin 包名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解锁</span></span><br><span class="line">brew unpin 包名</span><br></pre></td></tr></table></figure><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取services列表</span></span><br><span class="line">brew services list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动/暂停/重启 服务</span></span><br><span class="line">brew services start/stop/restart serverName</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> Homebrew </category>
          
          <category> Homebrew </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android CameraX中使用Camera2</title>
      <link href="/post/627b7883/"/>
      <url>/post/627b7883/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CameraX 基于 Camera2 构建而成，并且 CameraX 提供了在 Camera2 实现中读取甚至写入属性的方式。如需了解完整详情，请参阅<a href="https://developer.android.google.cn/reference/androidx/camera/camera2/interop/package-summary?hl=zh-cn">互操作性软件包</a>。</p><p>那么该如何使用呢</p><p><strong>注意：</strong>在 CameraX 中，设置底层 Camera2 属性会被标记为“实验性”，因为 Google 希望开发者能了解其使用情况。您设置的值会替换 CameraX 所设置的任何值。我们建议您仅在绝对必要时执行此操作，也建议在您这一端进行其他测试。</p><h2 id="Camera2CameraInfo"><a href="#Camera2CameraInfo" class="headerlink" title="Camera2CameraInfo"></a><a href="https://developer.android.google.cn/reference/androidx/camera/camera2/interop/Camera2CameraInfo?hl=zh-cn"><code>Camera2CameraInfo</code></a></h2><p>使用 <a href="https://developer.android.google.cn/reference/androidx/camera/camera2/interop/Camera2CameraInfo?hl=zh-cn"><code>Camera2CameraInfo</code></a> 读取底层 <a href="https://developer.android.google.cn/reference/android/hardware/camera2/CameraCharacteristics?hl=zh-cn"><code>CameraCharacteristics</code></a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> c2ci = Camera2CameraInfo.from(cameraInfo)</span><br><span class="line">c2ci.apply &#123;</span><br><span class="line">    <span class="comment">// 获取设备支持的硬件级别</span></span><br><span class="line">    <span class="keyword">val</span> level = getCameraCharacteristic(CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL) ?: INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Camera2CameraControl"><a href="#Camera2CameraControl" class="headerlink" title="Camera2CameraControl"></a><a href="https://developer.android.google.cn/reference/androidx/camera/camera2/interop/Camera2CameraControl?hl=zh-cn"><code>Camera2CameraControl</code></a></h2><p>使用 <a href="https://developer.android.google.cn/reference/androidx/camera/camera2/interop/Camera2CameraControl?hl=zh-cn"><code>Camera2CameraControl</code></a>，它让您可以在底层 <a href="https://developer.android.google.cn/reference/android/hardware/camera2/CaptureRequest?hl=zh-cn"><code>CaptureRequest</code></a> 上设置属性，例如自动AWB模式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> c2cc = Camera2CameraControl.from(cameraControl)</span><br><span class="line">c2cc.captureRequestOptions = CaptureRequestOptions.Builder()</span><br><span class="line">    .setCaptureRequestOption(CaptureRequest.CONTROL_AWB_MODE, CaptureRequest.CONTROL_AWB_MODE_OFF)</span><br><span class="line">    .setCaptureRequestOption(CaptureRequest.COLOR_CORRECTION_MODE, CaptureRequest.COLOR_CORRECTION_MODE_TRANSFORM_MATRIX)</span><br><span class="line">    .setCaptureRequestOption(CaptureRequest.COLOR_CORRECTION_GAINS, ColorTemperatureConverter.colorTemperature(<span class="number">2000</span>))</span><br><span class="line">    .build()</span><br></pre></td></tr></table></figure><h2 id="Camera2Interop-Extender"><a href="#Camera2Interop-Extender" class="headerlink" title="Camera2Interop.Extender"></a><a href="https://developer.android.google.cn/reference/androidx/camera/camera2/interop/Camera2Interop.Extender?hl=zh-cn"><code>Camera2Interop.Extender</code></a></h2><p>使用 <a href="https://developer.android.google.cn/reference/androidx/camera/camera2/interop/Camera2Interop.Extender?hl=zh-cn"><code>Camera2Interop.Extender</code></a> 扩展 CameraX <a href="https://developer.android.google.cn/reference/androidx/camera/core/UseCase?hl=zh-cn"><code>UseCase</code></a>。这样您就可以在 CaptureRequest 上设置属性，就像使用 <a href="https://developer.android.google.cn/reference/androidx/camera/camera2/interop/Camera2CameraControl?hl=zh-cn"><code>Camera2CameraControl</code></a> 一样。它还提供了一些额外的控件，例如设置数据流用例以根据您的使用场景优化相机。</p><p>以下代码示例使用数据流用例来优化视频通话。使用 <a href="https://developer.android.google.cn/reference/androidx/camera/camera2/interop/Camera2CameraInfo?hl=zh-cn"><code>Camera2CameraInfo</code></a> 可提取视频通话流用例是否可用。然后，使用 <a href="https://developer.android.google.cn/reference/androidx/camera/camera2/interop/Camera2Interop.Extender?hl=zh-cn"><code>Camera2Interop.Extender</code></a> 设置底层数据流用例。</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Kotlin</button><button type="button" class="tab">Java</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set underlying Camera2 stream use case to optimize for video calls.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> videoCallStreamId =</span><br><span class="line">    CameraMetadata.SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALL.toLong()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check available CameraInfos to find the first one that supports</span></span><br><span class="line"><span class="comment">// the video call stream use case.</span></span><br><span class="line"><span class="keyword">val</span> frontCameraInfo = cameraProvider.getAvailableCameraInfos()</span><br><span class="line">    .first &#123; cameraInfo -&gt;</span><br><span class="line">        <span class="keyword">val</span> isVideoCallStreamingSupported = Camera2CameraInfo.from(cameraInfo)</span><br><span class="line">            .getCameraCharacteristic(</span><br><span class="line">                CameraCharacteristics.SCALER_AVAILABLE_STREAM_USE_CASES</span><br><span class="line">            )?.contains(videoCallStreamId)</span><br><span class="line">        <span class="keyword">val</span> isFrontFacing = (cameraInfo.getLensFacing() ==</span><br><span class="line">                             CameraSelector.LENS_FACING_FRONT)</span><br><span class="line">        (isVideoCallStreamingSupported == <span class="literal">true</span>) &amp;&amp; isFrontFacing</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> cameraSelector = frontCameraInfo.cameraSelector</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start with a Preview Builder.</span></span><br><span class="line"><span class="keyword">val</span> previewBuilder = Preview.Builder()</span><br><span class="line">    .setTargetAspectRatio(screenAspectRatio)</span><br><span class="line">    .setTargetRotation(rotation)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Camera2Interop.Extender to set the video call stream use case.</span></span><br><span class="line">Camera2Interop.Extender(previewBuilder).setStreamUseCase(videoCallStreamId)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind the Preview UseCase and the corresponding CameraSelector.</span></span><br><span class="line"><span class="keyword">val</span> preview = previewBuilder.build()</span><br><span class="line">camera = cameraProvider.bindToLifecycle(<span class="keyword">this</span>, cameraSelector, preview)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set underlying Camera2 stream use case to optimize for video calls.</span></span><br><span class="line"></span><br><span class="line"><span class="type">Long</span> <span class="variable">videoCallStreamId</span> <span class="operator">=</span></span><br><span class="line">    CameraMetadata.SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALL.toLong();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check available CameraInfos to find the first one that supports</span></span><br><span class="line"><span class="comment">// the video call stream use case.</span></span><br><span class="line">List&lt;CameraInfo&gt; cameraInfos = cameraProvider.getAvailableCameraInfos();</span><br><span class="line"><span class="type">CameraInfo</span> <span class="variable">frontCameraInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (cameraInfo in cameraInfos) &#123;</span><br><span class="line">    Long[] availableStreamUseCases = Camera2CameraInfo.from(cameraInfo)</span><br><span class="line">        .getCameraCharacteristic(</span><br><span class="line">            CameraCharacteristics.SCALER_AVAILABLE_STREAM_USE_CASES</span><br><span class="line">        );</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isVideoCallStreamingSupported</span> <span class="operator">=</span> Arrays.List(availableStreamUseCases)</span><br><span class="line">                .contains(videoCallStreamId);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isFrontFacing</span> <span class="operator">=</span> (cameraInfo.getLensFacing() ==</span><br><span class="line">                             CameraSelector.LENS_FACING_FRONT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isVideoCallStreamingSupported &amp;&amp; isFrontFacing) &#123;</span><br><span class="line">        frontCameraInfo = cameraInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (frontCameraInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Handle case where video call streaming is not supported.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">CameraSelector</span> <span class="variable">cameraSelector</span> <span class="operator">=</span> frontCameraInfo.getCameraSelector();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start with a Preview Builder.</span></span><br><span class="line">Preview.<span class="type">Builder</span> <span class="variable">previewBuilder</span> <span class="operator">=</span> Preview.Builder()</span><br><span class="line">    .setTargetAspectRatio(screenAspectRatio)</span><br><span class="line">    .setTargetRotation(rotation);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Camera2Interop.Extender to set the video call stream use case.</span></span><br><span class="line">Camera2Interop.Extender(previewBuilder).setStreamUseCase(videoCallStreamId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind the Preview UseCase and the corresponding CameraSelector.</span></span><br><span class="line"><span class="type">Preview</span> <span class="variable">preview</span> <span class="operator">=</span> previewBuilder.build()</span><br><span class="line"><span class="type">Camera</span> <span class="variable">camera</span> <span class="operator">=</span> cameraProvider.bindToLifecycle(<span class="built_in">this</span>, cameraSelector, preview)</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.google.cn/training/camerax/architecture">Android CameraX 架构</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> CameraX </category>
          
          <category> Camera2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> CameraX </tag>
            
            <tag> Jetpack </tag>
            
            <tag> 相机 </tag>
            
            <tag> Camera2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android CameraX的基本使用</title>
      <link href="/post/ff52020d/"/>
      <url>/post/ff52020d/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然网上有很多<code>CameraX</code>的教程，但是每次用<code>CameraX</code>的时候总要在翻一翻官方的文档或者网上的教程之类的，这次就自己记一下吧，翻自己的总比翻别人的好吧🤪</p><h2 id="声明依赖项"><a href="#声明依赖项" class="headerlink" title="声明依赖项"></a>声明依赖项</h2><p>要添加 CameraX 的依赖项，您必须将 <a href="https://developer.android.google.cn/studio/build/dependencies?hl=zh-cn#google-maven">Google Maven 代码库</a>添加到项目中。</p><p>打开项目的 <code>settings.gradle</code> 文件并添加 <code>google()</code> 代码库，如下所示：</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Groovy</button><button type="button" class="tab">Kotlin</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.<span class="keyword">set</span>(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>将以下内容添加到 Android 代码块的末尾：</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Groovy</button><button type="button" class="tab">Kotlin</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// For Kotlin projects</span></span><br><span class="line">    kotlinOptions &#123;</span><br><span class="line">        jvmTarget = <span class="string">&quot;1.8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility = JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility = JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// For Kotlin projects</span></span><br><span class="line">    kotlinOptions &#123;</span><br><span class="line">        jvmTarget = <span class="string">&quot;1.8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>将以下内容添加到应用的每个模块的 <code>build.gradle</code> 文件中：</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Groovy</button><button type="button" class="tab">Kotlin</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  <span class="comment">// CameraX核心库使用camera2实现</span></span><br><span class="line">  <span class="keyword">def</span> camerax_version = <span class="string">&quot;1.2.3&quot;</span></span><br><span class="line">  <span class="comment">// 以下行是可选的，因为核心库是由camera-camera2间接包含的</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.camera:camera-core:$&#123;camerax_version&#125;&quot;</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.camera:camera-camera2:$&#123;camerax_version&#125;&quot;</span></span><br><span class="line">  <span class="comment">// 如果您想另外使用 CameraX Lifecycle 库</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.camera:camera-lifecycle:$&#123;camerax_version&#125;&quot;</span></span><br><span class="line">  <span class="comment">// 如果您想另外使用 CameraX VideoCapture 库</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.camera:camera-video:$&#123;camerax_version&#125;&quot;</span></span><br><span class="line">  <span class="comment">// 如果您想另外使用 CameraX View 类</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.camera:camera-view:$&#123;camerax_version&#125;&quot;</span></span><br><span class="line">  <span class="comment">// 如果您想另外添加 CameraX ML Kit Vision Integration</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.camera:camera-mlkit-vision:$&#123;camerax_version&#125;&quot;</span></span><br><span class="line">  <span class="comment">// 如果您想另外使用 CameraX Extensions 库</span></span><br><span class="line">  implementation <span class="string">&quot;androidx.camera:camera-extensions:$&#123;camerax_version&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// CameraX核心库使用camera2实现</span></span><br><span class="line">    <span class="keyword">val</span> camerax_version = <span class="string">&quot;1.2.3&quot;</span></span><br><span class="line">    <span class="comment">// 以下行是可选的，因为核心库是由camera-camera2间接包含的</span></span><br><span class="line">    implementation(<span class="string">&quot;androidx.camera:camera-core:<span class="subst">$&#123;camerax_version&#125;</span>&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;androidx.camera:camera-camera2:<span class="subst">$&#123;camerax_version&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">// 如果您想另外使用 CameraX Lifecycle 库</span></span><br><span class="line">    implementation(<span class="string">&quot;androidx.camera:camera-lifecycle:<span class="subst">$&#123;camerax_version&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">// 如果您想另外使用 CameraX VideoCapture 库</span></span><br><span class="line">    implementation(<span class="string">&quot;androidx.camera:camera-video:<span class="subst">$&#123;camerax_version&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">// 如果您想另外使用 CameraX View 类</span></span><br><span class="line">    implementation(<span class="string">&quot;androidx.camera:camera-view:<span class="subst">$&#123;camerax_version&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">// 如果您想另外添加 CameraX ML Kit Vision Integration</span></span><br><span class="line">    implementation(<span class="string">&quot;androidx.camera:camera-mlkit-vision:<span class="subst">$&#123;camerax_version&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment">// 如果您想另外使用 CameraX Extensions 库</span></span><br><span class="line">    implementation(<span class="string">&quot;androidx.camera:camera-extensions:<span class="subst">$&#123;camerax_version&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>如需详细了解如何配置应用以满足上述要求或查看CameraX最新版本号，请参阅<a href="https://developer.android.google.cn/jetpack/androidx/releases/camera">声明依赖项</a>。</p><h2 id="实现预览"><a href="#实现预览" class="headerlink" title="实现预览"></a>实现预览</h2><p>在向应用添加预览时，请使用 <a href="https://developer.android.google.cn/reference/kotlin/androidx/camera/view/PreviewView?hl=zh-cn"><code>PreviewView</code></a>，这是一种可以剪裁、缩放和旋转以确保正确显示的 <code>View</code>。</p><p>当相机处于活动状态时，图片预览会流式传输到 <code>PreviewView</code> 中的 Surface。</p><h3 id="将-PreviewView-添加到布局"><a href="#将-PreviewView-添加到布局" class="headerlink" title="将 PreviewView 添加到布局"></a>将 PreviewView 添加到布局</h3><p>以下示例显示了布局中的 <code>PreviewView</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.camera.view.PreviewView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/previewView&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="初始化相机"><a href="#初始化相机" class="headerlink" title="初始化相机"></a>初始化相机</h3><p>以下代码展示了如何初始化预览需要 <code>CameraProvider</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.camera.lifecycle.ProcessCameraProvider</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.ListenableFuture</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CameraActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> cameraProviderFuture : ListenableFuture&lt;ProcessCameraProvider&gt;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> cameraProvider: ProcessCameraProvider? = <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化相机，可在onCreate()内调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initCamera</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 检查权限</span></span><br><span class="line">      checkPermission() &#123;</span><br><span class="line">          cameraProviderFuture = ProcessCameraProvider.getInstance(<span class="keyword">this</span>)</span><br><span class="line">          cameraProviderFuture.addListener(&#123;</span><br><span class="line">                cameraProvider = cameraProviderFuture.<span class="keyword">get</span>()</span><br><span class="line">            <span class="comment">// 检查摄像头</span></span><br><span class="line">                lensFacing = <span class="keyword">when</span> &#123;</span><br><span class="line">                    hasBackCamera() -&gt; CameraSelector.LENS_FACING_BACK</span><br><span class="line">                    hasFrontCamera() -&gt; CameraSelector.LENS_FACING_FRONT</span><br><span class="line">                    <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                        toast(<span class="string">&quot;前后摄像头不可用&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span><span class="symbol">@addListener</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// (可忽略) 将PreviewView的预览View改为TextureView</span></span><br><span class="line">                binding.previewView.implementationMode = PreviewView.ImplementationMode.COMPATIBLE</span><br><span class="line">                <span class="comment">// 绑定相机</span></span><br><span class="line">                bindPreview(cameraProvider ?: <span class="keyword">return</span><span class="symbol">@addListener</span>)</span><br><span class="line">            &#125;, ContextCompat.getMainExecutor(requireContext()))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检查摄像头"><a href="#检查摄像头" class="headerlink" title="检查摄像头"></a>检查摄像头</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 如果设备有可用的后置摄像头，则返回 true。否则为假 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasBackCamera</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cameraProvider?.hasCamera(CameraSelector.DEFAULT_BACK_CAMERA) ?: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 如果设备有可用的前置摄像头，则返回 true。否则为假 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasFrontCamera</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cameraProvider?.hasCamera(CameraSelector.DEFAULT_FRONT_CAMERA) ?: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定相机"><a href="#绑定相机" class="headerlink" title="绑定相机"></a>绑定相机</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Camera</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> camera: Camera? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Preview</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> preview <span class="keyword">by</span> lazy &#123;</span><br><span class="line">Preview.Builder().build()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前摄像头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> lensFacing: <span class="built_in">Int</span> = CameraSelector.LENS_FACING_BACK</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绑定相机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">bindPreview</span><span class="params">(cameraProvider: <span class="type">ProcessCameraProvider</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 选择摄像头</span></span><br><span class="line"><span class="keyword">val</span> cameraSelector = CameraSelector.Builder().requireLensFacing(lensFacing).build()</span><br><span class="line"><span class="comment">// 解除所有绑定</span></span><br><span class="line">cameraProvider.unbindAll()</span><br><span class="line"><span class="comment">// 将所选相机和任意用例绑定到生命周期</span></span><br><span class="line">camera = cameraProvider.bindToLifecycle(<span class="keyword">this</span>, cameraSelector, preview)</span><br><span class="line"><span class="comment">// 将 Preview 连接到 PreviewView</span></span><br><span class="line">preview.setSurfaceProvider(binding.previewView.surfaceProvider)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，<a href="https://developer.android.google.cn/reference/androidx/camera/lifecycle/ProcessCameraProvider#bindToLifecycle(androidx.lifecycle.LifecycleOwner,%20androidx.camera.core.CameraSelector,%20androidx.camera.core.UseCase...)"><code>bindToLifecycle()</code></a> 会返回一个 <a href="https://developer.android.google.cn/reference/androidx/camera/core/Camera?hl=zh-cn"><code>Camera</code></a> 对象。如需详细了解如何控制相机输出（例如变焦和曝光），请参阅<a href="https://developer.android.google.cn/training/camerax/configuration?hl=zh-cn#camera-output">相机输出</a>。</p><h2 id="图片拍摄"><a href="#图片拍摄" class="headerlink" title="图片拍摄"></a>图片拍摄</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> imageCapture <span class="keyword">by</span> lazy &#123;</span><br><span class="line">ImageCapture.Builder().setCaptureMode(ImageCapture.CAPTURE_MODE_MAXIMIZE_QUALITY)</span><br><span class="line">.setTargetAspectRatio(AspectRatio.RATIO_4_3).build()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方向</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> orientationEventListener: OrientationEventListener? = <span class="literal">null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>cameraProviderFuture.addListener</code>内部添加 调用<code>bindPreview() </code>方法之前</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">orientationEventListener = <span class="keyword">object</span> : OrientationEventListener(<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOrientationChanged</span><span class="params">(orientation: <span class="type">Int</span>)</span></span> &#123; <span class="comment">// Monitors orientation values to determine the target rotation value</span></span><br><span class="line">        <span class="keyword">val</span> rotation = <span class="keyword">when</span> (orientation) &#123;</span><br><span class="line">            <span class="keyword">in</span> <span class="number">45.</span><span class="number">.134</span> -&gt; Surface.ROTATION_270</span><br><span class="line">            <span class="keyword">in</span> <span class="number">135.</span><span class="number">.224</span> -&gt; Surface.ROTATION_180</span><br><span class="line">            <span class="keyword">in</span> <span class="number">225.</span><span class="number">.314</span> -&gt; Surface.ROTATION_90</span><br><span class="line">            <span class="keyword">else</span> -&gt; Surface.ROTATION_0</span><br><span class="line">        &#125;</span><br><span class="line">        imageCapture.targetRotation = rotation</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在bindPreview()方法内启用<br><code>orientationEventListener?.enable()</code></p><p>及时暂停</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPause</span><span class="params">()</span></span> &#123;</span><br><span class="line">    orientationEventListener?.disable()</span><br><span class="line">    <span class="keyword">super</span>.onPause()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>bindToLifecycle</code>内加入<code>UseCase</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">camera = cameraProvider.bindToLifecycle(viewLifecycleOwner, cameraSelector, preview, imageCapture)</span><br></pre></td></tr></table></figure><p>拍照</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拍照</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressLint(<span class="string">&quot;RestrictedApi&quot;</span>)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">takePicture</span><span class="params">(save: (<span class="type">uri</span>: <span class="type">Uri</span>?) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 存储照片的路径</span></span><br><span class="line">    <span class="keyword">val</span> dir = File(ConfigConstant.PATH)</span><br><span class="line">    <span class="keyword">if</span> (!dir.exists()) dir.mkdirs()</span><br><span class="line">    <span class="keyword">val</span> srcFile = File(dir, ConfigConstant.BITMAP_NAME)</span><br><span class="line">    <span class="keyword">val</span> outputFileOptions = ImageCapture.OutputFileOptions.Builder(srcFile).build()</span><br><span class="line">    imageCapture.takePicture(outputFileOptions, cameraExecutor, <span class="keyword">object</span> : ImageCapture.OnImageSavedCallback &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onImageSaved</span><span class="params">(outputFileResults: <span class="type">ImageCapture</span>.<span class="type">OutputFileResults</span>)</span></span> &#123;</span><br><span class="line">            save(outputFileResults?.savedUri)</span><br><span class="line">            <span class="comment">// outputFileResults可以拿到图片的Uri</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(exception: <span class="type">ImageCaptureException</span>)</span></span> &#123;</span><br><span class="line">            save(<span class="literal">null</span>)</span><br><span class="line">            toast(<span class="string">&quot;拍照异常&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里基本上就能实现正常的拍摄，再来介绍一些小功能吧</p><h2 id="部分功能"><a href="#部分功能" class="headerlink" title="部分功能"></a>部分功能</h2><h3 id="切换摄像头"><a href="#切换摄像头" class="headerlink" title="切换摄像头"></a>切换摄像头</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切换摄像头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">switchCamera</span><span class="params">()</span></span> &#123;</span><br><span class="line">    orientationEventListener?.disable()</span><br><span class="line">    lensFacing = <span class="keyword">if</span> (CameraSelector.LENS_FACING_FRONT == lensFacing) &#123;</span><br><span class="line">        CameraSelector.LENS_FACING_BACK</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CameraSelector.LENS_FACING_FRONT</span><br><span class="line">    &#125;</span><br><span class="line">    bindPreview(cameraProvider ?: <span class="keyword">return</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手电筒"><a href="#手电筒" class="headerlink" title="手电筒"></a>手电筒</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切换手电筒,可能打开失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">flashlight</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    camera?.let &#123;</span><br><span class="line">        <span class="keyword">val</span> mode = <span class="keyword">if</span> (imageCapture.flashMode == ImageCapture.FLASH_MODE_OFF) ImageCapture.FLASH_MODE_ON</span><br><span class="line">        <span class="keyword">else</span> ImageCapture.FLASH_MODE_OFF</span><br><span class="line">        imageCapture.flashMode = mode</span><br><span class="line">        <span class="keyword">return</span> imageCapture.flashMode == ImageCapture.FLASH_MODE_ON</span><br><span class="line">    &#125; ?: toast(<span class="string">&quot;闪光灯开启失败,请检查相机能否正常使用&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="曝光补偿"><a href="#曝光补偿" class="headerlink" title="曝光补偿"></a>曝光补偿</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置曝光补偿, 可能设置失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setExposureCompensationIndex</span><span class="params">(value: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    camera?.let &#123; camera -&gt;</span><br><span class="line">        <span class="keyword">val</span> cameraInfo = camera.cameraInfo</span><br><span class="line">        <span class="keyword">if</span> (cameraInfo.exposureState.exposureCompensationRange.upper == <span class="number">0</span> &amp;&amp; cameraInfo.exposureState.exposureCompensationRange.lower == <span class="number">0</span>) &#123;</span><br><span class="line">            toast(<span class="string">&quot;当前设备不支持设置曝光补偿&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cameraInfo.exposureState.exposureCompensationRange.contains(value)) &#123;</span><br><span class="line">            <span class="keyword">val</span> index = (value / camera.cameraInfo.exposureState.exposureCompensationStep.toFloat()).roundToInt()</span><br><span class="line">            camera.cameraControl.setExposureCompensationIndex(index)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; ?: toast(<span class="string">&quot;设置曝光补偿失败,请检查相机能否正常使用&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的内容来源于<a href="https://developer.android.google.cn/training/camerax">Android官网文档</a></p><h2 id="PreviewView-的其他API"><a href="#PreviewView-的其他API" class="headerlink" title="PreviewView 的其他API"></a>PreviewView 的其他API</h2><p>CameraX <code>PreviewView</code> 提供了一些其他 API 来用于配置属性，例如：</p><ul><li>用于渲染预览流的<a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ImplementationMode?hl=zh-cn">实现模式</a>。</li><li>预览图片的<a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ScaleType?hl=zh-cn">缩放类型</a>。</li></ul><h3 id="实现模式"><a href="#实现模式" class="headerlink" title="实现模式"></a>实现模式</h3><p><code>PreviewView</code> 可以使用以下模式之一将预览流渲染到目标 <code>View</code> 上：</p><ul><li><a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ImplementationMode?hl=zh-cn#PERFORMANCE"><code>PERFORMANCE</code></a> 是默认模式。<code>PreviewView</code> 会使用 <a href="https://developer.android.google.cn/reference/android/view/SurfaceView?hl=zh-cn"><code>SurfaceView</code></a> 显示视频串流，但在<a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ImplementationMode?hl=zh-cn#PERFORMANCE">某些情况下</a>会回退为使用 <a href="https://developer.android.google.cn/reference/android/view/TextureView?hl=zh-cn"><code>TextureView</code></a>。<code>SurfaceView</code> 具有专用的绘图界面，该对象更有可能通过<a href="https://source.android.google.cn/devices/graphics/hwc?hl=zh-cn">内部硬件合成器</a>实现硬件叠加层，尤其是当预览视频上面没有其他界面元素（如按钮）时。通过使用硬件叠加层进行渲染，视频帧会避开 GPU 路径，从而能降低平台功耗并缩短延迟时间。</li><li><a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ImplementationMode?hl=zh-cn#COMPATIBLE"><code>COMPATIBLE</code></a> 模式。在此模式下，<code>PreviewView</code> 会使用 <code>TextureView</code>；不同于 <code>SurfaceView</code>，该对象没有专用的绘图表面。因此，视频要通过混合渲染，才能显示。在这个额外的步骤中，应用可以执行额外的处理工作，例如不受限制地缩放和旋转视频。</li></ul><p>您可以使用 <a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView?hl=zh-cn#setImplementationMode(androidx.camera.view.PreviewView.ImplementationMode)"><code>PreviewView.setImplementationMode()</code></a> 选择适合具体应用的实现模式。如果默认的 <code>PERFORMANCE</code> 模式不适合您的应用，请参阅以下代码示例，了解如何设置 <code>COMPATIBLE</code> 模式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// viewFinder 是一个 PreviewView 实例</span></span><br><span class="line">viewFinder.implementationMode = PreviewView.ImplementationMode.COMPATIBLE</span><br></pre></td></tr></table></figure><h3 id="缩放类型"><a href="#缩放类型" class="headerlink" title="缩放类型"></a>缩放类型</h3><p>当预览视频分辨率与目标 <code>PreviewView</code> 的尺寸不同时，视频内容需要通过剪裁操作或添加遮幅式黑边来适应视图（保持原始宽高比）。为此，<code>PreviewView</code> 提供了以下 <a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ScaleType?hl=zh-cn"><code>ScaleTypes</code></a>：</p><ul><li><a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ScaleType?hl=zh-cn#FIT_CENTER"><code>FIT_CENTER</code></a>、<a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ScaleType?hl=zh-cn#FIT_START"><code>FIT_START</code></a> 和 <a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ScaleType?hl=zh-cn#FIT_END"><code>FIT_END</code></a>，用于添加遮幅式黑边。整个视频内容会调整（放大或缩小）为可在目标 <code>PreviewView</code> 中显示的最大尺寸。不过，虽然整个视频帧会完整显示，但屏幕画面中可能会出现空白部分。视频帧会与目标视图的中心、起始或结束位置对齐，具体取决于您在上述三种缩放类型中选择了哪一种。</li><li><a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ScaleType?hl=zh-cn#FILL_CENTER"><code>FILL_CENTER</code></a>、<a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ScaleType?hl=zh-cn#FILL_START"><code>FILL_START</code></a> 和 <a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView.ScaleType?hl=zh-cn#FILL_END"><code>FILL_END</code></a>，用于进行剪裁。如果视频的宽高比与 <code>PreviewView</code> 不匹配，画面中只会显示部分内容，但视频仍会填满整个 <code>PreviewView</code>。</li></ul><p>CameraX 使用的默认缩放类型是 <code>FILL_CENTER</code>。您可以使用 <a href="https://developer.android.google.cn/reference/androidx/camera/view/PreviewView?hl=zh-cn#setScaleType(androidx.camera.view.PreviewView.ScaleType)"><code>PreviewView.setScaleType()</code></a> 设置最适合具体应用的缩放类型。下面的代码示例设置了 <code>FIT_CENTER</code> 缩放类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// viewFinder 是一个 PreviewView 实例</span></span><br><span class="line">viewFinder.scaleType = PreviewView.ScaleType.FIT_CENTER</span><br></pre></td></tr></table></figure><p>视频显示过程包括以下步骤：</p><ol><li>缩放视频：<ul><li>如果您选择的缩放类型是 <code>FIT_*</code>，请使用 <code>min(dst.width/src.width, dst.height/src.height)</code> 缩放视频。</li><li>如果您选择的缩放类型是 <code>FILL_*</code>，请使用 <code>max(dst.width/src.width, dst.height/src.height)</code> 缩放视频。</li></ul></li><li>将经过缩放的视频与目标PreviewView对齐：<ul><li>对于 <code>FIT_CENTER/FILL_CENTER</code>，请将经过缩放的视频与目标 <code>PreviewView</code> 居中对齐。</li><li>对于 <code>FIT_START/FILL_START</code>，请以每个视频的左上角为准，将经过缩放的视频与目标 <code>PreviewView</code> 对齐。</li><li>对于 <code>FIT_END/FILL_END</code>，请以每个视频的右下角为准，将经过缩放的视频与目标 <code>PreviewView</code> 对齐。</li></ul></li></ol><h2 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h2><p>您可以配置每个 CameraX 用例，以控制用例操作的不同方面。</p><p>例如，对于图片拍摄用例，您可以设置目标宽高比和闪光灯模式。以下代码显示了一个示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> imageCapture = ImageCapture.Builder()</span><br><span class="line">    .setFlashMode(...)</span><br><span class="line">    .setTargetAspectRatio(...)</span><br><span class="line">    .build()</span><br></pre></td></tr></table></figure><p>除配置选项之外，一些用例会公开 API 以便在创建后动态更改设置。如需了解各个用例的专属配置，请参阅<a href="https://developer.android.google.cn/training/camerax/preview?hl=zh-cn">实现预览</a>、<a href="https://developer.android.google.cn/training/camerax/analyze?hl=zh-cn">分析图片</a>和<a href="https://developer.android.google.cn/training/camerax/take-photo?hl=zh-cn">图片拍摄</a>。</p><h3 id="CameraXConfig"><a href="#CameraXConfig" class="headerlink" title="CameraXConfig"></a>CameraXConfig</h3><p>为简单起见，CameraX 具有适合大多数使用场景的默认配置（例如内部执行器和处理程序）。但是，如果您的应用有特殊要求或希望自定义这些配置，可使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig?hl=zh-cn"><code>CameraXConfig</code></a> 接口实现此目的。</p><p>借助 <code>CameraXConfig</code>，应用可以执行以下操作：</p><ul><li>使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig.Builder?hl=zh-cn#setAvailableCamerasLimiter(androidx.camera.core.CameraSelector)"><code>setAvailableCameraLimiter()</code></a> 优化启动延迟时间。</li><li>使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig.Builder?hl=zh-cn#setCameraExecutor(java.util.concurrent.Executor)"><code>setCameraExecutor()</code></a> 向 CameraX 提供应用执行器。</li><li>将默认调度器处理程序替换为 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig.Builder?hl=zh-cn#setSchedulerHandler(android.os.Handler)"><code>setSchedulerHandler()</code></a>。</li><li>使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig.Builder?hl=zh-cn#setMinimumLoggingLevel(int)"><code>setMinimumLoggingLevel()</code></a> 更改日志记录级别。</li></ul><h4 id="使用模式"><a href="#使用模式" class="headerlink" title="使用模式"></a>使用模式</h4><p>以下程序说明了如何使用 <code>CameraXConfig</code>：</p><ol><li>使用您的自定义配置创建一个 <code>CameraXConfig</code> 对象。</li><li>在 <a href="https://developer.android.google.cn/reference/android/app/Application?hl=zh-cn"><code>Application</code></a> 中实现 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig.Provider?hl=zh-cn"><code>CameraXConfig.Provider</code></a> 接口，并在 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig.Provider?hl=zh-cn#getCameraXConfig()"><code>getCameraXConfig()</code></a> 中返回 <code>CameraXConfig</code> 对象。</li><li>按照<a href="https://developer.android.google.cn/reference/android/app/Application?hl=zh-cn">此处</a>的说明，将您的 <code>Application</code> 类添加到 <code>AndroidManifest.xml</code> 文件中。</li></ol><p>例如，以下代码示例将 CameraX 日志记录限制为仅记录错误消息：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CameraApplication</span> : <span class="type">Application</span>(), CameraXConfig.Provider &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCameraXConfig</span><span class="params">()</span></span>: CameraXConfig &#123;</span><br><span class="line">       <span class="keyword">return</span> CameraXConfig.Builder.fromConfig(Camera2Config.defaultConfig())</span><br><span class="line">           .setMinimumLoggingLevel(Log.ERROR).build()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您的应用需要在设置 CameraX 配置后了解该配置，请保留 <code>CameraXConfig</code> 对象的本地副本。</p><h4 id="摄像头限制器"><a href="#摄像头限制器" class="headerlink" title="摄像头限制器"></a>摄像头限制器</h4><p>在第一次调用 <a href="https://developer.android.google.cn/reference/androidx/camera/lifecycle/ProcessCameraProvider?hl=zh-cn#getInstance(android.content.Context)"><code>ProcessCameraProvider.getInstance()</code></a> 期间，CameraX 会枚举和查询设备上可用摄像头的特性。由于 CameraX 需要与硬件组件通信，因此对每个摄像头执行此过程可能需要较长时间，尤其是在低端设备上。如果您的应用仅使用设备上的特定摄像头（例如默认前置摄像头），您可以将 CameraX 设置为忽略其他摄像头，从而缩短应用所用摄像头的启动延迟时间。</p><p>如果传递给 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig.Builder?hl=zh-cn#setAvailableCamerasLimiter(androidx.camera.core.CameraSelector)"><code>CameraXConfig.Builder.setAvailableCamerasLimiter()</code></a> 的 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraSelector?hl=zh-cn"><code>CameraSelector</code></a> 过滤掉了某个摄像头，则 CameraX 在运行时会假定该摄像头不存在。例如，以下代码会限制应用只能使用设备的默认后置摄像头：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainApplication</span> : <span class="type">Application</span>(), CameraXConfig.Provider &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCameraXConfig</span><span class="params">()</span></span>: CameraXConfig &#123;</span><br><span class="line">       <span class="keyword">return</span> CameraXConfig.Builder.fromConfig(Camera2Config.defaultConfig())</span><br><span class="line">              .setAvailableCamerasLimiter(CameraSelector.DEFAULT_BACK_CAMERA)</span><br><span class="line">              .build()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>构建 CameraX 时所采用的很多平台 API 都要求阻塞与硬件之间的进程间通信 (IPC)，此类通信有时可能需要数百毫秒的响应时间。因此，CameraX 仅从后台线程调用这些 API，从而避免主线程发生阻塞，使界面保持流畅。CameraX 会在内部管理这些后台线程，因此这类行为显得比较透明。但是，某些应用需要严格控制线程。<code>CameraXConfig</code> 允许应用设置通过 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig.Builder?hl=zh-cn#setCameraExecutor(java.util.concurrent.Executor)"><code>CameraXConfig.Builder.setCameraExecutor()</code></a> 和 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig.Builder?hl=zh-cn#setSchedulerHandler(android.os.Handler)"><code>CameraXConfig.Builder.setSchedulerHandler()</code></a> 使用的后台线程。</p><p><strong>注意</strong>：提供自定义执行器或调度器处理程序时，请使用不会在主线程上执行代码的处理程序。</p><h4 id="摄像头执行器"><a href="#摄像头执行器" class="headerlink" title="摄像头执行器"></a>摄像头执行器</h4><p>摄像头执行器用于所有内部摄像头平台 API 调用，以及来自这些 API 的回调。CameraX 会分配和管理内部 <a href="https://developer.android.google.cn/reference/java/util/concurrent/Executor?hl=zh-cn"><code>Executor</code></a> 来执行这些任务。 但是，如果您的应用需要更严格的线程控制，请使用 <code>CameraXConfig.Builder.setCameraExecutor()</code>。</p><h4 id="调度器处理程序"><a href="#调度器处理程序" class="headerlink" title="调度器处理程序"></a>调度器处理程序</h4><p>调度器处理程序用于按固定的时间间隔调度内部任务，例如在摄像头不可用时再次尝试打开该摄像头。该处理程序不执行作业，而是仅将作业分派给摄像头执行器。有时，该处理程序还用于需要使用 <a href="https://developer.android.google.cn/reference/android/os/Handler?hl=zh-cn"><code>Handler</code></a> 进行回调的旧版 API 平台。在这些情况下，回调仍仅直接分派给摄像头执行器。CameraX 会分配和管理内部 <a href="https://developer.android.google.cn/reference/android/os/HandlerThread?hl=zh-cn"><code>HandlerThread</code></a> 来执行这些任务，但您可以将其替换为 <code>CameraXConfig.Builder.setSchedulerHandler()</code>。</p><h4 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h4><p>借助 CameraX 日志记录，应用可以过滤 logcat 消息，因为在正式版代码中应尽量避免包含详细消息。CameraX 支持四种日志记录级别（从最详细到最严重）：</p><ul><li><code>Log.DEBUG</code>（默认）</li><li><code>Log.INFO</code></li><li><code>Log.WARN</code></li><li><code>Log.ERROR</code></li></ul><p>如需详细了解这些日志级别，请参阅 <a href="https://developer.android.google.cn/reference/android/util/Log?hl=zh-cn#DEBUG">Android 日志文档</a>。您可以使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraXConfig.Builder?hl=zh-cn#setMinimumLoggingLevel(int)"><code>CameraXConfig.Builder.setMinimumLoggingLevel(int)</code></a> 为您的应用设置适当的日志记录级别。</p><h3 id="自动选择"><a href="#自动选择" class="headerlink" title="自动选择"></a>自动选择</h3><p>CameraX 会根据运行您的应用的设备自动提供专用的功能。例如，如果您未指定分辨率或您指定的分辨率不受支持，CameraX 会自动确定要使用的最佳分辨率。所有这些操作均由库进行处理，无需您编写设备专属代码。</p><p>CameraX 的目标是成功初始化摄像头会话。这意味着，CameraX 会根据设备功能降低分辨率和宽高比。发生这种情况的原因如下：</p><ul><li>设备不支持请求的分辨率。</li><li>设备存在兼容性问题，例如需要特定分辨率才能正常运行的旧设备。</li><li>在某些设备上，某些格式仅在某些宽高比下可用。</li><li>对于 JPEG 或视频编码，设备首选“最近的 mod16”。如需了解详情，请参阅 <a href="https://developer.android.google.cn/reference/android/hardware/camera2/CameraCharacteristics?hl=zh-cn#SCALER_STREAM_CONFIGURATION_MAP"><code>SCALER_STREAM_CONFIGURATION_MAP</code></a>。</li></ul><p>尽管 CameraX 会创建并管理会话，您也应始终在代码中检查用例输出所返回的图片大小，并进行相应调整。</p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>默认情况下，在用例创建期间，摄像头的旋转角度会设置为与默认的显示屏旋转角度保持一致。在此默认情况下，CameraX 会生成输出，确保应用与您预期在预览中看到的内容保持一致。通过在配置用例对象时传入当前显示屏方向或在创建用例对象之后动态传入显示屏方向，您可以将旋转角度更改为自定义值以支持多显示屏设备。</p><p>您的应用可以使用配置设置来设置目标旋转角度。然后，即使生命周期处于运行状态，应用也可以通过使用用例 API 中的方法（例如 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis?hl=zh-cn#setTargetRotation(int)"><code>ImageAnalysis.setTargetRotation()</code></a>）更新旋转设置。您可以在应用锁定为纵向模式时执行上述操作，这样就无需重新配置旋转角度，但是照片或分析用例需要了解设备当前的旋转角度。例如，用例可能需要了解旋转角度才能以正确的方向进行人脸检测，或者将照片设置为横向或纵向。</p><p>存储所拍摄图片的数据时可能不会包含旋转信息。Exif 数据包含旋转信息，以便图库应用在保存后以正确的屏幕方向显示图片。</p><p>如需以正确的屏幕方向显示预览数据，您可以使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/Preview.PreviewOutput?hl=zh-cn"><code>Preview.PreviewOutput()</code></a> 的元数据输出创建转换。</p><p>以下代码示例展示了如何为屏幕方向事件设置旋转角度：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> imageCapture = ImageCapture.Builder().build()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> orientationEventListener = <span class="keyword">object</span> : OrientationEventListener(<span class="keyword">this</span> <span class="keyword">as</span> Context) &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOrientationChanged</span><span class="params">(orientation : <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="comment">// Monitors orientation values to determine the target rotation value</span></span><br><span class="line">            <span class="keyword">val</span> rotation : <span class="built_in">Int</span> = <span class="keyword">when</span> (orientation) &#123;</span><br><span class="line">                <span class="keyword">in</span> <span class="number">45.</span><span class="number">.134</span> -&gt; Surface.ROTATION_270</span><br><span class="line">                <span class="keyword">in</span> <span class="number">135.</span><span class="number">.224</span> -&gt; Surface.ROTATION_180</span><br><span class="line">                <span class="keyword">in</span> <span class="number">225.</span><span class="number">.314</span> -&gt; Surface.ROTATION_90</span><br><span class="line">                <span class="keyword">else</span> -&gt; Surface.ROTATION_0</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            imageCapture.targetRotation = rotation</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    orientationEventListener.enable()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个用例都会根据设定的旋转角度直接旋转图片数据，或者向用户提供未旋转图片数据的旋转元数据。</p><ul><li><strong>Preview</strong>：提供元数据输出，以便使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/Preview?hl=zh-cn#getTargetRotation()"><code>Preview.getTargetRotation()</code></a> 了解目标分辨率的旋转设置。</li><li><strong>ImageAnalysis</strong>：提供元数据输出，以便了解图片缓冲区坐标相对于显示坐标的位置。</li><li><strong>ImageCapture</strong>：更改图片 Exif 元数据、缓冲区或同时更改两者，从而反映旋转设置。更改的值取决于 HAL 实现。</li></ul><h3 id="剪裁矩形"><a href="#剪裁矩形" class="headerlink" title="剪裁矩形"></a>剪裁矩形</h3><p>默认情况下，剪裁矩形是完整的缓冲区矩形，您可通过 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ViewPort?hl=zh-cn"><code>ViewPort</code></a> 和 <a href="https://developer.android.google.cn/reference/androidx/camera/core/UseCaseGroup?hl=zh-cn"><code>UseCaseGroup</code></a> 对其进行自定义。通过对用例进行分组并设置视口，CameraX 可保证一个组中的所有用例的剪裁矩形都指向摄像头传感器中的同一个区域。</p><p>以下代码段展示了这两个类的使用方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> viewPort =  ViewPort.Builder(Rational(width, height), display.rotation).build()</span><br><span class="line"><span class="keyword">val</span> useCaseGroup = UseCaseGroup.Builder()</span><br><span class="line">    .addUseCase(preview)</span><br><span class="line">    .addUseCase(imageAnalysis)</span><br><span class="line">    .addUseCase(imageCapture)</span><br><span class="line">    .setViewPort(viewPort)</span><br><span class="line">    .build()</span><br><span class="line">cameraProvider.bindToLifecycle(lifecycleOwner, cameraSelector, useCaseGroup)</span><br></pre></td></tr></table></figure><p><code>ViewPort</code> 用于指定最终用户可看到的缓冲区矩形。CameraX 会根据视口的属性及附加的用例计算出可能的最大剪裁矩形。一般情况下，为了达到 WYSIWYG 效果，您应根据预览用例来配置视口。获取视口的一种简单方法是使用 <a href="https://developer.android.google.cn/training/camerax/preview?hl=zh-cn#implementation"><code>PreviewView</code></a>。</p><p>以下代码段展示了如何获取 <code>ViewPort</code> 对象：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> viewport = findViewById&lt;PreviewView&gt;(R.id.preview_view).viewPort</span><br></pre></td></tr></table></figure><p>在前面的示例中，应用通过 <code>ImageAnalysis</code> 和 <code>ImageCapture</code> 获取的内容与最终用户在 <code>PreviewView</code> 中看到的内容相同（假定 <code>PreviewView</code> 的缩放类型设为默认值 <code>FILL_CENTER</code>）。将剪裁矩形和旋转角度应用到输出缓冲区后，图片将在所有用例中保持一致，但分辨率可能会有所不同。如需详细了解如何应用转换信息，请参阅<a href="https://developer.android.google.cn/training/camerax/transform-output?hl=zh-cn">转换输出</a>。</p><h3 id="摄像头分辨率"><a href="#摄像头分辨率" class="headerlink" title="摄像头分辨率"></a>摄像头分辨率</h3><p>您可以选择让 CameraX 根据设备功能、设备支持的<a href="https://developer.android.google.cn/reference/android/hardware/camera2/CameraCharacteristics?hl=zh-cn#INFO_SUPPORTED_HARDWARE_LEVEL">硬件级别</a>、用例和所提供的宽高比组合设置图片分辨率。或者，您也可以在支持相应配置的用例中设置特定目标分辨率或特定宽高比。</p><h4 id="自动分辨率"><a href="#自动分辨率" class="headerlink" title="自动分辨率"></a>自动分辨率</h4><p>CameraX 可以根据 <code>cameraProcessProvider.bindToLifecycle()</code> 中指定的用例自动确定最佳分辨率设置。请尽可能在单个 <code>bindToLifecycle()</code> 调用的单个会话中指定需要同时运行的所有用例。CameraX 会考虑设备支持的硬件级别以及设备专属变化（设备超出或不满足<a href="https://developer.android.google.cn/reference/android/hardware/camera2/CameraDevice?hl=zh-cn#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)">可用的信息流配置</a>），根据绑定的成组用例确定分辨率。 这样做是为了确保应用在各种设备上运行时，能够最大限度地减少设备专属代码路径。</p><p>图片拍摄和图片分析用例的默认宽高比为 4:3。</p><p>对于具有可配置宽高比的用例，可让应用根据界面设计来指定所需的宽高比。CameraX 会按照请求的宽高比生成输出，并尽可能匹配设备支持的宽高比。如果没有任何支持的完全匹配分辨率，则选择满足最多条件的分辨率。也就是说，应用会决定摄像头在应用中的显示方式，CameraX 则会决定最佳摄像头分辨率设置，以满足不同设备的具体要求。</p><p>例如，应用可以执行以下任一操作：</p><ul><li>为用例指定 4:3 或 16:9 的目标分辨率</li><li>指定自定义分辨率，CameraX 会尝试查找与该分辨率最接近的分辨率</li><li>为 <code>ImageCapture</code> 指定剪裁宽高比</li></ul><p>CameraX 会自动选择内部 Camera2 界面的分辨率。下表显示了这些分辨率：</p><table><thead><tr><th align="left"><strong>用例</strong></th><th align="left"><strong>内部界面分辨率</strong></th><th align="left"><strong>输出数据分辨率</strong></th></tr></thead><tbody><tr><td align="left">预览</td><td align="left"><strong>宽高比</strong>：使目标与设置最相符的分辨率。</td><td align="left">内部界面分辨率。通过提供元数据，可让视图针对目标宽高比进行剪裁、缩放和旋转。</td></tr><tr><td align="left"><strong>默认分辨率：</strong>最高的预览分辨率，或与预览宽高比匹配的最高设备首选分辨率。</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><strong>最大分辨率：</strong>预览大小，指的是与设备的屏幕分辨率或 1080p (1920x1080)（以较低者为准）匹配的最佳尺寸。</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">图片分析</td><td align="left"><strong>宽高比</strong>：使目标与设置最相符的分辨率。</td><td align="left">内部界面分辨率。</td></tr><tr><td align="left"><strong>默认分辨率</strong>：默认目标分辨率设置为 640x480。同时调整目标分辨率和相应的宽高比可获得支持的最佳分辨率。</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><strong>最大分辨率</strong>：从 <a href="https://developer.android.google.cn/reference/android/hardware/camera2/params/StreamConfigurationMap?hl=zh-cn#getOutputSizes(int)"><code>StreamConfigurationMap.getOutputSizes()</code></a> 中检索到的 YUV_420_888 格式的摄像头设备最大输出分辨率。 目标分辨率默认设置为 640x480。因此，如果您希望分辨率大于 640x480，必须使用 <a href="https://developer.android.google.cn/reference/kotlin/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#settargetresolution"><code>setTargetResolution()</code></a> 和 <a href="https://developer.android.google.cn/reference/kotlin/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#settargetaspectratio"><code>setTargetAspectRatio()</code></a> 从支持的分辨率中选择最接近的一个。</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">图片拍摄</td><td align="left"><strong>宽高比</strong>：最适合设置的宽高比。</td><td align="left">内部界面分辨率。</td></tr><tr><td align="left"><strong>默认分辨率</strong>：最高可用分辨率，或与 ImageCapture 的宽高比匹配的最高设备首选分辨率。</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><strong>最大分辨率</strong>：JPEG 格式的摄像头设备最大输出分辨率。请使用 <a href="https://developer.android.google.cn/reference/android/hardware/camera2/params/StreamConfigurationMap?hl=zh-cn#getOutputSizes(int)"><code>StreamConfigurationMap.getOutputSizes()</code></a> 检索此分辨率。</td><td align="left"></td><td align="left"></td></tr></tbody></table><h4 id="指定分辨率"><a href="#指定分辨率" class="headerlink" title="指定分辨率"></a>指定分辨率</h4><p>使用 <code>setTargetResolution(Size resolution)</code> 方法构建用例时，您可以设置特定分辨率，如以下代码示例所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> imageAnalysis = ImageAnalysis.Builder()</span><br><span class="line">    .setTargetResolution(Size(<span class="number">1280</span>, <span class="number">720</span>))</span><br><span class="line">    .build()</span><br></pre></td></tr></table></figure><p>您无法针对同一个用例设置目标宽高比和目标分辨率。如果这样做，则会在构建配置对象时抛出 <code>IllegalArgumentException</code>。</p><p>按照目标旋转角度旋转支持的大小后，请在坐标系中表示分辨率 <a href="https://developer.android.google.cn/reference/android/util/Size?hl=zh-cn"><code>Size</code></a>。例如，自然屏幕方向为纵向并采用自然目标旋转角度的设备如果请求纵向图片，可指定 480x640；而同一设备旋转 90 度并以横向屏幕方向为目标后，可指定 640x480。</p><p>目标分辨率会尝试制定图片分辨率的下限。实际的图片分辨率是最接近的可用分辨率，其大小不小于由摄像头实现所决定的目标分辨率。</p><p>但是，如果不存在等于或大于目标分辨率的分辨率，就会从小于目标分辨率的可用分辨率中选择最接近的一个。与提供的 <code>Size</code> 具有相同宽高比的分辨率，其优先级高于具有不同宽高比的分辨率。</p><p>CameraX 会根据请求应用最合适的分辨率。如果主要需求是满足宽高比要求，则仅指定 <code>setTargetAspectRatio</code>，CameraX 会根据设备确定合适的特定分辨率。 如果应用的主要需求是指定分辨率以提高图片处理效率（例如根据设备处理能力处理较小或中等大小的图片），请使用 <code>setTargetResolution(Size resolution)</code>。</p><p><strong>注意：</strong>如果使用 <code>setTargetResolution()</code>，可能会得到宽高比与其他用例不匹配的缓冲区。如果宽高比必须匹配，请检查两个用例返回的缓冲区尺寸，然后剪裁或缩放其中一个以与另一个匹配。</p><p>如果您的应用需要精确的分辨率，请参阅 <a href="https://developer.android.google.cn/reference/android/hardware/camera2/CameraDevice?hl=zh-cn#regular-capture"><code>createCaptureSession()</code></a> 内的表格，以确定每个硬件级别支持的最大分辨率。如需查看当前设备支持的特定分辨率，请参阅 <a href="https://developer.android.google.cn/reference/android/hardware/camera2/params/StreamConfigurationMap?hl=zh-cn#getOutputSizes(int)"><code>StreamConfigurationMap.getOutputSizes(int)</code></a>。</p><p>如果您的应用在 Android 10 或更高版本上运行，您可以使用 <a href="https://developer.android.google.cn/reference/android/hardware/camera2/CameraDevice?hl=zh-cn#isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)"><code>isSessionConfigurationSupported()</code></a> 验证特定的 <code>SessionConfiguration</code>。</p><h3 id="控制摄像头输出"><a href="#控制摄像头输出" class="headerlink" title="控制摄像头输出"></a>控制摄像头输出</h3><p>CameraX 不仅让您可以视需要为每个单独的用例配置摄像头输出，还实现了以下接口，从而支持所有绑定用例中通用的摄像头操作：</p><ul><li>利用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraControl?hl=zh-cn"><code>CameraControl</code></a>，您可以配置通用摄像头功能。</li><li>利用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraInfo?hl=zh-cn"><code>CameraInfo</code></a>，您可以查询这些通用摄像头功能的状态。</li></ul><p>以下是 CameraControl 支持的摄像头功能：</p><ul><li>变焦</li><li>手电筒</li><li>对焦和测光（点按即可对焦）</li><li>曝光补偿</li></ul><h4 id="获取-CameraControl-和-CameraInfo-的实例"><a href="#获取-CameraControl-和-CameraInfo-的实例" class="headerlink" title="获取 CameraControl 和 CameraInfo 的实例"></a>获取 CameraControl 和 CameraInfo 的实例</h4><p>使用 <a href="https://developer.android.google.cn/reference/androidx/camera/lifecycle/ProcessCameraProvider?hl=zh-cn"><code>ProcessCameraProvider.bindToLifecycle()</code></a> 返回的 <a href="https://developer.android.google.cn/reference/androidx/camera/core/Camera?hl=zh-cn"><code>Camera</code></a> 对象检索 <code>CameraControl</code> 和 <code>CameraInfo</code> 的实例。 以下代码展示了一个示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> camera = processCameraProvider.bindToLifecycle(lifecycleOwner, cameraSelector, preview)</span><br><span class="line"></span><br><span class="line"><span class="comment">// For performing operations that affect all outputs.</span></span><br><span class="line"><span class="keyword">val</span> cameraControl = camera.cameraControl</span><br><span class="line"><span class="comment">// For querying information and states.</span></span><br><span class="line"><span class="keyword">val</span> cameraInfo = camera.cameraInfo</span><br></pre></td></tr></table></figure><p>例如，您可以在调用 <code>bindToLifecycle()</code> 后提交变焦操作及其他 <code>CameraControl</code> 操作。如果您停止或销毁用于绑定摄像头实例的 activity，<code>CameraControl</code> 无法再执行操作，并且会返回失败的 <code>ListenableFuture</code>。</p><p><strong>注意：</strong>如果 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner?hl=zh-cn"><code>LifecycleOwner</code></a> 被停止或销毁，<code>Camera</code> 就会关闭，之后变焦、手电筒、对焦和测光以及曝光补偿控件的所有状态更改均会还原成默认值。</p><h4 id="对焦和测光"><a href="#对焦和测光" class="headerlink" title="对焦和测光"></a>对焦和测光</h4><p><a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraControl?hl=zh-cn#setExposureCompensationIndex(int)"><code>CameraControl.startFocusAndMetering()</code></a> 可根据指定的 FocusMeteringAction 设置 AF&#x2F;AE&#x2F;AWB 测光区域，以触发自动对焦和曝光测光。有许多摄像头应用通过这种方式实现“点按对焦”功能。</p><p><strong>MeteringPoint</strong></p><p>首先，使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/MeteringPointFactory#createPoint(float,%20float,%20float)"><code>MeteringPointFactory.createPoint(float x, float y, float size)</code></a> 创建 <a href="https://developer.android.google.cn/reference/androidx/camera/core/MeteringPoint?hl=zh-cn"><code>MeteringPoint</code></a>。 <code>MeteringPoint</code> 表示摄像头 <a href="https://developer.android.google.cn/reference/android/view/Surface?hl=zh-cn"><code>Surface</code></a> 上的单个点。它以标准化形式存储，所以能轻松转换为传感器坐标，从而用于指定 AF&#x2F;AE&#x2F;AWB 区域。</p><p><code>MeteringPoint</code> 的大小介于 0 到 1 之间，默认大小为 0.15f。调用 <code>MeteringPointFactory.createPoint(float x, float y, float size)</code> 时，CameraX 会为提供的 <code>size</code> 创建以 <code>(x, y)</code> 为中心的矩形区域。</p><p>下面的代码演示了如何创建 <code>MeteringPoint</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use PreviewView.getMeteringPointFactory if PreviewView is used for preview.</span></span><br><span class="line">previewView.setOnTouchListener((view, motionEvent) -&gt;  &#123;</span><br><span class="line"><span class="keyword">val</span> meteringPoint = previewView.meteringPointFactory</span><br><span class="line">    .createPoint(motionEvent.x, motionEvent.y)</span><br><span class="line">…</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use DisplayOrientedMeteringPointFactory if SurfaceView / TextureView is used for</span></span><br><span class="line"><span class="comment">// preview. Please note that if the preview is scaled or cropped in the View,</span></span><br><span class="line"><span class="comment">// it’s the application&#x27;s responsibility to transform the coordinates properly</span></span><br><span class="line"><span class="comment">// so that the width and height of this factory represents the full Preview FOV.</span></span><br><span class="line"><span class="comment">// And the (x,y) passed to create MeteringPoint might need to be adjusted with</span></span><br><span class="line"><span class="comment">// the offsets.</span></span><br><span class="line"><span class="keyword">val</span> meteringPointFactory = DisplayOrientedMeteringPointFactory(</span><br><span class="line">     surfaceView.display,</span><br><span class="line">     camera.cameraInfo,</span><br><span class="line">     surfaceView.width,</span><br><span class="line">     surfaceView.height</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use SurfaceOrientedMeteringPointFactory if the point is specified in</span></span><br><span class="line"><span class="comment">// ImageAnalysis ImageProxy.</span></span><br><span class="line"><span class="keyword">val</span> meteringPointFactory = SurfaceOrientedMeteringPointFactory(</span><br><span class="line">     imageWidth,</span><br><span class="line">     imageHeight,</span><br><span class="line">     imageAnalysis)</span><br></pre></td></tr></table></figure><p><strong>startFocusAndMetering 和 FocusMeteringAction</strong></p><p>如需调用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraControl?hl=zh-cn#startFocusAndMetering(androidx.camera.core.FocusMeteringAction)"><code>startFocusAndMetering()</code></a>，应用必须构建 <a href="https://developer.android.google.cn/reference/androidx/camera/core/FocusMeteringAction?hl=zh-cn"><code>FocusMeteringAction</code></a>，其中包含一个或多个 <code>MeteringPoints</code>，后者由 <a href="https://developer.android.google.cn/reference/androidx/camera/core/FocusMeteringAction?hl=zh-cn#FLAG_AF"><code>FLAG_AF</code></a>、<a href="https://developer.android.google.cn/reference/androidx/camera/core/FocusMeteringAction?hl=zh-cn#FLAG_AE"><code>FLAG_AE</code></a>、<a href="https://developer.android.google.cn/reference/androidx/camera/core/FocusMeteringAction?hl=zh-cn#FLAG_AWB"><code>FLAG_AWB</code></a> 这些可选测光模式组合而成。下面的代码演示了这一用法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> meteringPoint1 = meteringPointFactory.createPoint(x1, x1)</span><br><span class="line"><span class="keyword">val</span> meteringPoint2 = meteringPointFactory.createPoint(x2, y2)</span><br><span class="line"><span class="keyword">val</span> action = FocusMeteringAction.Builder(meteringPoint1) <span class="comment">// default AF|AE|AWB</span></span><br><span class="line">      <span class="comment">// Optionally add meteringPoint2 for AF/AE.</span></span><br><span class="line">      .addPoint(meteringPoint2, FLAG_AF | FLAG_AE)</span><br><span class="line">      <span class="comment">// The action is canceled in 3 seconds (if not set, default is 5s).</span></span><br><span class="line">      .setAutoCancelDuration(<span class="number">3</span>, TimeUnit.SECONDS)</span><br><span class="line">      .build()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> result = cameraControl.startFocusAndMetering(action)</span><br><span class="line"><span class="comment">// Adds listener to the ListenableFuture if you need to know the focusMetering result.</span></span><br><span class="line">result.addListener(&#123;</span><br><span class="line">   <span class="comment">// result.get().isFocusSuccessful returns if the auto focus is successful or not.</span></span><br><span class="line">&#125;, ContextCompat.getMainExecutor(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><p>如上面的代码所示，<a href="https://developer.android.google.cn/reference/androidx/camera/core/CameraControl?hl=zh-cn#startFocusAndMetering(androidx.camera.core.FocusMeteringAction)"><code>startFocusAndMetering()</code></a> 接受一个 <code>FocusMeteringAction</code>，后者包含一个用于 AF&#x2F;AE&#x2F;AWB 测光区域的 <code>MeteringPoint</code>，以及另一个仅用于 AF 和 AE 的 MeteringPoint。</p><p>在内部，CameraX 会将其转换为 Camera2 <a href="https://developer.android.google.cn/reference/android/hardware/camera2/params/MeteringRectangle?hl=zh-cn"><code>MeteringRectangles</code></a>，并将相应的 <a href="https://developer.android.google.cn/reference/android/hardware/camera2/CaptureRequest?hl=zh-cn#CONTROL_AF_REGIONS"><code>CONTROL_AF_REGIONS</code></a>&#x2F;<a href="https://developer.android.google.cn/reference/android/hardware/camera2/CaptureRequest?hl=zh-cn#CONTROL_AE_REGIONS"><code>CONTROL_AE_REGIONS</code></a>&#x2F;<a href="https://developer.android.google.cn/reference/android/hardware/camera2/CaptureRequest?hl=zh-cn#CONTROL_AWB_REGIONS"><code>CONTROL_AWB_REGIONS</code></a> 参数设置为拍摄请求。</p><p>由于并非所有设备都支持 AF&#x2F;AE&#x2F;AWB 和多个区域，CameraX 会尽最大努力执行 <code>FocusMeteringAction</code>。CameraX 会使用所支持的最大数量的 MeteringPoint，并按测光点的添加顺序依次使用。对于在超出支持的最大数量之外添加的所有 MeteringPoint，CameraX 会一律忽略。例如，如果您在仅支持 2 个 MeteringPoint 的平台上为 <code>FocusMeteringAction</code> 提供 3 个 MeteringPoint，那么 CameraX 只会使用前 2 个 MeteringPoint，并忽略最后一个 <code>MeteringPoint</code>。</p><h2 id="图像分析"><a href="#图像分析" class="headerlink" title="图像分析"></a>图像分析</h2><p><a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Analyzer?hl=zh-cn#analyze(androidx.camera.core.ImageProxy)">图像分析</a>用例为您的应用提供可供 CPU 访问的图像，您可以对这些图像执行图像处理、计算机视觉或机器学习推断。应用会实现对每个帧运行的 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Analyzer?hl=zh-cn#analyze(androidx.camera.core.ImageProxy)"><code>analyze()</code></a> 方法。</p><p>如需了解如何将 Google 的机器学习套件与 CameraX 应用集成，请参阅<a href="https://developer.android.google.cn/training/camerax/mlkitanalyzer?hl=zh-cn">机器学习套件分析器</a>。</p><h3 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h3><p>当应用的分析流水线无法满足 CameraX 的帧速率要求时，您可以将 CameraX 配置为通过以下其中一种方式丢帧：</p><ul><li><strong>非阻塞</strong>（默认）：在该模式下，执行器始终会将最新的图像缓存到图像缓冲区（与深度为 1 的队列相似），与此同时，应用会分析上一个图像。如果 CameraX 在应用完成处理之前收到新图像，则新图像会保存到同一缓冲区，并覆盖上一个图像。 请注意，在这种情况下，<code>ImageAnalysis.Builder.setImageQueueDepth()</code> 不起任何作用，缓冲区内容始终会被覆盖。您可以通过使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis?hl=zh-cn#STRATEGY_KEEP_ONLY_LATEST"><code>STRATEGY_KEEP_ONLY_LATEST</code></a> 调用 <code>setBackpressureStrategy()</code> 来启用该非阻塞模式。如需详细了解执行器的相关影响，请参阅 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis?hl=zh-cn#STRATEGY_KEEP_ONLY_LATEST"><code>STRATEGY_KEEP_ONLY_LATEST</code></a> 的参考文档。</li><li><strong>阻塞</strong>：在该模式下，内部执行器可以向内部图像队列添加多个图像，并仅在队列已满时才开始丢帧。系统会在整个相机设备上进行屏蔽：如果相机设备具有多个绑定用例，那么在 CameraX 处理这些图像时，系统会屏蔽所有这些用例。例如，如果预览和图像分析都已绑定到某个相机设备，那么在 CameraX 处理图像时，系统也会屏蔽相应预览。您可以通过将 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis?hl=zh-cn#strategy_block_producer"><code>STRATEGY_BLOCK_PRODUCER</code></a> 传递到 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setBackpressureStrategy(int)"><code>setBackpressureStrategy()</code></a> 来启用阻塞模式。此外，您还可以通过使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setImageQueueDepth(int)">ImageAnalysis.Builder.setImageQueueDepth()</a> 来配置图像队列深度。</li></ul><p>如果分析器延迟低且性能高，在这种情况下用于分析图像的总时间低于 CameraX 帧的时长（例如，60fps 用时 16 毫秒），那么上述两种操作模式均可提供顺畅的总体体验。在某些情况下，阻塞模式仍非常有用，例如在处理非常短暂的系统抖动时。</p><p>如果分析器延迟高且性能高，则需要结合使用阻塞模式和较长的队列来抵补延迟。但请注意，在这种情况下，应用仍可以处理所有帧。</p><p>如果分析器延迟高且耗时长（分析器无法处理所有帧），非阻塞模式可能更为适用，因为在这种情况下，系统必须针对分析路径进行丢帧，但要让其他同时绑定的用例仍能看到所有帧。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>如需在您的应用中使用图像分析，请按以下步骤操作：</p><ul><li>构建 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis?hl=zh-cn"><code>ImageAnalysis</code></a> 用例。</li><li>创建 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Analyzer?hl=zh-cn"><code>ImageAnalysis.Analyzer</code></a>。</li><li><a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis#setAnalyzer(java.util.concurrent.Executor,%20androidx.camera.core.ImageAnalysis.Analyzer)">将分析器设为</a> <code>ImageAnalysis</code>。</li><li>将生命周期所有者、相机选择器和 <code>ImageAnalysis</code> 用例<a href="https://developer.android.google.cn/reference/androidx/camera/lifecycle/ProcessCameraProvider#bindToLifecycle(androidx.lifecycle.LifecycleOwner,%20androidx.camera.core.CameraSelector,%20androidx.camera.core.UseCase...)">绑定</a>到生命周期。</li></ul><p>绑定后，CameraX 会立即将图像发送到已注册的分析器。 完成分析后，调用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis?hl=zh-cn#clearAnalyzer()"><code>ImageAnalysis.clearAnalyzer()</code></a> 或解除绑定 <code>ImageAnalysis</code> 用例以停止分析。</p><h4 id="构建-ImageAnalysis-用例"><a href="#构建-ImageAnalysis-用例" class="headerlink" title="构建 ImageAnalysis 用例"></a>构建 ImageAnalysis 用例</h4><p><a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis?hl=zh-cn"><code>ImageAnalysis</code></a> 可将分析器（图像使用方）连接到 CameraX（图像生成方）。应用可以使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn"><code>ImageAnalysis.Builder</code></a> 来构建 <code>ImageAnalysis</code> 对象。借助 <code>ImageAnalysis.Builder</code>，应用可以进行以下配置：</p><ul><li>图像输出参数：<ul><li>格式：CameraX 可通过 <a href="https://developer.android.google.cn/reference/kotlin/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setOutputImageFormat(kotlin.Int)"><code>setOutputImageFormat(int)</code></a> 支持 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis?hl=zh-cn#OUTPUT_IMAGE_FORMAT_YUV_420_888"><code>YUV_420_888</code></a> 和 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis?hl=zh-cn#OUTPUT_IMAGE_FORMAT_RGBA_8888"><code>RGBA_8888</code></a>。默认格式为 <code>YUV_420_888</code>。</li><li><a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setTargetResolution(android.util.Size)">Resolution</a> 和 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setTargetAspectRatio(int)">AspectRatio</a>：您可以设置其中一个参数，但请注意，您不能同时设置这两个值。</li><li><a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setTargetRotation(int)">旋转角度</a>。</li><li><a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setTargetName(java.lang.String)">目标名称</a>：使用该参数进行调试。</li></ul></li><li>图像流控制：<ul><li><a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setBackgroundExecutor(java.util.concurrent.Executor)">后台执行器</a></li><li><a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setImageQueueDepth(int)">图像队列深度（分析器和 CamaraX 之间）</a></li><li><a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setBackpressureStrategy(int)">背压策略</a></li></ul></li></ul><p>应用可以设置分辨率或宽高比，但不能同时设置这两个值。确切的输出分辨率取决于应用请求的大小（或宽高比）和硬件功能，并可能与请求的大小或宽高比不同。如需了解分辨率匹配算法，请参阅有关 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Builder?hl=zh-cn#setTargetResolution(android.util.Size)"><code>setTargetResolution()</code></a> 的文档</p><p>应用可以将输出图像像素配置为采用 YUV（默认）或 RGBA 颜色空间。设置 RGBA 输出格式时，CameraX 会在内部将图像从 YUV 颜色空间转换为 RGBA 颜色空间，并将图像位打包到 ImageProxy 第一个平面（其他两个平面未使用）的 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageProxy.PlaneProxy?hl=zh-cn#getBuffer()"><code>ByteBuffer</code></a> 中，序列如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ImageProxy<span class="selector-class">.getPlanes</span>()<span class="selector-attr">[0]</span><span class="selector-class">.buffer</span><span class="selector-attr">[0]</span>: alpha</span><br><span class="line">ImageProxy<span class="selector-class">.getPlanes</span>()<span class="selector-attr">[0]</span><span class="selector-class">.buffer</span><span class="selector-attr">[1]</span>: red</span><br><span class="line">ImageProxy<span class="selector-class">.getPlanes</span>()<span class="selector-attr">[0]</span><span class="selector-class">.buffer</span><span class="selector-attr">[2]</span>: green</span><br><span class="line">ImageProxy<span class="selector-class">.getPlanes</span>()<span class="selector-attr">[0]</span><span class="selector-class">.buffer</span><span class="selector-attr">[3]</span>: blue</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在执行设备无法满足帧速率要求的复杂图像分析时，您可以使用本主题的<a href="https://developer.android.google.cn/training/camerax/analyze?hl=zh-cn#operating_modes">操作模式</a>部分所述的策略将 CameraX 配置为丢帧。</p><h4 id="创建分析器"><a href="#创建分析器" class="headerlink" title="创建分析器"></a>创建分析器</h4><p>应用可以通过实现 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Analyzer?hl=zh-cn"><code>ImageAnalysis.Analyzer</code></a> 接口并替换 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis.Analyzer?hl=zh-cn#analyze(androidx.camera.core.ImageProxy)"><code>analyze(ImageProxy image)</code></a> 来创建分析器。 在每个分析器中，应用都会收到一个 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageProxy?hl=zh-cn"><code>ImageProxy</code></a>，它是 <a href="https://developer.android.google.cn/reference/android/media/Image?hl=zh-cn">Media.Image</a> 的封装容器。可以使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageProxy?hl=zh-cn#getFormat()"><code>ImageProxy.getFormat()</code></a> 来查询图像格式。该格式使用应用通过 <code>ImageAnalysis.Builder</code> 提供的以下值之一表示：</p><ul><li>如果应用请求了 <code>OUTPUT_IMAGE_FORMAT_RGBA_8888</code>，则为 <code>ImageFormat.RGBA_8888</code>。</li><li>如果应用请求了 <code>OUTPUT_IMAGE_FORMAT_YUV_420_888</code>，则为 <code>ImageFormat.YUV_420_888</code>。</li></ul><p>如需了解颜色空间配置以及可检索像素字节的位置，请参阅<a href="https://developer.android.google.cn/training/camerax/analyze?hl=zh-cn#build_imageanalysis_use_case">构建 ImageAnalysis 用例</a>。</p><p>在分析器中，应用应执行以下操作：</p><ol><li>尽快分析给定的帧，最好在给定的帧速率时间限制内进行分析（例如，如果帧速率为 30 fps，则用时应低于 32 毫秒）。如果应用无法足够快地分析帧，请考虑采用一种<a href="https://developer.android.google.cn/training/camerax/analyze?hl=zh-cn#operating_modes">受支持的丢帧机制</a>。</li><li>通过调用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageProxy?hl=zh-cn#close()"><code>ImageProxy.close()</code></a> 将 <code>ImageProxy</code> 发布到 CameraX。请注意，您不应调用已封装 Media.Image 的 close 函数 (<code>Media.Image.close()</code>)。</li></ol><p>应用可以直接使用 ImageProxy 中的已封装 <code>Media.Image</code>。 请不要对已封装的图像调用 <code>Media.Image.close()</code>，因为这会破坏 CameraX 中的图像分享机制；请改为使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageProxy?hl=zh-cn#close()"><code>ImageProxy.close()</code></a> 将底层 <code>Media.Image</code> 发布到 CameraX。</p><h4 id="针对-ImageAnalysis-配置分析器"><a href="#针对-ImageAnalysis-配置分析器" class="headerlink" title="针对 ImageAnalysis 配置分析器"></a>针对 ImageAnalysis 配置分析器</h4><p>创建分析器后，使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis#setAnalyzer(java.util.concurrent.Executor,%20androidx.camera.core.ImageAnalysis.Analyzer)"><code>ImageAnalysis.setAnalyzer()</code></a> 注册该分析器以开始分析。完成分析后，使用 <a href="https://developer.android.google.cn/reference/androidx/camera/core/ImageAnalysis?hl=zh-cn#clearAnalyzer()"><code>ImageAnalysis.clearAnalyzer()</code></a> 移除已注册的分析器。</p><p>您只能将一个分析器配置为活动状态，用于分析图像。调用 <code>ImageAnalysis.setAnalyzer()</code> 会替换已注册的分析器（如果已存在该分析器）。应用可以在绑定用例之前或之后随时设置新的分析器。</p><h4 id="将-ImageAnalysis-绑定到生命周期"><a href="#将-ImageAnalysis-绑定到生命周期" class="headerlink" title="将 ImageAnalysis 绑定到生命周期"></a>将 ImageAnalysis 绑定到生命周期</h4><p><strong>注意</strong>：该步骤适用于所有 CameraX 用例。如需详细了解绑定和生命周期自定义，请参阅 <a href="https://developer.android.google.cn/training/camerax/architecture?hl=zh-cn#api-model">CameraX API 模型</a>。</p><p>强烈建议您使用 <a href="https://developer.android.google.cn/reference/androidx/camera/lifecycle/ProcessCameraProvider#bindToLifecycle(androidx.lifecycle.LifecycleOwner,%20androidx.camera.core.CameraSelector,%20androidx.camera.core.UseCase...)"><code>ProcessCameraProvider.bindToLifecycle()</code></a> 函数将 <code>ImageAnalysis</code> 绑定到现有的 AndroidX 生命周期。请注意，<code>bindToLifecycle()</code> 函数会返回选定的 <a href="https://developer.android.google.cn/reference/androidx/camera/core/Camera?hl=zh-cn"><code>Camera</code></a> 设备，该函数可用于微调曝光等高级设置。如需详细了解如何控制相机输出，请参阅<a href="https://developer.android.google.cn/training/camerax/configuration?hl=zh-cn#camera-output">此指南</a>。</p><p>以下示例结合了上述步骤中的所有操作，将 CameraX <code>ImageAnalysis</code> 和 <code>Preview</code> 用例绑定到了 <code>lifeCycle</code> 所有者：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> imageAnalysis = ImageAnalysis.Builder()</span><br><span class="line">    <span class="comment">// enable the following line if RGBA output is needed.</span></span><br><span class="line">    <span class="comment">// .setOutputImageFormat(ImageAnalysis.OUTPUT_IMAGE_FORMAT_RGBA_8888)</span></span><br><span class="line">    .setTargetResolution(Size(<span class="number">1280</span>, <span class="number">720</span>))</span><br><span class="line">    .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)</span><br><span class="line">    .build()</span><br><span class="line">imageAnalysis.setAnalyzer(executor, ImageAnalysis.Analyzer &#123; imageProxy -&gt;</span><br><span class="line">    <span class="keyword">val</span> rotationDegrees = imageProxy.imageInfo.rotationDegrees</span><br><span class="line">    <span class="comment">// insert your code here.</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// after done, release the ImageProxy object</span></span><br><span class="line">    imageProxy.close()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">cameraProvider.bindToLifecycle(<span class="keyword">this</span> <span class="keyword">as</span> LifecycleOwner, cameraSelector, imageAnalysis, preview)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.google.cn/training/camerax">Android CameraX</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> CameraX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> CameraX </tag>
            
            <tag> Jetpack </tag>
            
            <tag> 相机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 sourceSets 管理风味特定的 AndroidManifest.xml</title>
      <link href="/post/b3b8a43c/"/>
      <url>/post/b3b8a43c/</url>
      
        <content type="html"><![CDATA[<p>当使用 <code>sourceSets</code> 管理风味特定的 <code>AndroidManifest.xml</code> 配置时，下面是一个基本的代码示例</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">|<span class="string">-- src/</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|<span class="string">-- main/</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|<span class="string">   </span>|<span class="string">-- AndroidManifest.xml (包含公用配置)</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|<span class="string">   </span>|<span class="string">-- java/</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|<span class="string">   </span>|<span class="string">-- res/</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|</span><br><span class="line">|<span class="string">   </span>|<span class="string">-- xiaomi/</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|<span class="string">   </span>|<span class="string">-- AndroidManifest.xml (风味特定配置)</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|</span><br><span class="line">|<span class="string">   </span>|<span class="string">-- other/</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|<span class="string">   </span>|<span class="string">-- AndroidManifest.xml (风味特定配置)</span></span><br><span class="line"><span class="string"></span>|<span class="string">   </span>|</span><br><span class="line">|<span class="string">   </span>|<span class="string">-- ...</span></span><br></pre></td></tr></table></figure><h2 id="app-build-gradle"><a href="#app-build-gradle" class="headerlink" title="app&#x2F;build.gradle"></a>app&#x2F;build.gradle</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    <span class="comment">// ... 其他配置 ...</span></span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        xiaomi &#123;</span><br><span class="line">            <span class="comment">// 指定风味特定的 AndroidManifest.xml 文件</span></span><br><span class="line">            manifest.srcFile <span class="string">&#x27;src/xiaomi/AndroidManifest.xml&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        other &#123;</span><br><span class="line">            <span class="comment">// 指定另一个风味特定的 AndroidManifest.xml 文件</span></span><br><span class="line">            manifest.srcFile <span class="string">&#x27;src/other/AndroidManifest.xml&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="src-main-AndroidManifest-xml（公用配置）"><a href="#src-main-AndroidManifest-xml（公用配置）" class="headerlink" title="src&#x2F;main&#x2F;AndroidManifest.xml（公用配置）"></a>src&#x2F;main&#x2F;AndroidManifest.xml（公用配置）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 公用配置项 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="src-xiaomi-AndroidManifest-xml（风味特定配置）"><a href="#src-xiaomi-AndroidManifest-xml（风味特定配置）" class="headerlink" title="src&#x2F;xiaomi&#x2F;AndroidManifest.xml（风味特定配置）"></a>src&#x2F;xiaomi&#x2F;AndroidManifest.xml（风味特定配置）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 风味特定配置项 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="src-other-AndroidManifest-xml（另一个风味特定配置）"><a href="#src-other-AndroidManifest-xml（另一个风味特定配置）" class="headerlink" title="src&#x2F;other&#x2F;AndroidManifest.xml（另一个风味特定配置）"></a>src&#x2F;other&#x2F;AndroidManifest.xml（另一个风味特定配置）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xmlCopy code</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 另一个风味特定配置项 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，我们在 <code>sourceSets</code> 中分别为 <code>xiaomi</code> 和 <code>other</code> 风味指定了不同的 <code>AndroidManifest.xml</code> 文件。每个风味的配置将会覆盖默认的 <code>main</code> 文件夹下的 <code>AndroidManifest.xml</code> 文件中相应的部分。</p><p>通过这种方式，可以灵活地管理不同风味的配置，并确保风味特定的配置能够正确地被应用，同时保留公用的配置。可以实际需求进行相应的调整和定制。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在 <code>sourceSets</code> 中使用 <code>manifest.srcFile</code> 可以将风味特定的 <code>AndroidManifest.xml</code> 文件替换默认的清单文件。</p><p>如果在指定的风味特定清单文件中未定义的部分，将会从 <code>main</code> 文件夹下的默认 <code>AndroidManifest.xml</code> 文件进行合并。</p><p>针对风味特定的配置，将配置放在 <code>xiaomi</code> 或 <code>other</code> 文件夹下的风味特定 <code>AndroidManifest.xml</code> 文件中。</p><p>对于公用配置，保留在 <code>main</code> 文件夹下的默认 <code>AndroidManifest.xml</code> 文件中。</p><p>再说一下 <code>sourceSets</code>的常用配置，具体看下面代码示例</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        xiaomi &#123;</span><br><span class="line">            <span class="comment">// xiaomi的配置</span></span><br><span class="line">        &#125;</span><br><span class="line">        other &#123;</span><br><span class="line">            <span class="comment">// other的配置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更多风味...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        xiaomi &#123;</span><br><span class="line">            <span class="comment">// 这里指定xiaomi的源代码和资源路径</span></span><br><span class="line">          java.srcDirs = [<span class="string">&#x27;src/xiaomi/java&#x27;</span>]</span><br><span class="line">          res.srcDirs = [<span class="string">&#x27;src/xiaomi/res&#x27;</span>]</span><br><span class="line">          assets.srcDirs = [<span class="string">&#x27;src/xiaomi/assets&#x27;</span>]</span><br><span class="line">            manifest.srcFile <span class="string">&#x27;src/xiaomi/AndroidManifest.xml&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        other &#123;</span><br><span class="line">            <span class="comment">// 这里指定other的源代码和资源路径</span></span><br><span class="line">          java.srcDirs = [<span class="string">&#x27;src/xiaomi/java&#x27;</span>]</span><br><span class="line">          res.srcDirs = [<span class="string">&#x27;src/other/res&#x27;</span>]</span><br><span class="line">          assets.srcDirs = [<span class="string">&#x27;src/other/assets&#x27;</span>]</span><br><span class="line">            manifest.srcFile <span class="string">&#x27;src/other/AndroidManifest.xml&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更多风味...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> AndroidManifest </category>
          
          <category> sourceSets </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidManifest </tag>
            
            <tag> sourceSets </tag>
            
            <tag> productFlavors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【自定义 View】相机预览点击聚焦框(带对焦动画，曝光调整)</title>
      <link href="/post/779b2eb0/"/>
      <url>/post/779b2eb0/</url>
      
        <content type="html"><![CDATA[<p><img style='width: auto;    max-width: 100%;    border-radius: 12px;    display: block;    margin: 20px auto;    object-fit: contain;    box-shadow: 2px 4px 7px #999;' src='https://bu.dusays.com/2023/08/10/64d45dba73c3c.webp'><br>&emsp;&emsp;时隔十个月，今天再次来分享项目中使用到的自定义View，话不多说，直接开始，主要在相机预览的时候点击预览界面对焦时使用，并增加了对焦动画，可调节曝光。可以设置曝光的上限和下限，用于调整曝光时回调，点击后无操作5秒后隐藏。总的来说就是这些，下面开始上代码</p><h2 id="对焦框"><a href="#对焦框" class="headerlink" title="对焦框"></a>对焦框</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMeasure</span><span class="params">(widthMeasureSpec: <span class="type">Int</span>, heightMeasureSpec: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec)</span><br><span class="line">    <span class="keyword">val</span> width = MeasureSpec.getSize(widthMeasureSpec)</span><br><span class="line">    <span class="keyword">val</span> height = MeasureSpec.getSize(heightMeasureSpec)</span><br><span class="line">    frameRadius = width / <span class="number">5f</span></span><br><span class="line">    frameRectF.left = (width / <span class="number">2f</span>) - frameRadius</span><br><span class="line">    frameRectF.right = (width / <span class="number">2f</span>) + frameRadius</span><br><span class="line">    frameRectF.top = (height / <span class="number">2f</span>) - frameRadius</span><br><span class="line">    frameRectF.bottom = (height / <span class="number">2f</span>) + frameRadius</span><br><span class="line">    _14 = frameRectF.height() / <span class="number">4f</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">    canvas?.apply &#123;</span><br><span class="line">        <span class="keyword">val</span> points = floatArrayOf(</span><br><span class="line">        frameRectF.left, frameRectF.top, frameRectF.left, frameRectF.top + _14,</span><br><span class="line">        frameRectF.left, frameRectF.top, frameRectF.left + _14, frameRectF.top,</span><br><span class="line">        frameRectF.left, frameRectF.bottom, frameRectF.left, frameRectF.bottom - _14,</span><br><span class="line">        frameRectF.left, frameRectF.bottom, frameRectF.left + _14, frameRectF.bottom,</span><br><span class="line">        frameRectF.right, frameRectF.top, frameRectF.right, frameRectF.top + _14,</span><br><span class="line">        frameRectF.right, frameRectF.top, frameRectF.right - _14, frameRectF.top,</span><br><span class="line">        frameRectF.right, frameRectF.bottom, frameRectF.right, frameRectF.bottom - _14,</span><br><span class="line">        frameRectF.right, frameRectF.bottom, frameRectF.right - _14, frameRectF.bottom)</span><br><span class="line">        drawLines(points, framePaint)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个对焦框显而易见，其实就是画了八条线，_14是用来控制边框线条的长度的，想要边框间距更近一些，就改成<br><code>_14 = frameRectF.height() / 3f</code></p><h2 id="小太阳"><a href="#小太阳" class="headerlink" title="小太阳"></a>小太阳</h2><h3 id="1-按住显示的直线"><a href="#1-按住显示的直线" class="headerlink" title="1.按住显示的直线"></a>1.按住显示的直线</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">    canvas?.apply &#123;</span><br><span class="line">        <span class="comment">// 画直线</span></span><br><span class="line">        <span class="keyword">if</span> (showLine) &#123;</span><br><span class="line">            <span class="keyword">if</span> (circleY != circleRadius + dp8) &#123;</span><br><span class="line">                drawLine(centerOfCircle, <span class="number">0f</span>, centerOfCircle, (height * progress) - (circleRadius) - dp10, sunPaint)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (circleY != height - (circleRadius) - dp8) &#123;</span><br><span class="line">                drawLine(centerOfCircle, (height * progress) + (circleRadius) + dp10, centerOfCircle, height * <span class="number">1f</span>, sunPaint)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint(<span class="string">&quot;ClickableViewAccessibility&quot;</span>)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    event?.let &#123; ev -&gt;</span><br><span class="line">        <span class="keyword">when</span> (ev.action) &#123;</span><br><span class="line">            MotionEvent.ACTION_DOWN -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (circleY &lt; <span class="number">0f</span>) &#123;</span><br><span class="line">                    circleY = height * progress</span><br><span class="line">                    lastCircleY = circleY</span><br><span class="line">                &#125;</span><br><span class="line">                posY = event.y</span><br><span class="line">                paintColor = Color.WHITE</span><br><span class="line">            &#125;</span><br><span class="line">            MotionEvent.ACTION_MOVE -&gt; &#123;</span><br><span class="line">                curPosY = event.y</span><br><span class="line">                paintColor = Color.WHITE</span><br><span class="line">                <span class="keyword">if</span> ((curPosY - posY &gt; <span class="number">0</span>) || (curPosY - posY &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">                    showLine = <span class="literal">true</span></span><br><span class="line">                    invalidate()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -&gt; &#123;</span><br><span class="line">                showLine = <span class="literal">false</span></span><br><span class="line">                invalidate()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;直线受<code>showLine</code>影响显示或隐藏，<code>showLine</code>会在手指移动的时候会修改为<code>true</code>，这个时候就会显示小太阳后的直线；<code>circleY</code>是记录小太阳y轴的位置，而<code>(circleY != circleRadius + dp8)</code>是用来判断当前小太阳是否处于最上方，如果不是的话，就会绘制小太阳上方的直线，<code>(circleY != height - (circleRadius) - dp8)</code>同理，判断是否处于最下方。</p><h3 id="2-小太阳外部"><a href="#2-小太阳外部" class="headerlink" title="2.小太阳外部"></a>2.小太阳外部</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">    canvas?.apply &#123;</span><br><span class="line">        <span class="comment">// 画圆,空心圆</span></span><br><span class="line">        drawCircle(centerOfCircle, height * progress, circleRadius, sunPaint)</span><br><span class="line">        <span class="comment">// 画线条</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> startPointF = calculationPoint(angle - (i * <span class="number">45f</span>), circleRadius + dp3)</span><br><span class="line">            <span class="keyword">val</span> endPointF = calculationPoint(angle - (i * <span class="number">45f</span>), circleRadius + dp5)</span><br><span class="line">            borderWidth = <span class="number">5f</span></span><br><span class="line">            sunPaint.strokeWidth = borderWidth</span><br><span class="line">            canvas.drawLine(startPointF.x, startPointF.y, endPointF.x, endPointF.y, sunPaint)</span><br><span class="line">            borderWidth = <span class="number">3f</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算圆上任意点的坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> angle 角度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> radius 半径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 点坐标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">calculationPoint</span><span class="params">(angle: <span class="type">Float</span>, radius: <span class="type">Float</span>)</span></span>: PointF &#123;</span><br><span class="line">    <span class="keyword">val</span> x = (centerOfCircle) + (radius) * cos(angle * Math.PI / <span class="number">180f</span>).toFloat()</span><br><span class="line">    <span class="keyword">val</span> y = (height * progress) + (radius) * sin(angle * Math.PI / <span class="number">180f</span>).toFloat()</span><br><span class="line">    <span class="keyword">return</span> PointF(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;画空心圆没啥好说的，<code>height * progress</code>其实意义上也就是<code>circleY</code>。至于小太阳上下滑动外部线条也跟着转是不断改变<code>angle</code>，从线条最上面移动到最下面，就是从0到360的变化。不断的改变角度，达到根据手指移动旋转的效果。</p><h3 id="3-小太阳内部"><a href="#3-小太阳内部" class="headerlink" title="3.小太阳内部"></a>3.小太阳内部</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">    canvas?.apply &#123;</span><br><span class="line">        <span class="comment">// 画中间月亮效果</span></span><br><span class="line">        <span class="keyword">if</span> (realProcess &lt; <span class="number">.5f</span>) &#123;</span><br><span class="line">            <span class="comment">// 张弦月</span></span><br><span class="line">            <span class="keyword">val</span> left = centerOfCircle - (((circleRadius - dp2) * <span class="number">2f</span>) * abs(realProcess - <span class="number">0.5f</span>))</span><br><span class="line">            <span class="keyword">val</span> top = (height * progress) - (circleRadius - dp2)</span><br><span class="line">            <span class="keyword">val</span> right = centerOfCircle + (((circleRadius - dp2) * <span class="number">2f</span>) * abs(realProcess - <span class="number">0.5f</span>))</span><br><span class="line">            <span class="keyword">val</span> bottom = (height * progress) + (circleRadius - dp2)</span><br><span class="line">            drawOval(left, top, right, bottom, moonPaint)</span><br><span class="line">            drawArc(centerOfCircle - (circleRadius - dp2), (height * progress) - (circleRadius - dp2),</span><br><span class="line">                centerOfCircle + (circleRadius - dp2), (height * progress) + (circleRadius - dp2),</span><br><span class="line">                <span class="number">90f</span>, <span class="number">180f</span>, <span class="literal">false</span>, moonPaint)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (realProcess == <span class="number">.5f</span>) &#123;</span><br><span class="line">            <span class="comment">// 下弦月</span></span><br><span class="line">            drawArc(centerOfCircle - (circleRadius - dp2), (height * progress) - (circleRadius - dp2),</span><br><span class="line">                centerOfCircle + (circleRadius - dp2), (height * progress) + (circleRadius - dp2),</span><br><span class="line">                <span class="number">90f</span>, <span class="number">180f</span>, <span class="literal">false</span>, moonPaint)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 残月</span></span><br><span class="line">            <span class="keyword">val</span> save = saveLayer(<span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">val</span> left = centerOfCircle - (((circleRadius - dp2) * <span class="number">2f</span>) * abs(realProcess - <span class="number">0.5f</span>))</span><br><span class="line">            <span class="keyword">val</span> top = (height * progress) - (circleRadius - dp2)</span><br><span class="line">            <span class="keyword">val</span> right = centerOfCircle + (((circleRadius - dp2) * <span class="number">2f</span>) * abs(realProcess - <span class="number">0.5f</span>))</span><br><span class="line">            <span class="keyword">val</span> bottom = (height * progress) + (circleRadius - dp2)</span><br><span class="line">            drawArc(centerOfCircle - (circleRadius - dp2 - <span class="number">1</span>), (height * progress) - (circleRadius - dp2 - <span class="number">1</span>),</span><br><span class="line">                centerOfCircle + (circleRadius - dp2 - <span class="number">1</span>), (height * progress) + (circleRadius - dp2 - <span class="number">1</span>),</span><br><span class="line">                <span class="number">90f</span>, <span class="number">180f</span>, <span class="literal">false</span>, moonPaint)</span><br><span class="line">            moonPaint.xfermode = porterDuffDstOut</span><br><span class="line">            drawOval(left, top, right, bottom, moonPaint)</span><br><span class="line">            moonPaint.xfermode = <span class="literal">null</span></span><br><span class="line">            restoreToCount(save)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;小太阳中间的月亮效果是参考了<a href="https://juejin.cn/post/7006142194230755341">蹭中秋热度来了~Android 自定义View——月有阴晴圆缺</a>这个文章，感兴趣的可以去看一下。总的来说，这个月亮主要分为三个部分，残月 &gt; 下弦月 &gt; 张弦月。</p><p>&emsp;&emsp;残月和张弦月的原理是画了一个下弦月，在下弦月的基础上，再画一个椭圆，这个椭圆是高度和下弦月相同，宽度动态向两边延伸的。椭圆的效果如下：</p><p><img style='width: auto;    max-width: 100%;    border-radius: 12px;    display: block;    margin: 20px auto;    object-fit: contain;    box-shadow: 2px 4px 7px #999;' src='https://bu.dusays.com/2023/08/10/64d45e210e7ce.gif'></p><p>&emsp;&emsp;这里放大了整个View，也是为了更加直观的看到椭圆的变化。看到这里就可以明白张弦月其实就是这个椭圆和下弦月叠放在一起的效果，那残月是如何实现的呢，这里用到了<code>PorterDuffXfermode</code>，对于<code>PorterDuffXfermode</code>不了解的可以看下Google的<a href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html">官方文档</a>，文章中用到的是<code>DST_OUT</code>，效果如图：</p><p><img style='width: auto;    max-width: 100%;    border-radius: 12px;    display: block;    margin: 20px auto;    object-fit: contain;    box-shadow: 2px 4px 7px #999;' src='https://bu.dusays.com/2023/08/10/64d45dba39688.png'></p><p>&emsp;&emsp;使用<code>PorterDuff.Mode.DST_OUT</code>将可变化的椭圆和下弦月叠放在一起就实现了残月的效果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;到这里就结束了，那么如何使用呢，代码如下，首先是xml：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;View</span><br><span class="line">        android:id=<span class="string">&quot;@+id/preview_view&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@color/black&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.lazyiones.focussunview.FocusSunView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/focus_sun_view&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;120dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;140dp&quot;</span></span><br><span class="line">        android:visibility=<span class="string">&quot;invisible&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;@+id/preview_view&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;@+id/preview_view&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里一定要把<code>visibility</code>设置为<code>invisible</code>，不然第一次显示无法正常处理宽高，对焦框显示的位置会偏离，<code>preview_view</code>顾名思义就是预览的View。下面是Activity中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> focusSunView = findViewById&lt;FocusSunView&gt;(R.id.focus_sun_view)</span><br><span class="line"></span><br><span class="line">findViewById&lt;View&gt;(R.id.preview_view).setOnTouchListener &#123; _, motionEvent -&gt;</span><br><span class="line">    <span class="keyword">when</span> (motionEvent.action) &#123;</span><br><span class="line">        MotionEvent.ACTION_DOWN -&gt; &#123;</span><br><span class="line">            focusSunView.visibility = View.VISIBLE</span><br><span class="line">            focusSunView.translationX = motionEvent.x - (focusSunView.width / <span class="number">2f</span>)</span><br><span class="line">            focusSunView.translationY = motionEvent.y - (focusSunView.height / <span class="number">2f</span>)</span><br><span class="line">            focusSunView.startCountdown()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span><span class="symbol">@setOnTouchListener</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">focusSunView.setOnExposureChangeListener(<span class="keyword">object</span> : FocusSunView.OnExposureChangeListener &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onExposureChangeListener</span><span class="params">(exposure: <span class="type">Float</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 处理相机曝光</span></span><br><span class="line">        Log.e(<span class="string">&quot;FocusSunView&quot;</span>, <span class="string">&quot;onExposureChangeListener: -----------&gt; <span class="variable">$exposure</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;OK，大致就是这样，有写的不好的地方欢迎指正。</p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/LazyIonEs/FocusSunView.git">FocusSunView</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 自定义View </category>
          
          <category> 自定义View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 相机 </tag>
            
            <tag> 自定义View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿墨迹24小时天气自定义View</title>
      <link href="/post/7482f6f9/"/>
      <url>/post/7482f6f9/</url>
      
        <content type="html"><![CDATA[<h2 id="先看墨迹天气效果图"><a href="#先看墨迹天气效果图" class="headerlink" title="先看墨迹天气效果图"></a>先看墨迹天气效果图</h2><p><img src="https://bu.dusays.com/2023/08/10/64d43fec59021.webp" alt="5506445253_63249103744_1656936370197_694x449.gif"></p><p>因为需求原因，改了一些样式</p><p><img src="https://bu.dusays.com/2023/08/10/64d43febdc2a0.webp" alt="5506445253_63339371021_1657021325668_687x425.gif"></p><h2 id="平滑的线"><a href="#平滑的线" class="headerlink" title="平滑的线"></a>平滑的线</h2><p>话不多说，直接开始，首先是画出这条曲线，找到每个小时温度对应点位，连成一条线，左边显示最高温度和最低温度，最高温度对应曲线中的最高点，最低温度对应曲线中的最低点，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Point <span class="title function_">calculateTempPoint</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> temp)</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">minHeight</span> <span class="operator">=</span> tempBaseTop;</span><br><span class="line">    <span class="type">double</span> <span class="variable">maxHeight</span> <span class="operator">=</span> tempBaseBottom;</span><br><span class="line">    <span class="type">double</span> <span class="variable">tempY</span> <span class="operator">=</span> maxHeight - (temp - minTemp) * <span class="number">1.0</span> / (maxTemp - minTemp) * (maxHeight - minHeight);</span><br><span class="line">    <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>((left + right) / <span class="number">2</span>, (<span class="type">int</span>) tempY);</span><br><span class="line">    <span class="keyword">return</span> point;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入点的左边距，右边距和这个时间段对应的温度，返回一个Point类，Point类中有x，y两个属性，构造方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tempBaseTop</code>和<code>tempBaseBottom</code>是在初始化中按高度比例来分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tempBaseTop = (mHeight - bottomTextHeight) / <span class="number">3</span>;</span><br><span class="line">tempBaseBottom = (mHeight - bottomTextHeight) * <span class="number">3</span> / <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><code>bottomTextHeight</code>是下方数字文本高度<br>获取每个温度对应的坐标轴之前，先拿到24小时天气数据中的最高温和最低温，这样就能确定每个点位的距离y轴的坐标。拿到24个坐标点后，直接来第一步，画出曲线，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line"><span class="type">Point</span> <span class="variable">point0</span> <span class="operator">=</span> listItems.get(<span class="number">0</span>).getTempPoint();</span><br><span class="line">path.moveTo(point0.x, point0.y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listItems.size(); i++) &#123;</span><br><span class="line">    <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> listItems.get(i).getTempPoint();</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">pointPre</span> <span class="operator">=</span> listItems.get(i - <span class="number">1</span>).getTempPoint();</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            path.lineTo(point.x, point.y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            path.rLineTo(point.x - pointPre.x, point.y - pointPre.y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">canvas.drawPath(path, linePaint);</span><br></pre></td></tr></table></figure><p>直接<code>new</code>一个<code>Path</code>，使用<code>moveTo</code>方法移动到第一个点位，然后直接<code>for</code>循环，第一个点不画，从1开始，直接<code>lineTo</code>到指定的x，y坐标，这里第一条线使用了<code>lineTo</code>，后面都是用的<code>rLineTo</code>，也就是从上一条线的最终点开始画，就不需要频繁的<code>moveTo</code>了。本来打算使用三阶贝塞尔曲线画的，画出来之后发现每条线的连接处有很明显的折角，不平滑，可能是我用的方法不对，有明白的可以跟我说说，三阶贝塞尔画出来的就像下面这样</p><p><img src="https://bu.dusays.com/2023/08/10/64d43feaa89d4.webp" alt="5506445253_63262601417_IMG_20220705_085830.jpg"><br>再看下使用画直线的方式画出来的效果</p><p><img src="https://bu.dusays.com/2023/08/10/64d43fe98d6e5.webp" alt="5506445253_63264419320_IMG_20220705_091358.jpg"><br>看的出来，这种短而坡度小的线，效果不是很大，就是更直了一点，然后我们再给<code>Paint</code>设置<code>PathEffect</code>试试效果，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PathEffect</span> <span class="variable">pathEffect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CornerPathEffect</span>(<span class="number">180</span>);</span><br><span class="line">linePaint.setPathEffect(pathEffect);</span><br></pre></td></tr></table></figure><p><code>CornerPathEffect</code>的作用是通过将线段之间的任何锐角替换为指定半径的圆角来转换绘制的几何图形（<code>STROKE</code> 或 <code>FILL</code> 样式）。参数：半径 - 线段之间的圆角</p><p><img src="https://bu.dusays.com/2023/08/10/64d43fe98a87c.webp" alt="5506445253_63268350797_IMG_20220705_094126.jpg"><br>是不是平滑了很多。</p><h2 id="天气Icon背景框"><a href="#天气Icon背景框" class="headerlink" title="天气Icon背景框"></a>天气Icon背景框</h2><p>曲线结束之后先画出每个天气icon所在的矩形框，每个矩形框之间都有一定的缝隙，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Point</span> <span class="variable">point0</span> <span class="operator">=</span> listItems.get(<span class="number">0</span>).tempPoint;</span><br><span class="line"><span class="type">Path</span> <span class="variable">pathBG</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line">pathBG.moveTo(point0.x, point0.y);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listItems.size(); i++) &#123;</span><br><span class="line">    <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> listItems.get(i).getTempPoint();</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">pointPre</span> <span class="operator">=</span> listItems.get(i - <span class="number">1</span>).getTempPoint();</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            pathBG.lineTo(point.x, point.y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (listItems.get(i).getIcon() != -<span class="number">1</span>)</span><br><span class="line">                pathBG.rLineTo(point.x - pointPre.x - DisplayUtil.dip2px(getContext(), <span class="number">1</span>), point.y - pointPre.y);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pathBG.rLineTo(point.x - pointPre.x, point.y - pointPre.y);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Point</span> <span class="variable">pointBackup</span> <span class="operator">=</span> listItems.get(<span class="number">0</span>).getTempPoint();</span><br><span class="line">        <span class="keyword">if</span> (listItems.get(i).getIcon() != -<span class="number">1</span> || (getGoneBehind(i) &amp;&amp; i == listItems.size() - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (listItems.get(j).getIcon() != -<span class="number">1</span>) &#123;</span><br><span class="line">                    pointBackup = listItems.get(j).getTempPoint();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (listItems.get(i).getTempPoint() != pointBackup) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> mHeight - bottomTextHeight - DisplayUtil.dip2px(getContext(), <span class="number">4</span>) - point.y;</span><br><span class="line">                pathBG.rLineTo(<span class="number">0</span>, height);</span><br><span class="line">                pathBG.rLineTo(pointBackup.x - point.x + DisplayUtil.dip2px(getContext(), <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">                canvas.drawPath(pathBG, rectPaint);</span><br><span class="line">                pathBG.reset();</span><br><span class="line">                <span class="comment">//移到新的点开始画</span></span><br><span class="line">                pathBG.moveTo(point.x, point.y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">getGoneBehind</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    List&lt;Boolean&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> index; k &lt; listItems.size(); k++) &#123;</span><br><span class="line">        data.add(listItems.get(k).res == -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !data.contains(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里前面和画曲线一样，原理就是先画出一个天气icon所在的矩形框上方的曲线，然后从曲线的末端向下画一条直线，在向左画至矩形框的左边界，然后封闭起来。可以看到这里面有很多<code>getIcon() != -1</code>的判断，这些是在塞数据的时候判断当前时间段的<code>icon</code>是否和上一个一样，一样的话就把<code>icon</code>替换成-1，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">icon</span> <span class="operator">=</span> list.get(<span class="number">0</span>).getIcon();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; icon == list.get(i).getIcon()) &#123;</span><br><span class="line">        list.get(i).setIcon(-<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        icon = list.get(i).getIcon();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于每个矩形中间需要间隙，就在顶部和底部的线时减去了<code>1dp</code>，代码中可以看到除了画曲线外只画了两条线，但是却实现了填充矩形的效果，这个是因为我给<code>rectPaint</code>设置了<code>Style</code>时传入的属性是<code>Paint.Style.FILL</code>，设置<code>FILL</code>属性后，三角形只需要画出两条线就可自动封闭，矩形画出三条线，如果不方便使用<code>FILL</code>属性的话，可以使用Path提供的方法，<code>path.close();</code>，效果等同于<code>FILL</code>，封闭矩形后使用<code>path.reset();</code>清除路径中的所有线条和曲线，然后移动到下一个开始画曲线的点，循环下去，看一下效果</p><p><img src="https://bu.dusays.com/2023/08/10/64d43fe986a2f.webp" alt="5506445253_63317592872_IMG_20220705_162537.jpg"></p><h2 id="天气Icon"><a href="#天气Icon" class="headerlink" title="天气Icon"></a>天气Icon</h2><p>矩形结束之后就是天气icon了。在看一下墨迹天气的效果图<br><img src="https://bu.dusays.com/2023/08/10/64d43fec59021.webp" alt="5506445253_63249103744_1656936370197_694x449.gif"></p><p>从图中可以看到，天气的<code>icon</code>是在每个矩形的正中间，随着手指的滑动，最左边的<code>icon</code>所在的矩形如果被<code>view</code>的左边界盖住，矩形中的<code>icon</code>保持在<code>view</code>的左边界和矩形的右边界中间，最右边同理。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listItems.size(); i++) &#123;</span><br><span class="line">    <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> listItems.get(i).getTempPoint();</span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">pointBackup</span> <span class="operator">=</span> listItems.get(<span class="number">0</span>).getTempPoint();</span><br><span class="line">        <span class="keyword">if</span> (listItems.get(i).getIcon() != -<span class="number">1</span> || (getGoneBehind(i) &amp;&amp; i == listItems.size() - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">icon</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexBackUp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (listItems.get(j).getIcon() != -<span class="number">1</span>) &#123;</span><br><span class="line">                    icon = listItems.get(j).getIcon();</span><br><span class="line">                    indexBackUp = j;</span><br><span class="line">                    pointBackup = listItems.get(j).getTempPoint();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (listItems.get(i).getTempPoint() != pointBackup) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> (point.x - pointBackup.x) / <span class="number">2</span> + pointBackup.x - DisplayUtil.dip2px(getContext(), <span class="number">10</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> (point.x - pointBackup.x) / <span class="number">2</span> + pointBackup.x + DisplayUtil.dip2px(getContext(), <span class="number">10</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">newLeft</span> <span class="operator">=</span> (point.x - (pointBackup.x - getItemLeftMargin(indexBackUp))) / <span class="number">2</span> + (pointBackup.x - getItemLeftMargin(indexBackUp));</span><br><span class="line">                <span class="type">int</span> <span class="variable">newRight</span> <span class="operator">=</span> ((point.x + getItemRightMargin(i)) - pointBackup.x) / <span class="number">2</span> + pointBackup.x;</span><br><span class="line">                <span class="keyword">if</span> (getItemLeftMargin(indexBackUp) &lt; <span class="number">0</span> &amp;&amp; newLeft + DisplayUtil.dip2px(getContext(), <span class="number">20</span>) &lt; point.x &amp;&amp; i - indexBackUp &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    left = newLeft - DisplayUtil.dip2px(getContext(), <span class="number">10</span>);</span><br><span class="line">                    right = left + DisplayUtil.dip2px(getContext(), <span class="number">20</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getItemLeftMargin(indexBackUp) &lt; <span class="number">0</span> &amp;&amp; newLeft + DisplayUtil.dip2px(getContext(), <span class="number">40</span>) &gt;= point.x &amp;&amp; i - indexBackUp &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    left = point.x - DisplayUtil.dip2px(getContext(), <span class="number">30</span>);</span><br><span class="line">                    right = left + DisplayUtil.dip2px(getContext(), <span class="number">20</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (getItemRightMargin(i) &lt; <span class="number">0</span> &amp;&amp; newRight &gt; pointBackup.x + DisplayUtil.dip2px(getContext(), <span class="number">10</span>) &amp;&amp; i - indexBackUp &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    right = newRight + DisplayUtil.dip2px(getContext(), <span class="number">10</span>);</span><br><span class="line">                    left = right - DisplayUtil.dip2px(getContext(), <span class="number">20</span>);</span><br><span class="line">                &#125;                            </span><br><span class="line">                <span class="keyword">if</span> (getItemLeftMargin(indexBackUp) &lt; <span class="number">0</span> &amp;&amp; getItemRightMargin(i) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                     left = pointBackup.x - getItemLeftMargin(indexBackUp) + scrollWidth / <span class="number">2</span> - DisplayUtil.dip2px(getContext(), <span class="number">10</span>);</span><br><span class="line">                     right = left + DisplayUtil.dip2px(getContext(), <span class="number">20</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Drawable</span> <span class="variable">drawable</span> <span class="operator">=</span> ContextCompat.getDrawable(getContext(), icon);</span><br><span class="line">                drawable.setBounds(left,</span><br><span class="line">                        tempBaseBottom + DisplayUtil.dip2px(getContext(), <span class="number">5</span>),</span><br><span class="line">                        right,</span><br><span class="line">                        tempBaseBottom + DisplayUtil.dip2px(getContext(), <span class="number">25</span>));</span><br><span class="line">                drawable.draw(canvas);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先就是拿到<code>icon</code>所在矩形上方曲线的起始点，记住起始点的下标，<code>x</code>，<code>y</code>和<code>icon</code>，<code>icon</code>所在矩形上方曲线结束点的<code>x</code>轴坐标减去<code>icon</code>所在矩形上方曲线起始点的x轴坐标就可以拿到这个矩形的宽，宽除2在加上<code>icon</code>所在矩形上方曲线结束点的x轴坐标就是矩形中间点距离左边的边距，默认icon的left和right是在中间点的基础上减去10dp和加上10dp。<br>然后就是判断当前<code>icon</code>所在的矩形左边界或者右边界是否超出<code>view</code>的边界，因为<code>newLeft</code>是随着手指滑动不断减小或者增加的，所以需要满足当前<code>icon</code>所在矩形的左边界超出<code>view</code>的边界，且左边界不能超过右边界，右边同理，需要注意的是，当前icon的矩形如果只占了一格，就不需要改变边界，一直保持在矩形的中间就好。除了这两种情况外还有一种情况，就是矩形两边都超出<code>view</code>的边界，这时就是让天气<code>icon</code>保持在<code>view</code>的正中间就好了。<br>那么如何拿到当前<code>icon</code>所在矩形上方曲线起始点距离<code>view</code>左边界的距离呢，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 点距离左边的位置</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  i </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getItemLeftMargin</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> MARGIN_LEFT_ITEM + i * ITEM_WIDTH + ITEM_WIDTH / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> left - scrollOffset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 点距离右边的位置</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getItemRightMargin</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> MARGIN_LEFT_ITEM + i * ITEM_WIDTH + ITEM_WIDTH / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> scrollWidth - (left - scrollOffset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MARGIN_LEFT_ITEM</code>：左边预留宽度<br><code>ITEM_WIDTH</code>：每个Item的宽度<br><code>scrollOffset</code>：滚动偏移量<br><code>scrollWidth</code>：<code>HorizontalScrollView</code>的宽度<br>左边界距离屏幕左边的编辑就是当前<code>icon</code>所在矩形上方曲线起始点的x轴减去滑动的偏移量，右边界距离右边就是<code>HorizontalScrollView</code>的宽度减去距离屏幕左边界的值<br>24小时天气自定义view是被另一个自定义View中包含的，它继承于<code>HorizontalScrollView</code>，需要修改的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">    <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> computeHorizontalScrollOffset();</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxOffset</span> <span class="operator">=</span> computeHorizontalScrollRange() - DisplayUtil.getScreenWidth(getContext());</span><br><span class="line">    <span class="keyword">if</span> (today24HourView != <span class="literal">null</span>) &#123;</span><br><span class="line">        today24HourView.setScrollOffset(offset, maxOffset, getWidth());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setToday24HourView</span><span class="params">(Today24HourView today24HourView)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.today24HourView = today24HourView;</span><br><span class="line">    invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>computeHorizontalScrollOffset（）</code>计算水平滚动条拇指在水平范围内的水平偏移量<br><code>computeHorizontalScrollRange（）</code>滚动视图的滚动范围是其所有子视图的总宽度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置scrollerView的滚动条的位置，通过位置计算当前的时段</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScrollOffset</span><span class="params">(<span class="type">int</span> offset, <span class="type">int</span> maxScrollOffset, <span class="type">int</span> scrollWidth)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.maxScrollOffset = maxScrollOffset;</span><br><span class="line">    <span class="built_in">this</span>.scrollWidth = scrollWidth;</span><br><span class="line">    scrollOffset = offset;</span><br><span class="line">    currentItemIndex = calculateItemIndex(offset);</span><br><span class="line">    invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>maxScrollOffset</code>：最大滚动距离<br><code>scrollWidth</code>：<code>HorizontalScrollView</code>的宽度<br><code>scrollOffset</code>：滚动偏移量<br>xml中代码如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.weather.gorgeous.custom_view.IndexHorizontalScrollView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:fadeScrollbars</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:scrollbars</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com.weather.gorgeous.custom_view.Today24HourView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.weather.gorgeous.custom_view.IndexHorizontalScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/10/64d43fe9a3d89.webp" alt="5506445253_63324907904_1657012359644_687x218.gif"></p><h2 id="天气指针"><a href="#天气指针" class="headerlink" title="天气指针"></a>天气指针</h2><p>接下来就是当前天气指针了，就是根据手指滑动，向左或向右偏移，并且滑动到不同的item，改变指针中的内容，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WeatherHoursModel</span> <span class="variable">item</span> <span class="operator">=</span> listItems.get(i);</span><br><span class="line"><span class="keyword">if</span> (currentItemIndex == i) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">Y</span> <span class="operator">=</span> getTempBarY();</span><br><span class="line">    <span class="type">Rect</span> <span class="variable">targetRect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>(</span><br><span class="line">        getScrollBarX(),</span><br><span class="line">        Y - DisplayUtil.dip2px(getContext(), <span class="number">40</span>),</span><br><span class="line">        getScrollBarX() + DisplayUtil.dip2px(getContext(), <span class="number">92</span>),</span><br><span class="line">        Y - DisplayUtil.dip2px(getContext(), <span class="number">14</span>));</span><br><span class="line">    <span class="type">Drawable</span> <span class="variable">drawable</span> <span class="operator">=</span> ContextCompat.getDrawable(getContext(), R.drawable.bg_indicator_text);</span><br><span class="line">    drawable.setBounds(targetRect);</span><br><span class="line">    drawable.draw(canvas);</span><br><span class="line">    <span class="comment">//画出温度提示</span></span><br><span class="line">    Paint.<span class="type">FontMetricsInt</span> <span class="variable">fontMetrics</span> <span class="operator">=</span> textPaint.getFontMetricsInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">baseline</span> <span class="operator">=</span> (targetRect.bottom + targetRect.top - fontMetrics.bottom - fontMetrics.top) / <span class="number">2</span>;</span><br><span class="line">    textPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class="line">    textPaint.setTextSize(DisplayUtil.sp2px(getContext(), <span class="number">10</span>));</span><br><span class="line">    canvas.drawText(TimeUtils.getDateHHmm(item.getTempStamp()) + <span class="string">&quot; &quot;</span> + item.getWeather() + <span class="string">&quot;  &quot;</span> + item.getTemperature() + <span class="string">&quot;°&quot;</span>, targetRect.centerX(), baseline, textPaint);</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> mHeight - bottomTextHeight - DisplayUtil.dip2px(getContext(), <span class="number">4</span>);</span><br><span class="line">    canvas.drawLine(targetRect.centerX(), targetRect.bottom + DisplayUtil.dip2px(getContext(), <span class="number">4</span>), targetRect.centerX(), height, indicatorLinePaint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算温度提示文字的运动轨迹</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getTempBarY</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> getScrollBarX();</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> MARGIN_LEFT_ITEM;</span><br><span class="line">    <span class="type">Point</span> <span class="variable">startPoint</span> <span class="operator">=</span> <span class="literal">null</span>, endPoint;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ITEM_SIZE; i++) &#123;</span><br><span class="line">        sum += ITEM_WIDTH;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; sum) &#123;</span><br><span class="line">            startPoint = listItems.get(i).getTempPoint();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span> &gt;= ITEM_SIZE || startPoint == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> listItems.get(ITEM_SIZE - <span class="number">1</span>).getTempPoint().y;</span><br><span class="line">    endPoint = listItems.get(i + <span class="number">1</span>).getTempPoint();</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> MARGIN_LEFT_ITEM + i * ITEM_WIDTH;</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>) (startPoint.y + (x - left) * <span class="number">1.0</span> / ITEM_WIDTH * (endPoint.y - startPoint.y));</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getScrollBarX</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (ITEM_SIZE - <span class="number">5</span>) * ITEM_WIDTH * scrollOffset / maxScrollOffset;</span><br><span class="line">    x = x + MARGIN_LEFT_ITEM;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/08/10/64d43fe9a0077.webp" alt="5506445253_63340840294_1657023135269_687x228.gif"></p><p>然后就是实现当前选中矩形改变颜色，这个很简单，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (pointBackup.x &lt; getScrollBarX() + DisplayUtil.dip2px(getContext(), <span class="number">46</span>) &amp;&amp; getScrollBarX() + DisplayUtil.dip2px(getContext(), <span class="number">46</span>) &lt; point.x) &#123;</span><br><span class="line">    rectPaint.setColor(Color.parseColor(<span class="string">&quot;#33FFFFFF&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    rectPaint.setColor(Color.parseColor(<span class="string">&quot;#1AFFFFFF&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于下面的时间字段，和左面的最高温和最低温就不写了，很简单，计算一下位置就行，有兴趣的复制下面完整代码</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><code>Today24HourView.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Today24HourView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;Today24HourView&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ITEM_SIZE</span> <span class="operator">=</span> <span class="number">24</span>;  <span class="comment">//24小时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ITEM_WIDTH; <span class="comment">//每个Item的宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> MARGIN_LEFT_ITEM; <span class="comment">//左边预留宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> MARGIN_RIGHT_ITEM; <span class="comment">//右边预留宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bottomTextHeight;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> scrollWidth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mHeight, mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tempBaseTop;  <span class="comment">//温度折线的上边Y坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tempBaseBottom; <span class="comment">//温度折线的下边Y坐标</span></span><br><span class="line">    <span class="keyword">private</span> Paint bitmapPaint, linePaint, rectPaint, indicatorLinePaint;</span><br><span class="line">    <span class="keyword">private</span> TextPaint textPaint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;WeatherHoursModel&gt; listItems;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxScrollOffset</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//滚动条最长滚动距离</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">scrollOffset</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//滚动条偏移量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">currentItemIndex</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//当前滚动的位置所对应的item下标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxTemp;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> minTemp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Today24HourView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Today24HourView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Today24HourView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        MARGIN_LEFT_ITEM = DisplayUtil.dip2px(getContext(), <span class="number">2</span>);</span><br><span class="line">        MARGIN_RIGHT_ITEM = DisplayUtil.dip2px(getContext(), <span class="number">20</span>);</span><br><span class="line">        ITEM_WIDTH = DisplayUtil.dip2px(getContext(), <span class="number">30</span>);</span><br><span class="line">        bottomTextHeight = DisplayUtil.dip2px(getContext(), <span class="number">16</span>);</span><br><span class="line">        mWidth = MARGIN_LEFT_ITEM + MARGIN_RIGHT_ITEM + ITEM_SIZE * ITEM_WIDTH;</span><br><span class="line">        mHeight = DisplayUtil.dip2px(getContext(), <span class="number">140</span>);</span><br><span class="line">        tempBaseTop = (mHeight - bottomTextHeight) / <span class="number">3</span>;</span><br><span class="line">        tempBaseBottom = (mHeight - bottomTextHeight) * <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">        listItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        initPaint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initPaint</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        rectPaint = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        rectPaint.setColor(Color.parseColor(<span class="string">&quot;#1AFFFFFF&quot;</span>));</span><br><span class="line">        rectPaint.setAntiAlias(<span class="literal">true</span>);</span><br><span class="line">        rectPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        rectPaint.setStrokeCap(Paint.Cap.ROUND);</span><br><span class="line">        rectPaint.setStrokeJoin(Paint.Join.ROUND);</span><br><span class="line">        rectPaint.setStrokeWidth(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PathEffect</span> <span class="variable">pathEffect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CornerPathEffect</span>(<span class="number">180</span>);</span><br><span class="line">        linePaint = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        linePaint.setColor(Color.WHITE);</span><br><span class="line">        linePaint.setPathEffect(pathEffect);</span><br><span class="line">        linePaint.setAntiAlias(<span class="literal">true</span>);</span><br><span class="line">        linePaint.setStrokeCap(Paint.Cap.ROUND);</span><br><span class="line">        linePaint.setStrokeJoin(Paint.Join.ROUND);</span><br><span class="line">        linePaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        linePaint.setStrokeWidth(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        textPaint = <span class="keyword">new</span> <span class="title class_">TextPaint</span>();</span><br><span class="line">        textPaint.setColor(Color.WHITE);</span><br><span class="line">        textPaint.setAntiAlias(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        bitmapPaint = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        bitmapPaint.setAntiAlias(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        indicatorLinePaint = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        indicatorLinePaint = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        indicatorLinePaint.setColor(Color.WHITE);</span><br><span class="line">        indicatorLinePaint.setAntiAlias(<span class="literal">true</span>);</span><br><span class="line">        indicatorLinePaint.setStrokeCap(Paint.Cap.ROUND);</span><br><span class="line">        indicatorLinePaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        indicatorLinePaint.setStrokeWidth(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHourItems</span><span class="params">(List&lt;WeatherHoursModel&gt; listItems)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.listItems.clear();</span><br><span class="line">        List&lt;WeatherHoursModel&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(listItems);</span><br><span class="line">        maxTemp = list.get(<span class="number">0</span>).getTemperature();</span><br><span class="line">        minTemp = list.get(<span class="number">0</span>).getTemperature();</span><br><span class="line">        <span class="keyword">for</span> (WeatherHoursModel listItem : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (listItem.getTemperature() &gt; maxTemp)</span><br><span class="line">                maxTemp = listItem.getTemperature();</span><br><span class="line">            <span class="keyword">if</span> (listItem.getTemperature() &lt; minTemp)</span><br><span class="line">                minTemp = listItem.getTemperature();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">icon</span> <span class="operator">=</span> list.get(<span class="number">0</span>).getIcon();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> MARGIN_LEFT_ITEM + i * ITEM_WIDTH;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> left + ITEM_WIDTH;</span><br><span class="line">            <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> calculateTempPoint(left, right, list.get(i).getTemperature());</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; icon == list.get(i).getIcon()) &#123;</span><br><span class="line">                list.get(i).setIcon(-<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                icon = list.get(i).getIcon();</span><br><span class="line">            &#125;</span><br><span class="line">            list.get(i).setTempPoint(point);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.listItems.addAll(list);</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Point <span class="title function_">calculateTempPoint</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> temp)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">minHeight</span> <span class="operator">=</span> tempBaseTop;</span><br><span class="line">        <span class="type">double</span> <span class="variable">maxHeight</span> <span class="operator">=</span> tempBaseBottom;</span><br><span class="line">        <span class="type">double</span> <span class="variable">tempY</span> <span class="operator">=</span> maxHeight - (temp - minTemp) * <span class="number">1.0</span> / (maxTemp - minTemp) * (maxHeight - minHeight);</span><br><span class="line">        <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>((left + right) / <span class="number">2</span>, (<span class="type">int</span>) tempY);</span><br><span class="line">        <span class="keyword">return</span> point;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(mWidth, mHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onLayout</span><span class="params">(<span class="type">boolean</span> changed, <span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">        onDrawLine(canvas);</span><br><span class="line"><span class="comment">//        drawLeftTempText(canvas);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listItems.size(); i++) &#123;</span><br><span class="line">            onDrawTemp(canvas, i);</span><br><span class="line">            onDrawText(canvas, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onDrawTemp</span><span class="params">(Canvas canvas, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">WeatherHoursModel</span> <span class="variable">item</span> <span class="operator">=</span> listItems.get(i);</span><br><span class="line">        <span class="keyword">if</span> (currentItemIndex == i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">Y</span> <span class="operator">=</span> getTempBarY();</span><br><span class="line">            <span class="type">Rect</span> <span class="variable">targetRect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>(</span><br><span class="line">                    getScrollBarX(),</span><br><span class="line">                    Y - DisplayUtil.dip2px(getContext(), <span class="number">40</span>),</span><br><span class="line">                    getScrollBarX() + DisplayUtil.dip2px(getContext(), <span class="number">92</span>),</span><br><span class="line">                    Y - DisplayUtil.dip2px(getContext(), <span class="number">14</span>));</span><br><span class="line">            <span class="type">Drawable</span> <span class="variable">drawable</span> <span class="operator">=</span> ContextCompat.getDrawable(getContext(), R.drawable.bg_indicator_text);</span><br><span class="line">            drawable.setBounds(targetRect);</span><br><span class="line">            drawable.draw(canvas);</span><br><span class="line">            <span class="comment">//画出温度提示</span></span><br><span class="line">            Paint.<span class="type">FontMetricsInt</span> <span class="variable">fontMetrics</span> <span class="operator">=</span> textPaint.getFontMetricsInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">baseline</span> <span class="operator">=</span> (targetRect.bottom + targetRect.top - fontMetrics.bottom - fontMetrics.top) / <span class="number">2</span>;</span><br><span class="line">            textPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class="line">            textPaint.setTextSize(DisplayUtil.sp2px(getContext(), <span class="number">10</span>));</span><br><span class="line">            canvas.drawText(TimeUtils.getDateHHmm(item.getTempStamp()) + <span class="string">&quot; &quot;</span> + item.getWeather() + <span class="string">&quot;  &quot;</span> + item.getTemperature() + <span class="string">&quot;°&quot;</span>, targetRect.centerX(), baseline, textPaint);</span><br><span class="line">            <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> mHeight - bottomTextHeight - DisplayUtil.dip2px(getContext(), <span class="number">4</span>);</span><br><span class="line">            canvas.drawLine(targetRect.centerX(), targetRect.bottom + DisplayUtil.dip2px(getContext(), <span class="number">4</span>), targetRect.centerX(), height, indicatorLinePaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 温度的折线,为了折线比较平滑,做了贝塞尔曲线</span></span><br><span class="line"><span class="comment">     * 画了贝塞尔曲线后一点都不平滑,放弃</span></span><br><span class="line"><span class="comment">     * 直接使用直线连接起来,用CornerPathEffect改变连接处的弧度,顺滑无比</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> canvas</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onDrawLine</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (listItems.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line">            <span class="type">Point</span> <span class="variable">point0</span> <span class="operator">=</span> listItems.get(<span class="number">0</span>).getTempPoint();</span><br><span class="line">            path.moveTo(point0.x, point0.y);</span><br><span class="line">            <span class="type">Path</span> <span class="variable">pathBG</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line">            pathBG.moveTo(point0.x, point0.y);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listItems.size(); i++) &#123;</span><br><span class="line">                <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> listItems.get(i).getTempPoint();</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">Point</span> <span class="variable">pointPre</span> <span class="operator">=</span> listItems.get(i - <span class="number">1</span>).getTempPoint();</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                        path.lineTo(point.x, point.y);</span><br><span class="line">                        pathBG.lineTo(point.x, point.y);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        path.rLineTo(point.x - pointPre.x, point.y - pointPre.y);</span><br><span class="line">                        <span class="keyword">if</span> (listItems.get(i).getIcon() != -<span class="number">1</span>)</span><br><span class="line">                            pathBG.rLineTo(point.x - pointPre.x - DisplayUtil.dip2px(getContext(), <span class="number">1</span>), point.y - pointPre.y);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            pathBG.rLineTo(point.x - pointPre.x, point.y - pointPre.y);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">Point</span> <span class="variable">pointBackup</span> <span class="operator">=</span> listItems.get(<span class="number">0</span>).getTempPoint();</span><br><span class="line">                    <span class="keyword">if</span> (listItems.get(i).getIcon() != -<span class="number">1</span> || (getGoneBehind(i) &amp;&amp; i == listItems.size() - <span class="number">1</span>)) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">icon</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">indexBackUp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (listItems.get(j).getIcon() != -<span class="number">1</span>) &#123;</span><br><span class="line">                                icon = listItems.get(j).getIcon();</span><br><span class="line">                                indexBackUp = j;</span><br><span class="line">                                pointBackup = listItems.get(j).getTempPoint();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (pointBackup.x &lt; getScrollBarX() + DisplayUtil.dip2px(getContext(), <span class="number">46</span>) &amp;&amp; getScrollBarX() + DisplayUtil.dip2px(getContext(), <span class="number">46</span>) &lt; point.x) &#123;</span><br><span class="line">                            rectPaint.setColor(Color.parseColor(<span class="string">&quot;#33FFFFFF&quot;</span>));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            rectPaint.setColor(Color.parseColor(<span class="string">&quot;#1AFFFFFF&quot;</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (listItems.get(i).getTempPoint() != pointBackup) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> mHeight - bottomTextHeight - DisplayUtil.dip2px(getContext(), <span class="number">4</span>) - point.y;</span><br><span class="line">                            pathBG.rLineTo(<span class="number">0</span>, height);</span><br><span class="line">                            pathBG.rLineTo(pointBackup.x - point.x + DisplayUtil.dip2px(getContext(), <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">                            canvas.drawPath(pathBG, rectPaint);</span><br><span class="line">                            pathBG.reset();</span><br><span class="line">                            <span class="comment">//移到新的点开始画</span></span><br><span class="line">                            pathBG.moveTo(point.x, point.y);</span><br><span class="line"></span><br><span class="line">                            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> (point.x - pointBackup.x) / <span class="number">2</span> + pointBackup.x - DisplayUtil.dip2px(getContext(), <span class="number">10</span>);</span><br><span class="line">                            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> (point.x - pointBackup.x) / <span class="number">2</span> + pointBackup.x + DisplayUtil.dip2px(getContext(), <span class="number">10</span>);</span><br><span class="line">                            <span class="type">int</span> <span class="variable">newLeft</span> <span class="operator">=</span> (point.x - (pointBackup.x - getItemLeftMargin(indexBackUp))) / <span class="number">2</span> + (pointBackup.x - getItemLeftMargin(indexBackUp));</span><br><span class="line">                            <span class="type">int</span> <span class="variable">newRight</span> <span class="operator">=</span> ((point.x + getItemRightMargin(i)) - pointBackup.x) / <span class="number">2</span> + pointBackup.x;</span><br><span class="line">                            <span class="keyword">if</span> (getItemLeftMargin(indexBackUp) &lt; <span class="number">0</span> &amp;&amp; newLeft + DisplayUtil.dip2px(getContext(), <span class="number">20</span>) &lt; point.x &amp;&amp; i - indexBackUp &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                                left = newLeft - DisplayUtil.dip2px(getContext(), <span class="number">10</span>);</span><br><span class="line">                                right = left + DisplayUtil.dip2px(getContext(), <span class="number">20</span>);</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getItemLeftMargin(indexBackUp) &lt; <span class="number">0</span> &amp;&amp; newLeft + DisplayUtil.dip2px(getContext(), <span class="number">40</span>) &gt;= point.x &amp;&amp; i - indexBackUp &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                                left = point.x - DisplayUtil.dip2px(getContext(), <span class="number">30</span>);</span><br><span class="line">                                right = left + DisplayUtil.dip2px(getContext(), <span class="number">20</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (getItemRightMargin(i) &lt; <span class="number">0</span> &amp;&amp; newRight &gt; pointBackup.x + DisplayUtil.dip2px(getContext(), <span class="number">10</span>) &amp;&amp; i - indexBackUp &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                                right = newRight + DisplayUtil.dip2px(getContext(), <span class="number">10</span>);</span><br><span class="line">                                left = right - DisplayUtil.dip2px(getContext(), <span class="number">20</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (getItemLeftMargin(indexBackUp) &lt; <span class="number">0</span> &amp;&amp; getItemRightMargin(i) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                                left = pointBackup.x - getItemLeftMargin(indexBackUp) + scrollWidth / <span class="number">2</span> - DisplayUtil.dip2px(getContext(), <span class="number">10</span>);</span><br><span class="line">                                right = left + DisplayUtil.dip2px(getContext(), <span class="number">20</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="type">Drawable</span> <span class="variable">drawable</span> <span class="operator">=</span> ContextCompat.getDrawable(getContext(), icon);</span><br><span class="line">                            drawable.setBounds(left,</span><br><span class="line">                                    tempBaseBottom + DisplayUtil.dip2px(getContext(), <span class="number">5</span>),</span><br><span class="line">                                    right,</span><br><span class="line">                                    tempBaseBottom + DisplayUtil.dip2px(getContext(), <span class="number">25</span>));</span><br><span class="line">                            drawable.draw(canvas);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.drawPath(path, linePaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">getGoneBehind</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        List&lt;Boolean&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> index; k &lt; listItems.size(); k++) &#123;</span><br><span class="line">            data.add(listItems.get(k).getIcon() == -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !data.contains(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制底部时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onDrawText</span><span class="params">(Canvas canvas, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        textPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> TimeUtils.getDateHHmm(listItems.get(i).getTempStamp());</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> MARGIN_LEFT_ITEM + i * ITEM_WIDTH;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> left + ITEM_WIDTH - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bottom</span> <span class="operator">=</span> mHeight - bottomTextHeight;</span><br><span class="line">        <span class="type">Rect</span> <span class="variable">targetRect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>(left, bottom, right, bottom + bottomTextHeight);</span><br><span class="line">        Paint.<span class="type">FontMetricsInt</span> <span class="variable">fontMetrics</span> <span class="operator">=</span> textPaint.getFontMetricsInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">baseline</span> <span class="operator">=</span> (targetRect.bottom + targetRect.top - fontMetrics.bottom - fontMetrics.top) / <span class="number">2</span>;</span><br><span class="line">        textPaint.setTextSize(DisplayUtil.sp2px(getContext(), <span class="number">12</span>));</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            canvas.drawText(text, left + (ITEM_WIDTH - <span class="number">1</span>) / <span class="number">2</span>, baseline, textPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawLeftTempText</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (listItems.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//画最左侧的文字</span></span><br><span class="line">            textPaint.setTextAlign(Paint.Align.LEFT);</span><br><span class="line">            textPaint.setTextSize(DisplayUtil.sp2px(getContext(), <span class="number">13</span>));</span><br><span class="line">            canvas.drawText(maxTemp + <span class="string">&quot;°&quot;</span>, DisplayUtil.sp2px(getContext(), <span class="number">15</span>), tempBaseTop, textPaint);</span><br><span class="line">            canvas.drawText(minTemp + <span class="string">&quot;°&quot;</span>, DisplayUtil.sp2px(getContext(), <span class="number">15</span>), tempBaseBottom, textPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置scrollerView的滚动条的位置，通过位置计算当前的时段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScrollOffset</span><span class="params">(<span class="type">int</span> offset, <span class="type">int</span> maxScrollOffset, <span class="type">int</span> scrollWidth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxScrollOffset = maxScrollOffset;</span><br><span class="line">        <span class="built_in">this</span>.scrollWidth = scrollWidth;</span><br><span class="line">        scrollOffset = offset;</span><br><span class="line">        currentItemIndex = calculateItemIndex();</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点距离左边的位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getItemLeftMargin</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> MARGIN_LEFT_ITEM + i * ITEM_WIDTH + (ITEM_WIDTH - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> left - scrollOffset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点距离右边的位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getItemRightMargin</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> MARGIN_LEFT_ITEM + i * ITEM_WIDTH + (ITEM_WIDTH - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> scrollWidth - (left - scrollOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过滚动条偏移量计算当前选择的时刻</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calculateItemIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> getScrollBarX();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> MARGIN_LEFT_ITEM - ITEM_WIDTH;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ITEM_SIZE; i++) &#123;</span><br><span class="line">            sum += ITEM_WIDTH;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; sum)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ITEM_SIZE - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getScrollBarX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (ITEM_SIZE - <span class="number">5</span>) * ITEM_WIDTH * scrollOffset / maxScrollOffset;</span><br><span class="line">        x = x + MARGIN_LEFT_ITEM;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算温度提示文字的运动轨迹</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getTempBarY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> getScrollBarX();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> MARGIN_LEFT_ITEM;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">startPoint</span> <span class="operator">=</span> <span class="literal">null</span>, endPoint;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ITEM_SIZE; i++) &#123;</span><br><span class="line">            sum += ITEM_WIDTH;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; sum) &#123;</span><br><span class="line">                startPoint = listItems.get(i).getTempPoint();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &gt;= ITEM_SIZE || startPoint == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> listItems.get(ITEM_SIZE - <span class="number">1</span>).getTempPoint().y;</span><br><span class="line">        endPoint = listItems.get(i + <span class="number">1</span>).getTempPoint();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> MARGIN_LEFT_ITEM + i * ITEM_WIDTH;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>) (startPoint.y + (x - left) * <span class="number">1.0</span> / ITEM_WIDTH * (endPoint.y - startPoint.y));</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IndexHorizontalScrollView.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexHorizontalScrollView</span> <span class="keyword">extends</span> <span class="title class_">HorizontalScrollView</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Today24HourView today24HourView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IndexHorizontalScrollView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IndexHorizontalScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IndexHorizontalScrollView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> computeHorizontalScrollOffset();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxOffset</span> <span class="operator">=</span> computeHorizontalScrollRange() - DisplayUtil.getScreenWidth(getContext());</span><br><span class="line">        <span class="keyword">if</span> (today24HourView != <span class="literal">null</span>) &#123;</span><br><span class="line">            today24HourView.setScrollOffset(offset, maxOffset, getWidth());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setToday24HourView</span><span class="params">(Today24HourView today24HourView)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.today24HourView = today24HourView;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xml中使用"><a href="#xml中使用" class="headerlink" title="xml中使用"></a>xml中使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.weather.gorgeous.custom_view.IndexHorizontalScrollView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:fadeScrollbars</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:scrollbars</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com.weather.gorgeous.custom_view.Today24HourView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.weather.gorgeous.custom_view.IndexHorizontalScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Activity中使用"><a href="#Activity中使用" class="headerlink" title="Activity中使用"></a>Activity中使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binding.indexHorizontalScrollView.setToday24HourView(binding.today24Hour);</span><br><span class="line">binding.today24Hour.setHourItems(data)</span><br></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p><code>WeatherHoursModel.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherHoursModel</span> &#123;</span><br><span class="line">    <span class="comment">// 天气图标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> icon;</span><br><span class="line">    <span class="comment">// 温度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> temperature;</span><br><span class="line">    <span class="comment">//天气</span></span><br><span class="line">    <span class="keyword">private</span> String weather;</span><br><span class="line">    <span class="comment">// 时间戳</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> tempStamp;</span><br><span class="line">    <span class="comment">//x,y轴</span></span><br><span class="line">    <span class="keyword">private</span> Point tempPoint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDateHHmm</span><span class="params">(<span class="type">long</span> time)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">formatTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>(time));</span><br><span class="line">    <span class="keyword">return</span> formatTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dip2px</span><span class="params">(Context context, <span class="type">float</span> dipValue)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">float</span> <span class="variable">scale</span> <span class="operator">=</span> context.getResources().getDisplayMetrics().density;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) (dipValue * scale + <span class="number">0.5f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sp2px</span><span class="params">(Context context, <span class="type">float</span> spValue)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">float</span> <span class="variable">fontScale</span> <span class="operator">=</span> context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) (spValue * fontScale + <span class="number">0.5f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getScreenWidth</span><span class="params">(Context context)</span>&#123;</span><br><span class="line">    <span class="type">DisplayMetrics</span> <span class="variable">dm</span> <span class="operator">=</span> context.getResources().getDisplayMetrics();</span><br><span class="line">    <span class="keyword">return</span> dm.widthPixels;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里就结束了，有写的不好的地方还请指出。</p><h2 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h2><p><a href="https://github.com/LazyIonEs/TwentyFourHour">Github</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://links.jianshu.com/go?to=https://blog.csdn.net/yuton9/article/details/118187905">Android 仿墨迹天气24小时预报</a><br><a href="https://www.jianshu.com/p/47810841abf9">24小时天气（可滑动）</a><br><a href="https://links.jianshu.com/go?to=https://github.com/zx391324751/MoJiDemo">MoJiDemo-作者zx391324751</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 自定义View </category>
          
          <category> 自定义View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 自定义View </tag>
            
            <tag> 天气 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
